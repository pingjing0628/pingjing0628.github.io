<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PSM-Learning</title>
      <link href="/repository/2022/12/11/PSM-Learning/"/>
      <url>/repository/2022/12/11/PSM-Learning/</url>
      
        <content type="html"><![CDATA[<h1>PSM Learning</h1><h2>Role</h2><h2>Step</h2><h2>Noun</h2>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
          <category> PSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PSM </tag>
            
            <tag> Scrum </tag>
            
            <tag> Sprint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Caddy - Installation </title>
      <link href="/repository/2022/12/11/Caddy-Installation/"/>
      <url>/repository/2022/12/11/Caddy-Installation/</url>
      
        <content type="html"><![CDATA[<h1>Caddy Installation</h1><h2>Build Caddy</h2><ol><li><p>Download the &lt;a href = 'https://github.com/caddyserver/caddy/releases'&gt;lastest version &lt;/a&gt; of Caddy.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;caddyserver&#x2F;caddy&#x2F;releases&#x2F;download&#x2F;v2.0.0-rc.3&#x2F;caddy_2.0.0-rc.3_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure></p></li><li><p>Unzip<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf caddy_2.0.0-rc.3_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure></p></li><li><p>Move execution file to <code>/usr/bin/</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv caddy &#x2F;usr&#x2F;bin&#x2F;</span><br></pre></td></tr></table></figure></p></li></ol><h2>Install Caddy</h2><ol><li><p>Create the group<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd --system caddy</span><br></pre></td></tr></table></figure></p></li><li><p>Create a new user<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd --system \</span><br><span class="line">    --gid caddy \</span><br><span class="line">    --create-home \</span><br><span class="line">    --home-dir &#x2F;var&#x2F;lib&#x2F;caddy \</span><br><span class="line">    --shell &#x2F;usr&#x2F;sbin&#x2F;nologin \</span><br><span class="line">    --comment &quot;Caddy web server&quot; \</span><br><span class="line">    caddy</span><br></pre></td></tr></table></figure></p></li></ol><h2>Log</h2><ol><li><p>Create folder to save logs<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir &#x2F;var&#x2F;log&#x2F;caddy</span><br></pre></td></tr></table></figure></p></li><li><p>Modified folder authority<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R caddy:caddy &#x2F;var&#x2F;log&#x2F;caddy</span><br></pre></td></tr></table></figure></p></li></ol><h2>Create caddyfile</h2><p>Caddy reads its configuration from a file called Caddyfile, stored under /etc/caddy.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">your_domain &#123;</span><br><span class="line">    root * &#x2F;var&#x2F;www</span><br><span class="line">    encode gzip</span><br><span class="line">    file_server</span><br><span class="line">    </span><br><span class="line">    log &#123;</span><br><span class="line">        output file &#x2F;var&#x2F;log&#x2F;caddy&#x2F;service_access.log</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2>Service</h2><ol><li><code>/etc/systemd/system</code> create a folder file <code>caddy.service</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Caddy</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;caddyserver.com&#x2F;docs&#x2F;</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;caddy</span><br><span class="line">Group&#x3D;caddy</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;caddy run --environ --config &#x2F;etc&#x2F;caddy&#x2F;Caddyfile</span><br><span class="line">ExecReload&#x3D;&#x2F;usr&#x2F;bin&#x2F;caddy reload --config &#x2F;etc&#x2F;caddy&#x2F;Caddyfile</span><br><span class="line">TimeoutStopSec&#x3D;5s</span><br><span class="line">LimitNOFILE&#x3D;1048576</span><br><span class="line">LimitNPROC&#x3D;512</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line">ProtectSystem&#x3D;full</span><br><span class="line">AmbientCapabilities&#x3D;CAP_NET_BIND_SERVICE</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></li></ol><h2>Caddy system command</h2><ol><li><p>Reload the systemd daemon<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></p></li><li><p>Automatic start caddy<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable caddy</span><br></pre></td></tr></table></figure></p></li><li><p>Active caddy<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start caddy</span><br></pre></td></tr></table></figure></p></li><li><p>Caddy status<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status caddy</span><br></pre></td></tr></table></figure></p></li><li><p>Reload caddy<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl reload caddy</span><br></pre></td></tr></table></figure></p></li><li><p>Stop caddy<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop caddy</span><br></pre></td></tr></table></figure></p></li></ol><h2>Functions</h2><h3>Log</h3><p>Enables access logging; the log directive can still be used in v2, but all logs are structured, encoded as JSON, by default.</p><ul><li><p>v1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log access.log</span><br></pre></td></tr></table></figure></p></li><li><p>v2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log &#123;</span><br><span class="line">output file         access.log</span><br><span class="line">format single_field common_log</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>Reverse_proxy</h3><ul><li><p>v1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy &#x2F; localhost:9005</span><br></pre></td></tr></table></figure></p></li><li><p>v2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse_proxy localhost:9005</span><br></pre></td></tr></table></figure></p></li></ul><h2>SSL certificate</h2><p>Caddy root content is <code>/var/lib/caddy/</code>, where SSL certificate is at<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;lib&#x2F;caddy&#x2F;.local&#x2F;share&#x2F;caddy&#x2F;certificates</span><br></pre></td></tr></table></figure></p><p>Force update SSL certificate, need delete SSL certificate, and restart Caddy<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;var&#x2F;lib&#x2F;caddy&#x2F;.local&#x2F;share&#x2F;caddy&#x2F;certificates&#x2F;acme-v02.api.letsencrypt.org-directory</span><br><span class="line">rm -rf example.com</span><br><span class="line">systemctl restart caddy</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
          <category> Caddy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caddy </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Web server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Advance Tree 高等樹</title>
      <link href="/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Advance-Tree-%E9%AB%98%E7%AD%89%E6%A8%B9/"/>
      <url>/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Advance-Tree-%E9%AB%98%E7%AD%89%E6%A8%B9/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Hashing 雜湊法</title>
      <link href="/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Hashing-%E9%9B%9C%E6%B9%8A%E6%B3%95/"/>
      <url>/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Hashing-%E9%9B%9C%E6%B9%8A%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Search &amp; Sort</title>
      <link href="/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Search-Sort/"/>
      <url>/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Search-Sort/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Graph 圖形</title>
      <link href="/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Graph-%E5%9C%96%E5%BD%A2/"/>
      <url>/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Graph-%E5%9C%96%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Binary Tree &amp; Tree</title>
      <link href="/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Binary-Tree-Tree/"/>
      <url>/repository/2022/12/11/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Binary-Tree-Tree/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Linked List 鏈結串列</title>
      <link href="/repository/2022/12/05/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Linked-List-%E9%8F%88%E7%B5%90%E4%B8%B2%E5%88%97/"/>
      <url>/repository/2022/12/05/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Linked-List-%E9%8F%88%E7%B5%90%E4%B8%B2%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1>6.4 Linked List 鏈結串列</h1><h2>Linked List</h2><ul><li>Def:</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 資料結構 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> 陣列 </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Stack and Queue 堆疊與佇列</title>
      <link href="/repository/2022/09/22/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Stack-and-Queue-%E5%A0%86%E7%96%8A%E8%88%87%E4%BD%87%E5%88%97/"/>
      <url>/repository/2022/09/22/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Stack-and-Queue-%E5%A0%86%E7%96%8A%E8%88%87%E4%BD%87%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1>6.3 Stack and Queue 堆疊與佇列</h1><h2>Stack 堆疊</h2><ul><li>Def:</li><li>Stack 基本操作: <strong>ADT(Abstract Data Type)只定義不實作</strong><ol><li>create(s):</li><li>push(i, s):</li><li>isEmpty(s):</li><li>isFull(s):</li><li>top(s):</li><li>pop(i, s):</li></ol></li><li>Ex1:</li><li>Ex2:</li><li>Ex3:</li><li>應用:</li></ul><h3>Stack 的應用</h3><ol><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ol><h3>Stack 之 ADT 的製作方式</h3><h4>以 array 製作 stack</h4><ul><li>資料結構:</li><li>implement:</li></ul><ol><li><p>create<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p></li><li><p>isEmpty<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">3. isFull</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. push</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. pop</span><br></pre></td></tr></table></figure></p></li></ol><pre><code>## Queue 佇列* Def: 為一組元素, 具下列特性 (有序串列):    1. FIFO 之特質    2. 插入(於 rear 尾端)跟刪除(於 front 前端)於不同端點### 提供的基本操作1. create(Q):  2. add(item, Q):  3. delete(item, Q):  4. isEmpty(Q):  5. isFull(Q):  * Ex:  ### Queue 的種類1. 一般的佇列:    * FIFO    * 前端刪除尾端加入  2. Priority queue (Heap)優先權佇列    * 提供:      1. 加入任意值元素      2. 刪除最大(Max-heap)或最小值(Min-heap)元素  3. double ended queue 雙邊佇列    指於 front 和 rear 端皆可做插入跟刪除  4. double ended priority queue 雙邊優先佇列    * 提供:      1. 插入任意元素      2. 刪除最大鍵值元素      3. 刪除最大鍵值元素  ### Queue 的應用1.  2.  3.  4.  ### Queue 之 ADT 製作方式* 資料結構:  * implement    1. create    2. isEmpty    3. isFull    4. add    5. delete  * Note: 上述做法有下列問題  * Ex:    * 思考:      * implement:        1. create:        2. add:        3. delete:    * 特質:      1.      2.      3.    * Note:    * 結論:  ### 中序, 前序, 中序1. **中序式 (infix)**    * Def:    * 適合    * 對  2. **後序式 (postfix)**    * 優點:  3. **前序式 (prefix)**    * 優點:  ### compare### 中序轉後序的方式: 1. 括號法  2. 將之用 binary tree 表示, 再以後序追蹤  3. 利用 stack algorithm  #### 括號法#### 反向考題#### 後序式計算 (同 stack algorithm)* Ex:  </code></pre>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 資料結構 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> 特殊矩陣 </tag>
            
            <tag> 陣列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Array</title>
      <link href="/repository/2022/09/18/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Array/"/>
      <url>/repository/2022/09/18/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Array/</url>
      
        <content type="html"><![CDATA[<h1>6.2 Array</h1><hr><h2>陣列 Array</h2><ul><li>Def: array 用來表示 orderlist 的一種資料結構, 又可稱為 dense list 或 sequential list</li><li>概念: 將 data 的第 i 格元素存到第 i 格子之中</li><li>圖:</li><li>特色: (選擇居多)<ol><li>佔用連續的 mem. space</li><li>array 中放置相同型態的元素, 沒有彈性</li><li>需事先宣告 array 大小, 沒有彈性</li><li>同時支援 random access (O(1)) 及 sequential access (O(n))</li></ol></li></ul><h2>陣列儲存位址計算</h2><ul><li>一維陣列<ol><li>宣告方式1: <code>A[1.....n]</code></li><li>宣告方式2: <code>A[l.....u]</code></li><li>Ex: array: <code>A(-3...9), l0 = 100, d = 4</code>, 問 <code>A[5]</code> 之 location</li></ol><ul><li>Sol: <code>l0 + (i - l) * d = 100 + ( 5-(-3)) * 4 = 132</code></li></ul></li><li>二維陣列<ol><li>宣告方式1: <code>A[1...m, 1...n]</code> -&gt; m列, n行</li></ol><ul><li>計算 <code>A[i, j]</code> 之 location<ol><li><strong>Row Major</strong>:</li></ol><ul><li>公式: <code>l0+[(i-l1)*(u2-l2+1)+(j-l2)]*d</code></li></ul><ol start="2"><li><strong>Column Major</strong>:</li></ol><ul><li>公式: <code>l0+[(j-l2)*(u1-l1+1)+(i-l1)]*d</code></li></ul></li></ul><ol start="2"><li>宣告方式2: <code>A[l1...u1, l2...u2]</code> -&gt; u1-l1+1列, u2-l2+1行</li><li>Ex:</li></ol></li><li>常見題型<ol><li>給定所有值, 求算 <code>A[i, j]</code> 之 location</li></ol><ul><li>Ex: <code>array: A[-3....8, -5....14], l0=100, d=2</code>, 問 <code>A[3, 8]</code> 之 location; 以 Row Major and Column Major<br>Sol:<ol><li>Row Major<br><code>= l0+[(i-l1)*(u2-l2+1)+(j-l2)]*d</code><br><code>= 100+[(3-(-3))*(14-(-5)+1)+(8-(-5))]*2</code><br><code>= 366</code></li><li>Column Major<br><code>= l0+[(j-l2)*(u1-l1+1)+(i-l1)]*d</code><br><code>= 100+[(8-(-5))*(8-(-3)+1)+(3-(-3))]*2</code><br><code>= 424</code></li></ol></li></ul><ol start="2"><li>給予2個已知量: <code>A[i1, j1], A[i2, j2]</code>, 求 <code>A[i, j]</code> 之 location</li></ol><ul><li>Note: 無法取得 <code>l0, d</code>, 而已知 <code>A[i1, j1] &lt; A[i2, j2]</code>, 則<ol><li>Row Major:<br><code>A[i2, j2] = A[i1, j1] + [(i2-i1)*n+(j2-j1)]*1</code></li><li>Column Major:<br><code>A[i2, j2] = A[i1, j1] + [(j2-j1)*m+(i2-i1)]*1</code></li></ol></li><li>Row Major 中可以推得 <strong>&quot;行&quot;</strong>, &quot;列&quot;不得而知</li><li>Column Major 中可以推得 <strong>&quot;列&quot;</strong>, &quot;行&quot;不得而知</li><li>Ex: <code>A[4, 2]</code> 之 address = 1978, <code>A[2, 3]</code> 之 address = 1986, 問 <code>A[3, 8]</code> 之 address = ?<br>Sol:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Step1: check Row Major or Column Major</span><br><span class="line">A[4, 2] &#x3D; 1978</span><br><span class="line">A[2, 3] &#x3D; 1986  &#x2F;&#x2F; Column Major</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Step2: </span><br><span class="line">&#x2F;&#x2F; 求 行 &#x3D;&gt; 當為 Row Major, 可求得行數 </span><br><span class="line">&#x2F;&#x2F; 求 列 &#x3D;&gt; 當為 Column Major, 可求得列數 </span><br><span class="line">A[2, 3] &#x3D; A[4, 2] + [(3-2) * m + (2-4)]*1</span><br><span class="line">1986 &#x3D; 1978+m-2</span><br><span class="line">m &#x3D; 10</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Step3: 求 A[i, j]</span><br><span class="line">A[3, 8] &#x3D; A[4, 2] + [(8-2)*10+(3-4)]*1</span><br><span class="line">        &#x3D; 1978+59</span><br><span class="line">        &#x3D; 2037</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>同題型2, 但無法判別 Row Major or Column Major</li></ol><ul><li>Ex: <code>A[3, 3]</code> 之 address = 121, <code>A[6, 4]</code> 之 address = 159, 問 <code>A[4, 9]</code> 之 address = ?<br>Sol:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Step1: check Row Major or Column Major</span><br><span class="line">A[3, 3] &#x3D; 121</span><br><span class="line">A[6, 4] &#x3D; 159  &#x2F;&#x2F; Row Major or Column Major 皆有可能</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Step2: </span><br><span class="line">&#x2F;&#x2F; 1. Row Major</span><br><span class="line">A[6, 4] &#x3D; A[2, 2] + [(6-3) * n + (4-3)]*1</span><br><span class="line">159 &#x3D; 121+3n+1</span><br><span class="line">n &#x3D; 37&#x2F;3 &#x3D; 12.33333 &#x2F;&#x2F;不符合</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 2. Column Major</span><br><span class="line">A[6, 4] &#x3D; A[2, 2] + [(4-3) * m + (6-3)]*1</span><br><span class="line">159 &#x3D; 121+m+3</span><br><span class="line">m &#x3D; 35 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Step3: 求 A[i, j], 以 Column Major</span><br><span class="line">A[4, 9] &#x3D; A[3, 3] + [(9-3)*35+(4-3)]*1</span><br><span class="line">        &#x3D; 121+211</span><br><span class="line">        &#x3D; 332</span><br></pre></td></tr></table></figure></li></ul></li><li>三維陣列<ul><li>宣告方式: <code>A(1...u1, 1...u2, 1...u3)</code></li><li>計算:<ol><li>Row Major <code>A[i, j, k] 之 location</code></li></ol><ul><li>公式: <code>l0+[(i-1)*u2*u3+(j-1)*u3+(k-1)]*d</code></li></ul><ol start="2"><li>Column Major <code>A[i, j, k] 之 location</code></li></ol><ul><li>公式: <code>l0+[(k-1)*u2*u1+(j-1)*u1+(i-1)]*d</code></li></ul></li></ul></li></ul><h2>多項式的資料結構</h2><ul><li>方法:<ol><li>依指數由高 -&gt; 低, 依序儲存其係數</li></ol><ul><li>Ex: 當多項式的最高係數為 n 時, 需準備 n+2 格<br>-&gt; 缺點: 若非0項極少時不適用, <code>f(x) = 2^1000 +9 =&gt; k=2</code> =&gt; 準備 <code>A[1...5]</code></li></ul><ol start="2"><li>只存放非零項次的係數與指數</li></ol><ul><li>作法: 若非0項有 &quot;k&quot; 個 -&gt; 準備 2k+1 個格子</li></ul><ol start="3"><li>利用 linked list 表示</li></ol></li></ul><h2>特殊矩陣</h2><h3>稀疏矩陣</h3><ul><li>指矩陣的非零項元素很少</li><li>Ex: 矩陣 A4x3</li><li>3-turple<ul><li>說明: 準備一二維陣列 <code>A(0...k, 1...3)</code>, 其中 k 代表非零項的數量</li><li>以上例而言, k = 3, 故準備 <code>A[0...3, 1...3]</code></li></ul></li></ul><h3>上三角, 下三角矩陣</h3><ul><li>說明:<ul><li>上三角: 即對角線以下的元素皆0, aij = 0, if i &gt; j</li><li>下三角: 即對角線以上的元素皆0, aij = 0, if i &lt; j</li></ul></li><li>特色: 一 n * n 的上或下三角矩陣其元素共有:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1+2+...+n &#x3D; n(n+1) &#x2F; 2</span><br><span class="line">&#x3D;&gt; 若採用 &quot;二維陣列&quot;, 則</span><br><span class="line">&#x3D;&gt; 浪費 space n^2-n(n+1)&#x2F;2</span><br><span class="line"></span><br><span class="line">Solution:</span><br><span class="line">利用一維陣列 B[1....n(n+1)&#x2F;2]</span><br><span class="line">來將上 下三角之資料一一對應</span><br></pre></td></tr></table></figure></li><li>上三角<ul><li>Row Major</li><li>Column Major</li></ul></li><li>下三角<ul><li>Row Major</li><li>Column Major</li></ul></li></ul><h3>對稱矩陣</h3><ul><li>定義: 一矩陣 An*n: 若 Aij = Aji謂之, 有效率地存放方式, 只存上 or 下三角即可</li><li>上三角: <code>aij : k = j(j-1)/2 +i</code></li><li>下三角: <code>k = i()i-1/2 + i</code></li><li>合併為單一公式: <code>max(i, j) * (max(i, j)-1)/2 + min(i, j)</code></li><li>Ex:</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 資料結構 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
            <tag> 特殊矩陣 </tag>
            
            <tag> 陣列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter6-資料結構-Algorithm&#39;s Time Complexity and Recursive Program</title>
      <link href="/repository/2022/06/20/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Algorithm-s-Time-Complexity-and-Recursive-Program/"/>
      <url>/repository/2022/06/20/Chapter6-%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B-Algorithm-s-Time-Complexity-and-Recursive-Program/</url>
      
        <content type="html"><![CDATA[<h1>6.1 Algorithm 的時間複雜度及遞迴程式</h1><hr><h2>algorithm 演算法</h2><ul><li>為指令之集合, 用以達到某一特定之任務</li><li>需滿足:<ol><li>input ≥ 0 個</li><li>output ≥ 1 個</li><li>definiteness 明確性: 指令皆是清楚且不模糊的</li><li>finiteness 有限性: 在有限的指令數之後會求得結果</li><li>effectiveness 有效性: 只可利用紙,筆即可追蹤</li></ol></li><li>Note:<br>Program vs Algorothm =&gt; 差別在於4, Program 可以有無窮迴圈</li></ul><h2>Time Complexity 時間複雜度</h2><ul><li><p>Def:</p><ul><li>用來衡量 algorithm 執行時間</li><li>利用時間函數: <code>T(n)</code> 表示 <strong>隨著資料量的成長, 所需的執行次數之變動</strong></li></ul></li><li><p>Ex1: 時間函數計算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i &#x3D; 1;</span><br><span class="line">while (i &lt;&#x3D; n)</span><br><span class="line">&#123;</span><br><span class="line">  x &#x3D; x+1;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 問 line 4 執行次數?</span><br><span class="line">&#x2F;&#x2F; Sol: T(n) &#x3D; n</span><br></pre></td></tr></table></figure></p></li><li><p>Ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for(i &#x3D; 1; i &lt;&#x3D; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">  for(j &#x3D; i+1; j &lt;&#x3D; n; j++)</span><br><span class="line">  &#123;</span><br><span class="line">    x &#x3D; x+1;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 問 line5 的執行次數?</span><br><span class="line">&#x2F;&#x2F; Sol: T(n) &#x3D; n(n-1) &#x2F; 2</span><br></pre></td></tr></table></figure></p></li></ul><table><thead><tr><th>i</th><th>1</th><th>2...</th><th>n</th></tr></thead><tbody><tr><td>j</td><td>2~n</td><td>3~n</td><td>n+1~n</td></tr><tr><td>x=x+1</td><td>n-1</td><td>n-2</td><td>0</td></tr></tbody></table><ul><li>思考:<br>2n+1<br>2n-1<br>n+2<br>n+100<br><code>n大到一定程度, +1 -1....不重要</code></li></ul><h2>漸進式表示法 asymptotic notation</h2><ul><li>於 Time Complexity 中, 常用漸進式來表示一 algo 的時間的成長漸進曲線, 以便快速了解 algo 之複雜程度</li><li>衡量方式:<ol><li>Big Oh: upper bound of <code>ƒ(n)</code></li><li>Omega: lower bound of <code>ƒ(n)</code></li><li>Theta: more precision than Big Oh and Omega</li></ol></li><li>概念:</li></ul><h3>Big Oh</h3><ul><li>Def: 若 <code>ƒ(n)</code> 為一時間函數, 則 <code>ƒ(n) = O(g(n))</code> , if and only if 存在兩正數 c 和 n0, 使得 <code>ƒ(n) ≤ c * g(n)</code> , for all n ≥ n0</li><li>Ex1: <code>ƒ(n) = 3n + 2</code>  =&gt; <strong>O(n)</strong> , 因為存在 2 正數, <code>c = 4, n0 = 2</code>, 此時, <code>3n+2 ≤ 4*n</code>, for all n ≥ 2</li></ul><blockquote><p>定理： <code>ƒ(n) = am*n^m + am-1*n^m-1 +...+ a1*n^1 + a0*n^0</code>, 其中 m 為最高指數項, 則 <code>ƒ(n) = O(n^m)</code></p></blockquote><ul><li><p>Ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ƒ(n) &#x3D; 3n^5 + 2n^3 + 1000 &#x3D;&gt; O(n^5)</span><br><span class="line">ƒ(n) &#x3D; 2^n + 1000 &#x3D;&gt; O(2^n)</span><br><span class="line">ƒ(n) &#x3D; 100 &#x3D;&gt; O(1) 常數</span><br></pre></td></tr></table></figure></p></li><li><p>Ex3: O(logn^2) vs O(n) 誰大?<br><code>= 2log n &lt; O(n)</code><br>2 常數不看</p></li></ul><ul><li><p>常見的 Big Oh: 由小 -&gt; 大排序O(1) &lt; O(log n) &lt; O(n) &lt; O(nlog n) &lt; O(n^2) &lt; O(n^3) &lt;...&lt; O(n^c) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)<br>越大越複雜</p></li><li><p>Proof: <code>ƒ(n) = am*n^m + ...+ a1*n^1 + a0*n^0 = O(n^m)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x3D; ∑ai*n^i ≤ ∑|ai|n^i</span><br><span class="line">          ≤ n^m * ∑|ai|n^i-m</span><br><span class="line">          ≤ n^m * ∑|ai|1</span><br><span class="line">          , for all n ≥ 1</span><br><span class="line">所以故為 O(n^m)</span><br></pre></td></tr></table></figure></p></li></ul><h3>Omega</h3><ul><li>Def: 若 ƒ(n) 為一時間函數, 則 <code>ƒ(n) = O(g(n))</code>, if and only if 存在兩正數 C 和 n0, 使得 <code>ƒ(n) ≥ c * g(n)</code>, for all n ≥ n0</li></ul><h2>常見的 Time complexity 求算</h2><ul><li><p>Ex1: <code>T(n) = T(n-1) + n</code> -&gt; 快速排序的 worst case<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T(n) &#x3D; T(n-1) + n</span><br><span class="line">     &#x3D; [T(n-2) + n-1] + n</span><br><span class="line">     &#x3D; [T(n-3) + n-2] + n-1 + n</span><br><span class="line">     &#x3D; [T(n-4) + n-3] + n-2 + n-1 + n</span><br><span class="line">     ....</span><br><span class="line">     &#x3D; T(n-n) +1+2+...+n</span><br><span class="line">     &#x3D; (n(n+1))&#x2F;2</span><br><span class="line">     &#x3D; (n^2+n)&#x2F;2</span><br><span class="line">     &#x3D;&gt; O(n^2)</span><br></pre></td></tr></table></figure></p></li><li><p>Ex2: <code>T(n) = 2T(n/2)+n</code>, 求 O(?) -&gt; 快速排序的 Best case<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">T(n) &#x3D; 2T(n&#x2F;2) + n</span><br><span class="line">     &#x3D; 2[2T(n&#x2F;4) + n&#x2F;2] + n</span><br><span class="line">     &#x3D; 4T(n&#x2F;4) + 2n</span><br><span class="line">     &#x3D; 4[2T(n&#x2F;8) + n&#x2F;4] + 2n</span><br><span class="line">     &#x3D; 8T(n&#x2F;8) + 3n</span><br><span class="line">     ....</span><br><span class="line">     &#x3D; nT(n&#x2F;n) + logn*n</span><br><span class="line">     &#x3D; n + nlogn</span><br><span class="line">     &#x3D;&gt; O(nlogn)</span><br></pre></td></tr></table></figure></p></li><li><p>Ex3: <code>T(n) = T(n/2) + 1</code>, 求 O(?)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T(n) &#x3D; T(n&#x2F;2) + 1 &#x2F;&#x2F; Binary Search</span><br><span class="line">     &#x3D; [T(n&#x2F;4) + 1] + 1</span><br><span class="line">     &#x3D; T(n&#x2F;4) + 2</span><br><span class="line">     &#x3D; [T(n&#x2F;8) + 1] + 2</span><br><span class="line">     &#x3D; T(n&#x2F;8) + 3</span><br><span class="line">     ...</span><br><span class="line">     &#x3D; T(n&#x2F;n) + log2 n</span><br><span class="line">     &#x3D;&gt; O(log n)</span><br></pre></td></tr></table></figure></p></li></ul><h2>Recursive 遞迴</h2><ul><li><p>Def: 指函式執行過程反覆呼叫自身函式 =&gt; <strong>self-calling</strong></p></li><li><p>種類:</p><ol><li><p><strong>直接 recursive</strong>: 在程式中直接呼叫自身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun()</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  fun() &#x2F;&#x2F; self-calling</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><strong>間接 recursive</strong>: 在程式中先呼叫其他函式, 再由他呼叫到原本的程式</p></li></ol><ul><li>Note: 不建議採用, 易發生後續維護上的不易性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">funA()</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  funB()</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funB()</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  funA()</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; calling cycle</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>尾端 recursive</strong>: 函式會在最後再次呼叫自身</li></ol><ul><li>建議改採用 &quot;iterative&quot;(non-recursive) 方式撰寫, 以提高效能 -&gt; 做 loop 快, 比做 context-switching 快, 節省時間和空間</li><li>Note:<ul><li>recursive 會採用到系統的「stack」 後進先出</li><li>recursive &amp; non-recursive 適用性, 沒有誰好誰壞<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun()</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  fun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3>Recursive vs Non-Recursive (iterative/loop)</h3><ul><li>Recursive<ul><li>優點:<ul><li>特性:<ul><li>程式精簡 -&gt; 程式較省 space</li><li>易理解</li><li>表達力更佳</li></ul></li><li>Space<ul><li>暫存變數需求少 (int, temp...)</li></ul></li></ul></li><li>缺點:<ul><li>Space<ul><li>執行時需耗用 &quot;stack&quot; 空間 -&gt; 需系統 stack 支援(會一直追加 Mem.)</li></ul></li><li>Time<ul><li>執行時間較久 -&gt; 效率較差(因為需做 function calling)</li></ul></li></ul></li></ul></li><li>Non-recursive<ul><li>優點:<ul><li>Space<ul><li>執行時不需耗用 &quot;stack&quot; 空間</li></ul></li><li>Time<ul><li>執行時間較快 -&gt; 效率較好</li></ul></li></ul></li><li>缺點:<ul><li>特性:<ul><li>程式冗長</li><li>不易理解</li><li>表達力較差</li></ul></li><li>Space<ul><li>暫存變數需求多</li></ul></li></ul></li></ul></li></ul><h3>常見的 Recursive</h3><h4>Example1: N!</h4><ul><li>提示:<ul><li>N! = 1, if N = 0</li><li>N! = N * (N-1)!. if N ≥ 1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int F(int N) </span><br><span class="line">&#123;</span><br><span class="line">  if (N &#x3D;&#x3D; 0)</span><br><span class="line">    return 1;</span><br><span class="line">  else</span><br><span class="line">    return N * F(N-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>呈上例: 問 <code>F(3)</code> = ? 又呼叫 <code>F()</code> 幾次?</li><li>Sol: <code>F(3) -&gt; 3*F(2) -&gt; 2*F(1) -&gt; 1 * F(0)</code>, <code>F(3) = 6</code>, 呼叫 <code>F()</code> 4次</li><li>iterative:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int sum(int n)</span><br><span class="line">int sum &#x3D; 1, i;</span><br><span class="line">&#123;</span><br><span class="line">  for (i&#x3D;1; i ≤ n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    sum &#x3D; sum * i;</span><br><span class="line">  &#125;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4>Example2: Sum(n) = 1+2+...+n 寫出其 Recursive algo.</h4><ul><li>提示:<ul><li>sum(n) = 0, if n = 0</li><li>sum(n-1) + n, if n = 1, otherwise<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int sum(n)</span><br><span class="line">&#123;</span><br><span class="line">  if (n &#x3D;&#x3D; 0)</span><br><span class="line">    return 0;</span><br><span class="line">  else</span><br><span class="line">    return sum(n-1) + n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; iterative</span><br><span class="line">int sum(int n)</span><br><span class="line">int sum &#x3D; 0, i;</span><br><span class="line">&#123;</span><br><span class="line">  for (i&#x3D;1; i ≤ n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    sum &#x3D; sum + i;</span><br><span class="line">  &#125;</span><br><span class="line">  return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4>Example3: 費氏數列 (Fibonacci Number)</h4><ul><li>提示:<ul><li>Fn = 0, if n = 0</li><li>Fn = 1, if n = 1</li><li>Fn = Fn-1 + Fn-2, otherwise<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int F(int n)</span><br><span class="line">&#123;</span><br><span class="line">  if (n &#x3D;&#x3D; 0)</span><br><span class="line">    return 0;</span><br><span class="line">  else if (n &#x3D;&#x3D; 1)</span><br><span class="line">    return 1;</span><br><span class="line">  else</span><br><span class="line">    return F(n-1) + F(n-2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><table><thead><tr><th>n</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>Fn</td><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td></tr></tbody></table><ul><li><p>呈上例, 問 <code>F(5)</code> = ? 又呼叫 <code>F()</code> 幾次?</p></li><li><p>Sol:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">F(5) &#x3D; F(4) + F(3)</span><br><span class="line">     &#x3D; F(3) + F(2) + F(2) + F(1)</span><br><span class="line">     &#x3D; F(2) + F(1) + F(1) + F(0) + F(1) + F(0)</span><br><span class="line">     &#x3D; F(1) + F(0) + F(1) + F(1) + F(0) + F(1) + F(0)</span><br><span class="line">&#x2F;&#x2F; F(5) &#x3D; 5, 含 F(5) 本身共呼叫 15 次</span><br></pre></td></tr></table></figure></p></li><li><p>Note: 變形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">if (n &#x3D;&#x3D; 0 || n &#x3D;&#x3D; 1)</span><br><span class="line"> return 1;</span><br><span class="line">else</span><br><span class="line">  return F(n-1) + F(n-2);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Non-recursive algo</span><br><span class="line">int F(int n)</span><br><span class="line">&#123;</span><br><span class="line">  if (n &#x3D;&#x3D; 0)</span><br><span class="line">    return 0;</span><br><span class="line">  else if (n &#x3D;&#x3D; 1)</span><br><span class="line">    return 1;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    int a &#x3D; 0, b &#x3D; 1, c, i;</span><br><span class="line">    for (i&#x3D;2; i ≤ n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">      c &#x3D; a + b;</span><br><span class="line">      a &#x3D; b;</span><br><span class="line">      b &#x3D; c;</span><br><span class="line">      &#x2F;&#x2F; O(n)</span><br><span class="line">    &#125;</span><br><span class="line">    return c;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><table><thead><tr><th>n</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>Fn</td><td>1</td><td>1</td><td>2</td><td>3</td><td>5</td><td>8</td><td>13</td><td>21</td><td>34</td><td>55</td><td>89</td></tr></tbody></table><ul><li>若 n 輸入 -3, 問結果?<ul><li>因為 recursive 會耗用 stack, 而 -3 無法收斂, 故 stack 會耗盡 -&gt; stack out of memory</li></ul></li></ul><h4>Example4: G.C.D (Greatest Common Divison) 最大公因數</h4><ul><li><p>提示:</p><ul><li>G.C.D(A, B) = B, if (A mod B) = 0</li><li>G.C.D(A, B) = GCD(B, A mod B), if (A mod B) 不等於 0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int GCD(int A, int B)</span><br><span class="line">&#123;</span><br><span class="line">  if (A % B &#x3D;&#x3D; 0)</span><br><span class="line">    return B;</span><br><span class="line">  else</span><br><span class="line">    return GCD(B, A % B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>呈上例, GCD(12, 9) = ?</p></li><li><p>Sol: GCD(12, 9) -&gt; GCD(9, 3) -&gt; 3</p></li><li><p>又 GCD(9, 12) = ?</p></li><li><p>Sol: GCD(9, 12) -&gt; GCD(12, 9) -&gt; GCD(9, 3) -&gt; 3</p></li><li><p>iterative<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int GCD (int A, int B)</span><br><span class="line">&#123;</span><br><span class="line">  while (A !&#x3D; 0 &amp;&amp; B !&#x3D; 0)</span><br><span class="line">  &#123;</span><br><span class="line">    if (A &gt; B)</span><br><span class="line">      A &#x3D; A % B; &#x2F;&#x2F; 把餘數給 A, 一直到有一數為 0</span><br><span class="line">    else</span><br><span class="line">      B &#x3D; B % A</span><br><span class="line">  &#125;</span><br><span class="line">  if (A &#x3D;&#x3D; 0)</span><br><span class="line">    return B;</span><br><span class="line">  else</span><br><span class="line">    return A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>Example5: Binomial coefficient 二項式係數</h4><ul><li><p>說明:<br><img src="Binomial1.png" alt=""></p></li><li><p>提示:<br><img src="Binomial2.png" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int B(int n, int m)</span><br><span class="line">&#123;</span><br><span class="line">  if (m &#x3D;&#x3D; 0 || n &#x3D;&#x3D; m)</span><br><span class="line">    return 1;</span><br><span class="line">  else</span><br><span class="line">    return B(n-1, m) + B(n-1, m-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Ex1:<br><img src="Binomial3.png" alt=""></p></li><li><p>Sol:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">B(5, 2) &#x3D; B(4, 2) + B(4, 1)</span><br><span class="line">        &#x3D; B(3, 2) + B(3, 1) + B(3, 1) + B(3, 0)</span><br><span class="line">        &#x3D; B(2, 2) + B(2, 1) + B(2, 1) + B(2, 0) + B(2, 1) + B(2, 0)</span><br><span class="line">        &#x3D; B(1, 1) + B(1, 0) + B(1, 1) + B(1, 0) + B(1, 1) + B(1, 0)</span><br><span class="line">&#x2F;&#x2F; B(5, 2) &#x3D; 10</span><br><span class="line">&#x2F;&#x2F; 含 B(5, 2) 本身就呼叫 19 次</span><br></pre></td></tr></table></figure></p></li><li><p>思考: 請用更有效率的方法 iterative<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">int B(int n, int m)</span><br><span class="line">&#123;</span><br><span class="line">  int a &#x3D; 1, b &#x3D; 1, c &#x3D; 1;</span><br><span class="line">  for (int i &#x3D; 1; i ≤ n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    a &#x3D; a * i; &#x2F;&#x2F;n!</span><br><span class="line">  &#125;</span><br><span class="line">  for (int i &#x3D; 1; i ≤ m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    b &#x3D; b * i; &#x2F;&#x2F; m!</span><br><span class="line">  &#125;</span><br><span class="line">  for (int i &#x3D; 1; i ≤ n-m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    c &#x3D; c * i; &#x2F;&#x2F; (n-m)!</span><br><span class="line">  &#125;</span><br><span class="line">  return a&#x2F;(b*c);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 易有 overflow</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Solution:</span><br><span class="line">&#x2F;&#x2F; k &#x3D; max(n-m, m)</span><br><span class="line">for (int i &#x3D; n; i &gt; k; i--)</span><br><span class="line">&#123;</span><br><span class="line">  a &#x3D; a * i;</span><br><span class="line">&#125;</span><br><span class="line">for (int i &#x3D; 1; i ≤ n-k; i++)</span><br><span class="line">&#123;</span><br><span class="line">  b &#x3D; b * i;</span><br><span class="line">&#125;</span><br><span class="line">return a &#x2F; b;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 將後面剔除可減少, 但不知哪個數值較大, 因此需要找出較大值, 將其除掉</span><br></pre></td></tr></table></figure></p></li></ul><h4>Example6: Ackerman's</h4><ul><li><p>背: <code>A(1, 2) = 4, A(2, 1) = 5, A(2, 2) = 7</code></p></li><li><p>提示:</p><ul><li><code>A(m, n) = n+1, if m = 0</code></li><li><code>A(m-1, 1), if n = 0</code></li><li><code>A(m-1, A(m, n-1)), otherwise</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int A(int m, int n)</span><br><span class="line">&#123;</span><br><span class="line">  if (m &#x3D;&#x3D; 0)</span><br><span class="line">    return n+1;</span><br><span class="line">  else if</span><br><span class="line">    return A(m-1, 1);</span><br><span class="line">  else</span><br><span class="line">    return A(m-1, A(m, n-1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>呈上例: <code>A(2, 2)</code> = ?, 又 <code>A()</code> 呼叫幾次?</p></li><li><p>Sol: 7, 呼叫27次</p></li></ul><h4>Example7: Tower of Hanoi (河內塔)</h4><ul><li><p>說明: 3 pegs(柱子) problem</p></li><li><p>Recursive algorithm<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void Hanoi (n:disc, A, B, C:pegs)</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; A 來源, B 中繼, C 目的</span><br><span class="line">  if (n &#x3D;&#x3D; 1)</span><br><span class="line">    move disc from A to C;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    Hanoi(n-1, A, C, B); &#x2F;&#x2F; 1</span><br><span class="line">    move the disc n from A to C; &#x2F;&#x2F; 2</span><br><span class="line">    Hanoi(n-1, B, A, C); &#x2F;&#x2F; 3</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Ex1: 試列出 n = 3 的移動順序</p></li><li><p>Sol:</p><ol><li>move 1 from A to C</li><li>move 2 from A to B</li><li>move 1 from C to B</li><li>move 3 from A to C</li><li>move 1 from B to A</li><li>move 2 from B to C</li><li>move 1 from A to C</li></ol></li><li><p>Ex2: 令<code>T(n)</code>為搬動 n 個 disc, 所需的次數, 則 <code>T(n) = T(n-1) + 1 + T(n-1)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">T(n) &#x3D; T(n-1) + 1 + T(n-1)</span><br><span class="line">     &#x3D; 2T(n-1) + 1</span><br><span class="line">     &#x3D; 2[2T(n-2) + 1] + 1</span><br><span class="line">     &#x3D; 4T(n-2) + 3</span><br><span class="line">     &#x3D; 4[2T(n-3) + 1] + 3</span><br><span class="line">     &#x3D; 8T(n-3) + 7</span><br><span class="line">     ...</span><br><span class="line">     &#x3D; 2^n * T(n-n) + 2^n - 1</span><br><span class="line">     &#x3D; 2^n - 1</span><br><span class="line">&#x2F;&#x2F; 時間複雜度為 O(2^n)</span><br></pre></td></tr></table></figure></p></li></ul><h4>Example8: Permutation (排列組合)</h4><ul><li><p>概念:</p><ul><li>n個 data 會有 n! 種組合</li><li>Ex: data a, b, c 之 permutation, 若有 3 筆data =&gt; 3! = 3 * 2 * 1 = 6</li><li>abc, acb, bac, bca, cab, cba</li></ul></li><li><p>思考: <code>Perm(a, b, c)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a + perm(b, c)</span><br><span class="line">b + perm(a, c)</span><br><span class="line">c + perm(b, a)</span><br></pre></td></tr></table></figure></p></li><li><p>Recursive (in C)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">void perm (char list[], int i , int n)</span><br><span class="line">&#123;</span><br><span class="line">  if (i &#x3D;&#x3D; n)</span><br><span class="line">  &#123;</span><br><span class="line">    for (int j &#x3D; 1; j ≤ n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      printf(&quot;%c&quot;, list[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  else</span><br><span class="line">  &#123;</span><br><span class="line">    for (int j &#x3D; i; j ≤ n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">      swap(list[i], list[j]);</span><br><span class="line">      perm(list, i+1, n);</span><br><span class="line">      swap(list[i], list[j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 資料結構 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> 漸進式表示法 </tag>
            
            <tag> 時間複雜度 </tag>
            
            <tag> 遞迴 </tag>
            
            <tag> 費氏數列 </tag>
            
            <tag> Ackermans </tag>
            
            <tag> 河內塔 </tag>
            
            <tag> 排列組合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter5-程式介紹-JAVA</title>
      <link href="/repository/2022/06/20/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-JAVA/"/>
      <url>/repository/2022/06/20/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-JAVA/</url>
      
        <content type="html"><![CDATA[<h1>5.5 JAVA</h1><hr><h2>Java VS C++</h2><table><thead><tr><th>Java</th><th>C++</th></tr></thead><tbody><tr><td>Pure O.O language, 因為主程式都在 class 中</td><td>較不 pure</td></tr><tr><td>No pointer</td><td>有 pointer</td></tr><tr><td>Single Inheritance</td><td>Multiple Inheritance</td></tr><tr><td><strong>利用 garbage collection</strong>, 不需有destructor</td><td><strong>沒有 garbage collection</strong>, 需有destructor</td></tr><tr><td>interpret language, speed 較慢</td><td>compile language, speed 較快</td></tr><tr><td>Cross platform</td><td>沒有跨平台</td></tr><tr><td>安全性佳, 因為JVM (有類別驗證器)</td><td>安全性較差</td></tr><tr><td>support open source 較多</td><td>較少</td></tr></tbody></table><blockquote><p>Garbage Collection(垃圾回收): 指不要的 Mem. 會由系統來進行自動回收的機制 =&gt; 回收 programmer 不需介入, 所以不須 destructorNote: java 中的 thread 的環境有較妥善的機制和方便 api 供 user 使用</p></blockquote><h2>Class 格式</h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class class_name</span><br><span class="line">&#123;</span><br><span class="line">  constructor -&gt; object initial</span><br><span class="line">  att -&gt; 變數宣告</span><br><span class="line">  method -&gt; function define</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><ul><li>Ex:</li></ul><h2>Constructor (建構子)</h2><ul><li>和 C++ 概念相似</li><li>O.O 中所有物件皆需 <strong>&quot;初始化&quot;</strong> =&gt; 一定要呼叫 constructor</li><li>當 class 無 constructor, 系統會補上 <strong>預設建構子</strong><ul><li>Default constructor:<ol><li>權限同 class</li><li>Parameter list 為空</li><li>Constructor code 為空</li></ol></li></ul></li></ul><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class A </span><br><span class="line">&#123;</span><br><span class="line">  public A () &#123;&#125; &#x2F;&#x2F; 自動補上 default constructor</span><br><span class="line">  &#x2F;&#x2F; public 1</span><br><span class="line">  &#x2F;&#x2F; () 2</span><br><span class="line">  &#x2F;&#x2F; &#123;&#125; 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2>主程式</h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Test</span><br><span class="line">&#123;</span><br><span class="line">  public static void main(string [] args)</span><br><span class="line">  &#123;</span><br><span class="line">    ...  &#x2F;&#x2F;進入點</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class A</span><br><span class="line">&#123;</span><br><span class="line">  public static void main() &#x2F;&#x2F; ()非主程式</span><br><span class="line">  &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1. compile error</span><br><span class="line">2. runtime error</span><br><span class="line">3. No error</span><br><span class="line">Ans: 2</span><br><span class="line">出現 &quot;main method not found&quot;</span><br></pre></td></tr></table></figure></p><h2>配置物件 Mem.space =&gt; &quot;new&quot;</h2><ul><li>格式： <code>class object = new class 建構子 (...欲傳入的參數);</code></li><li>Ex:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Person p &#x3D; new Person();</span><br><span class="line">&#x2F;&#x2F; new 正式做 Memory allocation</span><br><span class="line">&#x2F;&#x2F; Person() 呼叫 class Person 不帶參數的 constructor</span><br><span class="line"></span><br><span class="line">Person p;</span><br><span class="line">p.height &#x3D; 180;</span><br><span class="line">&#x2F;&#x2F; in C ,Yes</span><br><span class="line">&#x2F;&#x2F; in Java , 尚未配置 Mem space</span><br></pre></td></tr></table></figure></li><li>Note: 物件操作方式同 C++, <code>object.att</code> or <code>object.op</code></li></ul><h2>Inheritance 繼承</h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class A </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>downcasting 向下轉型</th><th>upcasting 向上轉型</th></tr></thead><tbody><tr><td>將父類別物件視為子類別型態</td><td>相反</td></tr><tr><td>有 risk, compiler 擋掉</td><td>沒有 risk</td></tr></tbody></table><ul><li>圖：</li><li>EX:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p &#x3D; new Superman(); &#x2F;&#x2F; superman upcasting</span><br><span class="line">Superman s &#x3D; new Person(); &#x2F;&#x2F; person downcasting</span><br><span class="line">Superman s &#x3D; new Xman(); &#x2F;&#x2F; X</span><br></pre></td></tr></table></figure></li></ul><h2>Overriding</h2><ul><li><p>子類別把父類別的函式重新定義<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">  public void iam()</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(&quot;I am a Person&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Superman extends Person</span><br><span class="line">&#123;</span><br><span class="line">  public void iam()</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(&quot;I am a Superman&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>注意：</p><ol><li><strong>method signature 方法簽章</strong> 要一樣</li></ol><ul><li>return type + method name + (parameter list)</li><li>Ex:<ul><li>superclass: double getValue()... <code>// compile error 多型會錯</code></li><li>subclass: string getValue()...</li></ul></li><li>Ex2:<ul><li>superclass: void print(int i)... <code>沒有 overriding 為 overloading, compile OK</code></li><li>subclass void print()...</li></ul></li></ul><ol start="2"><li>Subclass 的存取權限要 <strong>≥</strong> superclass 的存取權限, 為避免多型有誤</li></ol><ul><li>Note: <code>public &gt; protected &gt; private</code></li></ul></li></ul><h2>this, super</h2><ul><li>概念同 C++, 但 <strong>Java 中 this, super 非 pointer</strong>, 其用法同一般物件, <code>this/super.att/method</code></li><li>圖：</li><li>Ex:</li></ul><h2>Constructor 的進一步介紹 (constructor 的延伸)</h2><ul><li><p>constructor 不會被繼承</p></li><li><p>在 inheritance之下, subclass 的 constructor 第一行需呼叫 &quot;super(...)&quot; (若無, 系統會自動加上&quot;super()&quot; 呼叫 parent, 不帶任何參數的 constructor) =&gt; 呼叫父類別的建構子產生 parent object</p></li><li><p>處理的順序(初始化時)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">  public A() &#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A</span><br><span class="line">&#123;</span><br><span class="line">  public B() &#123;</span><br><span class="line">    super();</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>常見陷阱題：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class A</span><br><span class="line">&#123;</span><br><span class="line">  public A(int a)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class B extends A</span><br><span class="line">&#123;</span><br><span class="line">  public B() &#x2F;&#x2F; default constructor</span><br><span class="line">  &#123;</span><br><span class="line">    super(); &#x2F;&#x2F; 系統補上的, 找不到不帶參數的建構子</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Result: compile error</span><br></pre></td></tr></table></figure></p></li><li><p>Summary:</p><ol><li>No constructor =&gt; 補上 default constructor</li><li>若為 subclass 之 constructor 第一行無 &quot;super(...)&quot;, 自動補上 &quot;super(...)&quot; (不帶任何參數的)</li></ol></li><li><p>Ex:</p></li></ul><h2>Java 的例外處理 (Exception Handler)</h2><ul><li>於 Java 中採用 try...catch...finally 來做例外處理</li><li>格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  &#x2F;&#x2F; 嘗試執行的動作</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">  &#x2F;&#x2F; 做例外捕捉後的 exception</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  &#x2F;&#x2F; 最後需執行的動作</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>說明：<ol><li>try 一定存在, catch 跟 finally 至少需有1個</li><li>try 若遇到 Exception, 則之後的 statement 不做, 拋出 Exception object</li><li>catch 會捕捉 Exception, 並加以處理</li><li>try or catch 結束後, 會執行 finally block</li><li>若只有 try, finally , 當發生 exception 時, 會：</li><li>先執行 finally block</li><li>再將 Exception 往外拋</li></ol></li></ul><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  ...</span><br><span class="line">  exception occurs; &#x2F;&#x2F; 1</span><br><span class="line">  System.out.println(&quot;1&quot;);</span><br><span class="line">&#125; catch (Exception e) &#123; &#x2F;&#x2F; 2 </span><br><span class="line">  System.out.println(&quot;2&quot;);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  System.out.println(&quot;3&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Q1: output &#x3D; ? 2, 3</span><br><span class="line">&#x2F;&#x2F; Q2: 拿掉 1, output &#x3D; ? 1, 3</span><br><span class="line">&#x2F;&#x2F; Q3: 拿掉 2, output &#x3D; ? 3, runtime exception</span><br></pre></td></tr></table></figure></p><h2>array 初始化</h2><ul><li>in O.O 所有物件皆需 <strong>初始化</strong> (呼叫建構子)</li><li>in Java array 即為物件, 所以需初始化</li><li>不同型別的初始值<ul><li>基本型別: boolean, char, byte, int, long, short, float, double</li><li>物件型別: &quot;null&quot;</li></ul></li></ul><h2>Java 中的 array 宣告</h2><ul><li>type 陣列 name[] = new type [size];</li><li>ex: int a[] = new int[3];</li><li>ex1: double d() = new double[3];</li><li>主程式:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s[] &#x3D; new String[3];</span><br><span class="line">s[s.length - 1] &#x3D; &quot;hello&quot;;</span><br><span class="line">System.out.println(&quot;s[1]&quot;);</span><br></pre></td></tr></table></figure></li><li>Note: 若為 &quot;基本型別&quot;, 且為 &quot;區域變數&quot;, 則：系統不會幫忙初始化, 需自行設預設值, <strong>若無則處理時會有compile error</strong></li><li>Ex:</li></ul><h2>static keyword</h2><blockquote><p>類別 -&gt; 靜態, 物件 -&gt; 動態</p></blockquote><ul><li><p>說明: static 修飾詞可用於 attribute, method 宣告中, 代表此 attribute, method 為 class 所有, 非 object 的</p></li><li><p>Note: data member 可分為:</p><ul><li>attribute:<ul><li>class variable (static)</li><li>instance variable (non-static)</li></ul></li><li>method<ul><li>class method (static)</li><li>instance method (non-static)</li></ul></li></ul></li><li><p>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">  public static int x;</span><br><span class="line">  public int y;</span><br><span class="line">&#125;</span><br><span class="line">A a1 &#x3D; new A();</span><br><span class="line">A a2 &#x3D; new A();</span><br></pre></td></tr></table></figure></p></li><li><p>成大: 一公司有員工的類別, 有下列屬性, 何者適合宣告為 static:</p><ol><li>姓名</li><li>手機</li><li>住址</li><li>配偶</li><li>CEO V</li></ol></li></ul><h2>static 注意事項</h2><ol><li>static method 只能存取 static 的 attribute 及 method, 無法用 Non-static 之 attribute 及 method</li></ol><ul><li><p>Ex1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 先有類別, 才有物件</span><br><span class="line">class A </span><br><span class="line">&#123;</span><br><span class="line">  public static int x;</span><br><span class="line">  public int y; &#x2F;&#x2F; non-static</span><br><span class="line">  public static void count()</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(x+y); &#x2F;&#x2F; y compile error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class A </span><br><span class="line">&#123;</span><br><span class="line">  public void get X()</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  public static void get()</span><br><span class="line">  &#123;</span><br><span class="line">    get x(); &#x2F;&#x2F; compile error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><ol start="2"><li>static method 不可被 override (因為 static method 為靜態的, 故無法達多型(Dynamic Binding))之效)</li></ol><h2>final keyword</h2><p>可用來修飾:</p><ol><li>class: 代表此 class 不可再被<strong>繼承</strong></li></ol><ul><li>ex:<ul><li>父: <code>final class A {}</code></li><li>子: <code>calss B extends A{}</code> compile error</li></ul></li></ul><ol start="2"><li>method: 此 method 不可<strong>被 override</strong></li></ol><ul><li>ex:<ul><li>superclass: <code>public final void print() {}</code></li><li>subclass: <code>public void print(){}</code> compile error, 因為 final 不能被 override</li></ul></li></ul><ol start="3"><li>attribute: 代表此attribute 的值為 <strong>常數</strong></li></ol><ul><li>ex:<ul><li><code>public final int x = 10;.....x = 50;</code> compile error, 因為常數不能被更改</li></ul></li></ul><h2>polymorphism in Java</h2><ul><li><p>Java 的多型不需有 &quot;virtual&quot; 的 keyword, 因為在 java 中所有的 method 皆具 virtual function 功能, 不需額外宣告, 亦即 method 皆可達 Dynamic Binding 之效</p></li><li><p>說明:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Animal</span><br><span class="line">&#123;</span><br><span class="line">  public void walk()</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(&quot;An.walk&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person extends Animal</span><br><span class="line">&#123;</span><br><span class="line">  public void walk()</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(&quot;Person walk&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Dog extends Animal</span><br><span class="line">&#123;</span><br><span class="line">  public void walk()</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(&quot;Dog walk&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">Polymorphism:</span><br><span class="line">inheritance</span><br><span class="line">+</span><br><span class="line">overriding</span><br><span class="line">+</span><br><span class="line">upcasting</span><br><span class="line">把子類別的物件, 向上看成父類別的型態</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure></p></li><li><p>Note:</p><ul><li>在 C++, 中做多型要有 virtual</li><li>在 java 中的 method 所有都是 virtual, 除了 static 的</li></ul></li><li><p>應用:</p></li></ul><h2>Abstract method</h2><ul><li>Def: 當 method 沒有 implement 謂之 abstract method</li><li>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public abstract void walk()</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; implement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2>Abstract class</h2><ul><li><p>Def:</p><ol><li>當 class 中具 ≥ 1 個 abstract method, 即需定義為 abstract class</li><li>abstract class 不能產生出實體(即無法 &quot;new&quot; 出 instance)</li><li>繼承 abstract class, 並將其 abstract method override 掉的謂之 concrete class</li></ol></li><li><p>Ex1:</p></li><li><p>Ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animal a &#x3D; new Animal(); &#x2F;&#x2F; X 抽象類別不能 new</span><br><span class="line">Person p &#x3D; new Person(); &#x2F;&#x2F; O</span><br><span class="line">Animal a &#x3D; new Person(); &#x2F;&#x2F; O 實際上產生具象, Person 做 upcasting -&gt; 準備做多型</span><br></pre></td></tr></table></figure></p></li><li><p>Ex3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">abstract class Animal</span><br><span class="line">&#123;</span><br><span class="line">  public abstract void walk();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; compile error</span><br><span class="line">class Person extends Animal &#x2F;&#x2F; Solution1: 前方加上 abstract </span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; solution 2</span><br><span class="line">  public void walk() </span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(&quot;Person walk&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Note: 1, 2 擇一, 皆無時, 會有 compile error</p></li><li><p>用 1 不用 2 時, 代表 Person 為 abstract, 代表此層不會是最後一層</p></li><li><p>Sol: 既然不知道它該怎麼寫幹嘛定義? (第一個 abstract)</p></li><li><p>ANS: 拿掉就好, 但它如果定義出來, 他會具備規範的效果, 若定義走路是抽象, 若以後繼承我, 一定要把走路做完, 否則 compile 會提醒, 程式少漏洞</p></li></ul><h2>interface</h2><ul><li>通常是規格規範的動作 (根本不會產生物件, 所以也陪有 non-static 的問題)</li><li>格式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface name</span><br><span class="line">&#123;</span><br><span class="line">  public static final attribute_name;</span><br><span class="line"></span><br><span class="line">  public abstract method signature;</span><br><span class="line">  &#x2F;&#x2F; public static or public abstract 可省略, 但系統會自動加上</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>方法全部都是抽象的, 就代表根本沒辦法實體化, 沒辦法產生物件, 幹嘛產生建構子, 建構子是用來做初始化的動作, 不會產生物件, 所以就不用有建構子了</p></blockquote><h3>Why interface?</h3><ul><li>利用 interface 讓 Java 模擬出 Multiple Inheritance</li><li>圖：</li></ul><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Person </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Flyer</span><br><span class="line">&#123;</span><br><span class="line">  public static void fly(); &#x2F;&#x2F; 若只寫這樣也會過, 括號內連寫都沒寫, implement 是把它補起來, override 是重新定義</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Superman extends Person implements Flyer &#x2F;&#x2F; 介面可以實作很多個</span><br><span class="line">&#123;</span><br><span class="line">  public void fly()</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(&quot;flying&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>抽象類別只要有一個是抽象就是, 介面就是全部</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 程式介紹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建構子 </tag>
            
            <tag> Overriding </tag>
            
            <tag> Java </tag>
            
            <tag> 繼承 </tag>
            
            <tag> Exception </tag>
            
            <tag> Static </tag>
            
            <tag> 多型 </tag>
            
            <tag> Final </tag>
            
            <tag> Abstract </tag>
            
            <tag> Interface </tag>
            
            <tag> this </tag>
            
            <tag> super </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter5-程式介紹-C++程式語言介紹</title>
      <link href="/repository/2022/06/20/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-C-%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%BB%8B%E7%B4%B9/"/>
      <url>/repository/2022/06/20/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-C-%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h1>5.4 C++ 程式語言介紹</h1><hr><h2>C++ Language</h2><p>Class:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式: class class_name</span><br><span class="line">&#123;</span><br><span class="line">    Constructor &#x2F;&#x2F; 建構子</span><br><span class="line">    Destructor &#x2F;&#x2F; 解構子</span><br><span class="line">    Attribute &#x2F;&#x2F; 變數宣告</span><br><span class="line">    Operation &#x2F;&#x2F; 函式定義</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2>Object 宣告, 操作</h2><p><code>class _ object;</code><br>操作：<br>object.att.<br>object.op.</p><ul><li>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    Person P;</span><br><span class="line">    p.height &#x3D; 180;</span><br><span class="line">    p.weight &#x3D; 80;</span><br><span class="line">    p.walk(); &#x2F;&#x2F; 印出 &quot;Person walk&quot;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2>建構子 (Construtor)</h2><ul><li>Def:<ul><li>對 object 做 <strong>初始化</strong> 的動作</li><li>於 object 產生時呼叫</li><li>Constructor name 和 <strong>class name 相同, 且 No return type</strong></li><li>Constructor 可有很多個</li></ul></li><li>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    public:</span><br><span class="line">    &#x2F;&#x2F;建構子</span><br><span class="line">    A() &#123;</span><br><span class="line">        cout &lt;&lt;&quot;con.A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;解構子</span><br><span class="line">    ~A() &#123;</span><br><span class="line">        cout &lt;&lt;&quot;del.A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2>解構子 (Destructor)</h2><ul><li>Def:<ul><li>於 constructor 之前加上 <strong>&quot;~&quot;</strong></li><li>Destructor <strong>不接收參數</strong> parameter list 為空</li><li>class 中 destructor <strong>只會有一個</strong></li><li>於 object 被回收時呼叫<br><img src="%E8%A7%A3%E6%A7%8B%E5%AD%90.png" alt=""></li></ul></li><li>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Class A &#123;</span><br><span class="line">    public: </span><br><span class="line">    A() &#123;</span><br><span class="line">        cout &lt;&lt;&quot;con.A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    ~A() &#123;</span><br><span class="line">        cout &lt;&lt;&quot;del.A&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    A a1; a1 屬於 A</span><br><span class="line">    A a2;</span><br><span class="line">    return 0;</span><br><span class="line">&#125; &#x2F;&#x2F; 結束前呼叫解構子 output?</span><br></pre></td></tr></table></figure></li></ul><h2>變數種類</h2><p>格式：<code>static _ type _ variable;</code><br><code>static int x;</code></p><ul><li><p>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    fun();</span><br><span class="line">    fun();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void fun() &#123;</span><br><span class="line">    static int i &#x3D; 20;</span><br><span class="line">    i++;</span><br><span class="line">    cout &lt;&lt;i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Note:</p><ul><li>靜態變數存於靜態區塊中, <strong>&quot;不會隨著所屬 block 結束而回收&quot;</strong>, 於程式結束回收</li><li>靜態變數之宣告只於第一次執行, 之後忽略之</li></ul></li><li><p>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    public:</span><br><span class="line">    int oid; &#x2F;&#x2F; att</span><br><span class="line">    &#x2F;&#x2F; 建構子</span><br><span class="line">    A(int i) &#123;</span><br><span class="line">        oid &#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;解構子</span><br><span class="line">    ~A() &#123;</span><br><span class="line">        cout &lt;&lt;oid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    int main() &#123;</span><br><span class="line">        A a1(1); &#x2F;&#x2F; 給建構子的參數</span><br><span class="line">        fun();</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    void fun() &#123;</span><br><span class="line">        A a2(2);</span><br><span class="line">        static A a3(3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></li></ul><p>問 output is?<br><img src="%E8%AE%8A%E6%95%B8%E7%A8%AE%E9%A1%9EEX1.png" alt=""></p><h2>C++ 參考變數 Reference Variable</h2><p>格式：<br><code>type **&amp;**var = **被參考變數** (不可省略)</code><br><code>int &amp;count = x;</code> -&gt; 替 x 取別名叫 count</p><blockquote><p>注意事項：</p><ol><li>int count; (X) 替某人取綽號叫 count, 但某人不存在</li><li>int &amp;count = 3; (X) 常數(No mem space)</li></ol></blockquote><h3>宣告時</h3><p><code>int x;</code> <strong>=&gt; call by value</strong> (一般)<br><code>int *x;</code> <strong>=&gt; call by address</strong> (指標)<br><code>int &amp;x;</code> <strong>=&gt; call by reference</strong> (參數)</p><h3>操作時</h3><p><code>x</code><strong>=&gt; 取內容</strong><br><code>*x</code><strong>=&gt; 取指標指向的值</strong><br><code>&amp;x</code><strong>=&gt; 取所在 address</strong></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line">    int a &#x3D; 10, b &#x3D; 20;</span><br><span class="line">    swap(a, b);</span><br><span class="line">    cout &lt;&lt;a&lt;&lt;b;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void swap(int x, int y) &#123;</span><br><span class="line">    int &amp;x &#x3D; a;</span><br><span class="line">    int temp;</span><br><span class="line">    temp &#x3D; x;</span><br><span class="line">    x &#x3D; y;</span><br><span class="line">    y &#x3D; temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Q:<br>1. a, b 呼叫 swap 後為何 No change? (call - by value)<br>2. How to modifiy?</p><h2>C++ 的 Inheritance</h2><p><img src="%E7%B9%BC%E6%89%BF.png" alt=""></p><ul><li>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class A &#123;</span><br><span class="line">    public: &#x2F;&#x2F; 若改為 private, 此時 B會有 compile error</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;;</span><br><span class="line">class B: Public A &#123; &#x2F;&#x2F;: 繼承</span><br><span class="line">    public:</span><br><span class="line">    B (inta, int b) &#123;</span><br><span class="line">        x &#x3D; a;</span><br><span class="line">        y &#x3D; b;</span><br><span class="line">    &#125;</span><br><span class="line">    void print() &#123;</span><br><span class="line">        cout &lt;&lt;x&lt;&lt;y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">int main() &#123;</span><br><span class="line">    B objB(2, 5);</span><br><span class="line">    objB.print();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>補充：繼承的存取權限<img src="%E8%A3%9C%E5%85%85%E7%B9%BC%E6%89%BF.png" alt=""></p></blockquote><h2>Overriding 覆載</h2><ul><li>子類別將父類別的<strong>函式重新定義</strong>以符合自身所需<br><img src="%E8%A6%86%E8%BC%89.png" alt=""></li></ul><h2>Overloading 多載</h2><p>分為：</p><ol><li>function overloading<ol><li>藉由接收多數串列的<strong>數量</strong>或<strong>型別不同</strong>以達到共用相同的函式名稱<ul><li><p>Ex1:</p><ul><li>對 user 而言較方便, 不需記過多的 function name</li><li>對 programmer 而言命名 function 亦可簡化其原則<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(2); -&gt; void print(int i)</span><br><span class="line">print(3.5); -&gt; void print(double d)</span><br><span class="line">print(&quot;abc&quot;); -&gt; void print(char *s)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    public:</span><br><span class="line">    Person() &#123;...&#125;            &#x2F;&#x2F; 建構子</span><br><span class="line">    Person(int h) &#123;...&#125;       &#x2F;&#x2F; 建構子</span><br><span class="line">    Person(inth, int w) &#123;...&#125; &#x2F;&#x2F; 建構子  Overloading</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul></li></ol></li></ol><ol start="2"><li>operator overloading<ul><li>Def: 藉由接收的運算元型別不同, 以達<strong>共用相同的運算子(operator)符號</strong></li><li>概念：<ul><li>3 + 5 =&gt; int + int</li><li>2.3 + 5.5 =&gt; double + double</li><li>matrix + matrix</li></ul></li></ul></li></ol><h2>this vs super</h2><ul><li>為 C++ 內建提供的物件指標</li><li>其中：<ul><li>this 會指向物件本身</li><li>super 會指向物件的 parent class</li></ul></li><li>說明：<br><img src="this&amp;super.png" alt=""></li></ul><h2>物件指標</h2><ol><li>物件指標指向 attribute or operator<br>ex: this -&gt; i;</li><li>(*物件指標).attribute or operator<br>ex: (*this).i;</li></ol><ul><li>Ex: this.i ... 錯誤 (成大)<br>因為 <strong>&quot;.&quot;</strong> priority &gt; <em><em>&quot;</em>&quot;</em>*<br>所以 括號不能拿掉<br><code>(*(&amp;(*this))).i; = (*this).i</code><ul><li>為從 address 拿回值<br>&amp; 為拿出 address</li></ul></li></ul><p><img src="%E7%89%A9%E4%BB%B6%E6%8C%87%E6%A8%99.png" alt=""></p><ul><li>EX:<br><img src="%E7%89%A9%E4%BB%B6%E6%8C%87%E6%A8%99Ex1.png" alt=""></li><li>EX2 (政大):<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">void A(int V1, int V2)</span><br><span class="line">&#123;</span><br><span class="line">    int t &#x3D; V2, V2 &#x3D; V1 - 3, V1 &#x3D; t + 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void pA(int *V1, int *V2)</span><br><span class="line">&#123;</span><br><span class="line">    int t &#x3D; *V2;</span><br><span class="line">    *V2 &#x3D; *V1 + 2;</span><br><span class="line">    *V1 &#x3D; t - 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void rA(int &amp;V1, int &amp;V2)</span><br><span class="line">&#123;</span><br><span class="line">    int t &#x3D; V2;</span><br><span class="line">    V2 &#x3D; V1 + 4;</span><br><span class="line">    V1 &#x3D; t - 5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int i &#x3D; 1, j &#x3D; 2;</span><br><span class="line">    cout &lt;&lt;i&lt;&lt;j&lt;&lt;&quot;\n&quot;;</span><br><span class="line">    A(i, j);      &#x2F;&#x2F; call-by value</span><br><span class="line">    cout &lt;&lt;i&lt;&lt;j&lt;&lt;&quot;\n&quot;;</span><br><span class="line">    pA(&amp;i, &amp;i);   &#x2F;&#x2F; call-by address</span><br><span class="line">    cout &lt;&lt;i&lt;&lt;j&lt;&lt;&quot;\n&quot;;</span><br><span class="line">    rA(i, j);     &#x2F;&#x2F; call-by reference (取綽號, c++ 獨有)</span><br><span class="line">    cout &lt;&lt;i&lt;&lt;j&lt;&lt;&quot;\n&quot;;</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Ans: </span><br><span class="line">&#x2F;&#x2F; 1 2 </span><br><span class="line">&#x2F;&#x2F; 1 2</span><br><span class="line">&#x2F;&#x2F; -2 3</span><br><span class="line">&#x2F;&#x2F; -2 2</span><br></pre></td></tr></table></figure><img src="%E6%8C%87%E6%A8%99Ex.png" alt=""></li></ul><h2>Polymorphism 多型</h2><ul><li>Def :<ul><li>多型主要是於<strong>執行時期</strong>利用<strong>動態繫結</strong>的方式來呼叫需執行的 function =&gt; <strong>執行時才動態決定</strong></li><li>C++ 中一般的函式呼叫於 compile time (state binding)已決定, 其呼叫位址 =&gt; <strong>故無法達到多型</strong></li><li>在 C++ 中多加入一keyword <strong>virtual</strong> 來註明函式為 virtual function =&gt; <strong>已達多型之效</strong></li></ul></li><li>圖：<br><img src="%E5%A4%9A%E5%9E%8B.png" alt=""></li></ul><ol><li>利用父類別型態 <strong>(須為指標或參數, 不能為一般變數)</strong></li><li>接收不同子類別的物件</li><li>做相同的動作</li><li>引發不同的行為(同名異式)</li></ol><ul><li><p>Ex1:</p></li><li><p>NOTE: Polymorphism =&gt; Inheritance(:) + Overriding + Virtual function<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Virtual 一抽掉, 就永遠印出 An.walk</span><br><span class="line">class Animal</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">    virtual void walk()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;An.walk&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Person:public Animal</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">    virtual void walk()  &#x2F;&#x2F; 子類別的 virtual 可省略</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;Person walk&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Dog: public Animal</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">    virtual void walk()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;Dog walk&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main () &#123;</span><br><span class="line">    &#x2F;&#x2F; 一定要指標或參考</span><br><span class="line">    Animzl *aPtr &#x3D; 0; &#x2F;&#x2F; 一開始是 0</span><br><span class="line">    Person p;</span><br><span class="line">    aPtr &#x3D; &amp;p;  &#x2F;&#x2F; 指標接收住址</span><br><span class="line">    aPtr-&gt; walk(); &#x2F;&#x2F; &quot;Person&quot; walk</span><br><span class="line">    Dog d;</span><br><span class="line">    aPtr &#x3D; &amp;d;</span><br><span class="line">    aPtr -&gt; walk(); &#x2F;&#x2F; &quot;dog&quot; walk</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Ex2: 政大<br><img src="%E5%A4%9A%E5%9E%8BEx1.png" alt=""><img src="%E5%A4%9A%E5%9E%8BEx2.png" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Base</span><br><span class="line">&#123;</span><br><span class="line">    public: </span><br><span class="line">    virtual void iam()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;Base \n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>問：</p></li></ul><ol><li>Derive two class from Base(繼承), and for each define iam() to write out the name of the class (override).<br>Sol:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class D1: public Base</span><br><span class="line">&#123;</span><br><span class="line">    public: </span><br><span class="line">    virtual void iam()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;D1 \n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class D2: public Base</span><br><span class="line">&#123;</span><br><span class="line">    public:</span><br><span class="line">    virtual void iam()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;D2 \n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li>Create objects of these classes(物件宣告), and call iam() for them(物件操作).<br>Sol:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Base b;</span><br><span class="line">    D1 d1;</span><br><span class="line">    D2 d2;</span><br><span class="line">    b.iam();</span><br><span class="line">    d1.iam();</span><br><span class="line">    d2.iam();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Assign pointers to objects of the derived class to Base *pointers and call iam() through those pointers.<br>Sol:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    Base *b1, *b2;</span><br><span class="line">    D1 d1;</span><br><span class="line">    b1 &#x3D; &amp;d1;</span><br><span class="line">    b1 -&gt; iam(); &#x2F;&#x2F; 印出 &quot;D1&quot;</span><br><span class="line">    D2 d2;</span><br><span class="line">    b2 &#x3D; &amp;d2;</span><br><span class="line">    b2 -&gt; iam(); &#x2F;&#x2F; 印出 &quot;D2&quot;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 程式介紹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 建構子 </tag>
            
            <tag> 解構子 </tag>
            
            <tag> Overriding </tag>
            
            <tag> Overloading </tag>
            
            <tag> 物件指標 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter5-程式介紹-物件導向概論</title>
      <link href="/repository/2022/04/20/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E6%A6%82%E8%AB%96/"/>
      <url>/repository/2022/04/20/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E6%A6%82%E8%AB%96/</url>
      
        <content type="html"><![CDATA[<h1>5.3 物件導向概論</h1><hr><h2>Object Oriented:</h2><p>int x; (type 變數)<br>person P; (類別 物件)</p><ul><li>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person p;</span><br><span class="line">p.h &#x3D; 180</span><br><span class="line">p.w &#x3D; 80;</span><br><span class="line">p.walk();</span><br></pre></td></tr></table></figure></li></ul><h3>why O.O</h3><ul><li>可用以反應出真實世界的情況, 使程式的可讀性更佳, 日後的可維護性亦更好</li><li><strong>彈性好, 但 performance 差</strong></li></ul><h2>物件(object)</h2><ul><li>Def:<ul><li>an object is an instance of a class =&gt; 指物件為類別的實體</li><li>each object 是獨立的, 滿足唯一性(unique)</li></ul></li><li>就程式而言物件是<ol><li>參與程式執行的單位</li><li>為一變數會佔用 Mem.space</li><li><strong>dynamic</strong>: 指會隨執行而更動其狀態</li></ol></li></ul><h2>類別(class)</h2><ul><li>Def:<ul><li>將具相同屬性及行為的 object 加以抽象化定義</li></ul></li><li>其中：<ul><li>attribute: 靜態描述(特徵值), height, weight, 單眼皮, 雙眼皮</li><li>behavior(operation in c++, method in java): 動態描述 =&gt; 作用在屬性上</li></ul></li><li>就程式而言類別是：<ul><li>ADT (Abstract Data Type)</li><li>為靜態單位, 只佔用一份 Mem. space</li><li>為物件的實施藍圖</li></ul></li><li>概念：<ul><li>圖：<img src="%E5%80%9F%E6%9B%B8.png" alt=""></li><li>Note: Object 之間溝通採用 <strong>&quot;Message Passing&quot;</strong> (因為物件間是獨立的, 無共享Mem.)</li></ul></li></ul><h2>Object Oriented 四大特色</h2><ol><li>Data Abstraction 資料抽象化<ul><li>將物件細節排除, 擷取共通的 attribute 及 operation, 加以抽象化定義</li><li>在定義(抽象化)過程, 會忽略和問題無關的部分</li></ul></li><li>Encapsulation 封裝<ul><li>Def:<ul><li>可將 class 中部分的 attribute 及 operation 隱藏, 避免外界直接取用</li><li>一般會用一公開的管道使外界可做間接存取, 以便管控正確性</li></ul></li><li>優點：<ol><li>確保私有 data 不受外界影響 =&gt; 可避免不當操作發生, 如 ....heart</li><li>適時將製作的細節封裝, 如此可在改變時, 減少對外操作的影響 =&gt; ripple effect 低, 可維護性高(如程式碼2)</li></ol></li></ul></li></ol><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person                   外界</span><br><span class="line">setHeight(int h)         height &#x3D; -30; (Can&#39;t use)</span><br><span class="line">&#123;                        setHeight(-30);</span><br><span class="line">    if (h &lt; 0) error;</span><br><span class="line">    height &#x3D; n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;今日有一客戶需一排序程式</span><br><span class="line">BubbleSort(data) &#123;</span><br><span class="line">    ...             &#x2F;&#x2F;但由於資料愈來愈多嫌太慢</span><br><span class="line">&#125;</span><br><span class="line">QuickSort(data) &#123;</span><br><span class="line">    ...             &#x2F;&#x2F;卻發現舊系統中都是 bubble sort, 無法執行 quick sort</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 所以當初應</span><br><span class="line">Sort(data) &#123;</span><br><span class="line">    BubbleSort(data) &#x2F;&#x2F; 改成</span><br><span class="line">    QuickSort(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3"><li>Inheritance 繼承<ul><li>Def:<ul><li>子類別(Child class) 可以繼承 父類別 (parent class) 的屬性及運作, 亦可加入 child class 自訂的屬性及運作</li></ul></li><li>圖：<br><img src="%E7%B9%BC%E6%89%BF1.png" alt=""></li><li>優點：<ol><li>支援 software reuse (軟體再利用) =&gt; <strong>省下重複開發成本</strong></li><li>支援 component base software developments (以元件為基礎的軟體開發方式) =&gt; VB , 品質好, 速度快</li></ol></li><li>缺點：<ol><li>當繼承深且複雜的時候, 會使 compiler 的 performance 下降, 耗費時間去找尋各 data 的來源<br><img src="%E7%B9%BC%E6%89%BF.png" alt=""></li><li>readable 及 maintainable 的程度下降, 因為太多層, 所以視窗太多, 要找時也困難</li><li>有 Naming Conflicting 的議題(命名衝突), 又稱 &quot;ambiguous calling&quot; (模糊呼叫)<br><img src="%E5%91%BD%E5%90%8D%E8%A1%9D%E7%AA%81.png" alt=""></li><li>重複繼承的問題<br><img src="%E9%87%8D%E8%A4%87%E7%B9%BC%E6%89%BF.png" alt=""></li></ol></li></ul></li></ol><blockquote><p>補充 Encapsulation 存取權限：<br><img src="%E5%B0%81%E8%A3%9D%E5%AD%98%E5%8F%96%E6%AC%8A%E9%99%90.png" alt=""><br>Note:</p><ol><li>在 c++中額外提供 &quot;friendly&quot; 權限, 當 class A, B 2者設為 friend, 即可取用之</li><li>在 java 中若沒宣稱權限, 則為 default 權限, <strong>此時只有 class 本身及同 package(類似目錄的概念) 下方可使用</strong></li></ol></blockquote><ol start="4"><li>Polymorphism 多型<ul><li>Def: O.O 程式於 &quot;執行期間&quot; (Runtime 才決定呼叫的 function 之所在 -&gt; Dynamic Binding), 不同型別之物件, 接收到同一訊息 <strong>(同名)</strong>, 會有不同的行為 <strong>(異式)</strong>, 反應謂之「多型」</li><li>Note: binding<br><img src="%E5%A4%9A%E5%9E%8B2.png" alt=""></li><li>Ex:<br><img src="%E5%A4%9A%E5%9E%8B1.png" alt=""></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 程式介紹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 繼承 </tag>
            
            <tag> 多型 </tag>
            
            <tag> 物件導向 </tag>
            
            <tag> 封裝 </tag>
            
            <tag> 抽象 </tag>
            
            <tag> 類別 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter5-程式介紹-C語言重點</title>
      <link href="/repository/2021/07/08/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-C%E8%AA%9E%E8%A8%80%E9%87%8D%E9%BB%9E/"/>
      <url>/repository/2021/07/08/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-C%E8%AA%9E%E8%A8%80%E9%87%8D%E9%BB%9E/</url>
      
        <content type="html"><![CDATA[<h1>5.2 C 語言重點</h1><hr><h2>C Language</h2><ul><li>結構<ul><li>xxx.c</li><li>header: 表頭</li><li>body: object code</li></ul></li><li>Ex:<code># include &lt;stdio.h&gt;</code> =&gt; stdio.h 為 linker, 外部函式庫之 header file</li></ul><h2>變數 vs 常數</h2><table><thead><tr><th>Variable</th><th>Constant</th></tr></thead><tbody><tr><td>會隨著執行而更動的數值</td><td>不變</td></tr><tr><td>佔用 memory space 來存取</td><td>不需</td></tr><tr><td>int x;</td><td>ex: 'a' or 100</td></tr></tbody></table><ul><li>Note: 常數變數 (constant variable)<br>Define: <code>const int x = 10;</code></li></ul><h2>變數宣告</h2><p>格式： <code>type (space) variable;</code><br>ex: int x;</p><h2>Compare Static typed and Dynamic typed</h2><table><thead><tr><th>Static typed</th><th>Dynamic typed</th></tr></thead><tbody><tr><td>宣告時, 即需決定 data 之型態</td><td>不需, runtime 才決定</td></tr><tr><td>int x;</td><td>var x; x = 100;</td></tr><tr><td>java, C, C++</td><td>javascript, ruby</td></tr></tbody></table><h2>常見的 data type 介紹</h2><ol><li>boolean (布林):</li></ol><ul><li>只有兩種狀態:<ul><li>true</li><li>false</li></ul></li><li>Ex: <code>bool flag;</code></li></ul><ol start="2"><li>character (字元):</li></ol><ul><li>利用 &quot;ASCII&quot; 來存放</li><li>佔用 1 byte memory space</li><li>常見字元編碼<ul><li>'0' =&gt; (48)10</li><li>'A' =&gt; (65)10</li><li>'a' =&gt; (97)10</li></ul></li><li>Ex: <code>char c1;</code></li><li>Note:</li></ul><table><thead><tr><th>character</th><th>string</th></tr></thead><tbody><tr><td>由一字母或數字組成</td><td>由 1~多個組成</td></tr><tr><td>用單引號括住</td><td>用雙引號括住</td></tr><tr><td>'a', 'B'(對), &quot;B&quot;(錯)</td><td>&quot;hello&quot;(對), 'hello'(錯)</td></tr></tbody></table><ol start="3"><li>integer (整數):</li></ol><ul><li>利用 4 bytes 表示</li><li>Ex: <code>int x;</code></li><li>除法:<ul><li>&quot;/&quot; =&gt; 取商, <code>x = 6/4</code></li><li>&quot;%&quot; =&gt; 取餘, <code>y = 6%4</code></li></ul></li><li>Ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int x;</span><br><span class="line">char a1 &#x3D; &#39;a&#39;;</span><br><span class="line">x &#x3D; a1;</span><br><span class="line">a1 &#x3D; a1 + 3;</span><br><span class="line">printf(&quot;%d&quot;, x); &#x2F;&#x2F; x &#x3D; 97</span><br><span class="line">printf(&quot;%c&quot;, a1); &#x2F;&#x2F; a1 &#x3D; 100</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>浮點數:</li></ol><table><thead><tr><th>float</th><th>double</th></tr></thead><tbody><tr><td>single precision</td><td>double precision</td></tr><tr><td>32 bits, 佔用 4 bytes</td><td>使用 8 bytes</td></tr><tr><td>float f;</td><td>double d;</td></tr></tbody></table><ul><li>ex:<ol><li><code>float f1 = 3.2/4;</code> =&gt; 0.8</li><li><code>float f2 = 5/4;</code> =&gt; 1.0</li><li><code>float f3 = 5.0/4;</code> =&gt; 1.25</li><li><code>float f4 = (float)5/4;</code> =&gt; 1.25 =&gt; 強制將 5 視為浮點數, <strong>強制轉型 casting</strong></li></ol></li><li>Note:<ol><li>在 c, c++中, 運算是會以最大型別來求得結果<ul><li>ex: int(隱含轉型 -&gt; double) * double + float = ? =&gt; output <strong>double</strong></li></ul></li><li>浮點數, 預設為 <strong>double</strong> 之型態 (因為失真少, 結尾誤差少)<ul><li>ex: 3.14 * 2.56 + 3.2 =&gt; double</li></ul></li></ol></li></ul><blockquote><p>NOTE: type range =&gt; byte &lt; short &lt; int &lt; long &lt; float &lt; double</p></blockquote><h2>變數種類</h2><table><thead><tr><th>local variable</th><th>global variable</th></tr></thead><tbody><tr><td>於 block 或 函式之中宣告</td><td>於 block 或 函式之外宣告</td></tr><tr><td>僅能在所屬的 block 之內使用</td><td>全部block都可用</td></tr><tr><td>於 block 一結束, 即清除</td><td>整個程式結束才清除</td></tr></tbody></table><ul><li>static variable</li></ul><h2>變數的存取順序</h2><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">全域變數</span><br><span class="line">3.&#123;</span><br><span class="line">    2.&#123;</span><br><span class="line">        1.&#123;</span><br><span class="line">            print(x)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>先找自身區塊</li><li>若 1 無, 往外層找</li><li>若 2 無, 往 global 找</li></ol><ul><li><p>Note: dynamic scoping =&gt; 依程式執行時的呼叫順序 (runtime) 來決定找尋順序, <code>main() -&gt; A() -&gt; B()</code> =&gt; 找B找不到, 找A, 在找不到找 main</p></li><li><p>Ex1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int x &#x3D; 10; &#x2F;&#x2F;global</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int y &#x3D; 5;</span><br><span class="line">    &#123;</span><br><span class="line">        int x &#x3D; 20;</span><br><span class="line">        int z &#x3D; 8;</span><br><span class="line">        printf(&quot;%d&quot;, x); &#x2F;&#x2F; x&#x3D;20, 用完即清除</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%d&quot;, x); &#x2F;&#x2F; x&#x3D;10</span><br><span class="line">    printf(&quot;%d&quot;, z); &#x2F;&#x2F; compile error</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int x &#x3D; 20;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int y &#x3D; 10;</span><br><span class="line">    fun(y);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">-------------------</span><br><span class="line">void fun(int a)</span><br><span class="line">&#123;</span><br><span class="line">    int y &#x3D; 30;</span><br><span class="line">    printf(&quot;%d, %d&quot;, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Ans: (20, 30)</p></li><li><p>Note: 在 C 語言裡, 只要不是指標, 就是 call by-value</p></li><li><p>local variable =&gt; 與 function 一樣, 用 stack 放 =&gt; 後進先出</p></li></ul><h2>Standard I/O library 標準輸出/輸入函式庫</h2><h3>程式欲使用須引入： <code>#include &lt;stdio.h&gt;</code></h3><h3>常用函式：</h3><ol><li><p><code>printf</code> =&gt; 標準輸出<br>格式： <code>printf(&quot;格式字串&quot;, var1, var2...);</code><br>Note:</p><ol><li>var 可省略</li><li>若有 var, 需在格式字串中, 有對應的 <strong>格式碼</strong></li></ol><blockquote><p>格式碼：<br>%d 整數<br>%f 浮點數<br>%c 字元<br>%s 字串</p></blockquote><p>EX:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">printf(&quot;hello&quot;);</span><br><span class="line">int x;</span><br><span class="line">printf(&quot;x is %d&quot;, x);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; x is 100</span><br></pre></td></tr></table></figure></p></li><li><p><code>scanf</code> =&gt; 標準輸入<br>從外界 key in 值, 接收到程式<br>格式： <code>scanf(&quot;格式字串&quot;, &amp;var1, &amp;var2...); // &amp;位址</code><br>Note: 格式碼與 <code>printf</code> 相同<br>EX:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int x;</span><br><span class="line">scanf(&quot;input: %d&quot;, &amp;x);</span><br></pre></td></tr></table></figure></p><p>EX:<br><code>Sum = 1+2+3+4...+N</code>, N 為輸入值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int N, sum &#x3D; 0, i;</span><br><span class="line">    scanf(&quot;input: %d&quot;, &amp;N);</span><br><span class="line">    for(i &#x3D; 1; i ≤ N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum &#x3D; sum + i;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;total:%d&quot;, sum);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><h2>運算子</h2><table><thead><tr><th>Operator</th><th>Priority</th><th>Associative</th></tr></thead><tbody><tr><td>(), []</td><td><strong>高</strong></td><td>右結合</td></tr><tr><td>!, ~, -(負), ++, --</td><td></td><td>左結合</td></tr><tr><td>*, /, +, - (<strong>算數1</strong>)</td><td></td><td>左結合</td></tr><tr><td>&lt;&lt;, &gt;&gt;</td><td></td><td>左結合</td></tr><tr><td>&lt;, &gt;, ≤, ≥ (<strong>關係2</strong>)</td><td></td><td>左結合</td></tr><tr><td>位元 (<strong>3</strong>)</td><td></td><td>左結合</td></tr><tr><td>logical (<strong>4</strong>)</td><td></td><td>左結合</td></tr><tr><td>= (assign)</td><td><strong>低</strong></td><td>右結合</td></tr></tbody></table><ul><li>Note:<ol><li><p>1&gt;2&gt;3&gt;4</p></li><li><p>多個 operator 之運算, 先看 priority, 若相同在看 associate</p></li><li><p>Associative 分為：</p><ul><li>左結合 ((3+5)+8)</li><li>右結合 (3+(5+8))</li></ul></li><li><p>operator 分為：</p><ol><li>unary operator (單元)<br>ex: -5, !flag</li><li>binary operator (二元)<br>ex: 3+5, 6-4, 7*8</li><li>trinary operator (三元)<br><code>條件式 ? x : y</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (條件式)</span><br><span class="line">&#123;</span><br><span class="line">    x</span><br><span class="line">&#125; else </span><br><span class="line">&#123;</span><br><span class="line">    y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>=</strong>: assign , <strong>==</strong>: equals</p></li></ol></li></ul><h2>++, --</h2><table><thead><tr><th>前置式</th><th>後置式</th></tr></thead><tbody><tr><td>先做++, --, 再取值</td><td>先取值, 再做++, --</td></tr><tr><td>++x, --x</td><td>x++, x--</td></tr></tbody></table><ul><li><p>Ex1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int x &#x3D; 5, y&#x3D;5;</span><br><span class="line">int A, B;</span><br><span class="line">A &#x3D; x++;</span><br><span class="line">B &#x3D; ++y;</span><br><span class="line">print(A, B, x, y);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 5, 6, 6, 6</span><br></pre></td></tr></table></figure></p></li><li><p>Ex2:<br><code>a = 3, b = 6</code>, 則 <code>39/-++a+-20%b--</code><br>Sol:<br><code>39/(-4)+(-29)%6</code> = <code>-9 + (-5)</code> = <code>-14</code></p></li></ul><h2>位元運算</h2><ul><li>概念：先將資料化成 2 進制, 再開始進行運算</li></ul><ol><li>AND (&amp;)</li><li>OR (|)</li><li>XOR (^)</li><li>&lt;&lt;</li><li>&quot;&gt;&gt;&quot;</li></ol><ul><li>EX1:  <code>int x = 8 &amp; 6;</code>, <code>(0 0 0 0)2 = 0</code>, 同時為 1 才成立, <strong>像 (．)</strong></li><li>EX2: <code>int x = 8 | 6;</code>, <code>(1 1 1 0)2 = 14</code>, <strong>像 (+)</strong></li><li>EX3: <code>int x = 8 ^ 6;</code>, <code>(1 1 1 0 )2 = 14</code>, <strong>相同為 0, 相異為 1</strong></li><li>EX4: &lt;&lt; 左移, <code>x &lt;&lt; n</code> =&gt; 將 x 左移 n 個 bits,<br>作法：在右邊加上 n 個 0 (具備 <strong>乘法</strong> 效果)<br>例如：<code>int x = 8 &lt;&lt; 2;</code>, (1000<strong>00</strong>)2 = 32</li><li>EX5: &gt;&gt; 右移, <code>x &gt;&gt; n</code> =&gt; 將 x 右移 n 個 bits,<br>作法：<ul><li>step1 =&gt; 將右邊<strong>砍掉</strong> n 個 bits <strong>維持 sign bit</strong></li><li>step2 =&gt; 在左邊補上<ol><li>正 =&gt; 0 (n 個)</li><li>負 =&gt; 1 (n 個)<br>（具備 <strong>除法</strong> 效果)例如：<code>int x = 8 &gt;&gt; 2;</code>, (<strong>00</strong>1000)2 = 2</li></ol></li></ul></li></ul><h2>Logical</h2><h3>NOT (!)</h3><ul><li>false -&gt; true</li><li>true -&gt; false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bool flag &#x3D; true;</span><br><span class="line">&#x3D;&gt; !flag &#x3D;&gt; false</span><br></pre></td></tr></table></figure></li></ul><h3>AND (&amp;&amp;) and OR (||)</h3><ul><li><strong>布林運算式最佳化</strong>  =&gt; <strong>短路現象</strong> =&gt; <strong>shortcut 捷徑運算</strong></li><li>A, B 均為 conditional (條件式)<br><code>if(A &amp;&amp; B)</code>, A = false, B 不做, 結果必為 false<br><code>if(A || B)</code>, A = true, B 不做, 結果必為 true</li></ul><h2>if - else</h2><ul><li><p>格式一：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (cond 1) &#123;</span><br><span class="line">    true (2)</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    false (3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>1 ? 2 : 3</p></li><li><p>格式二：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if (cond) &#123;</span><br><span class="line">    true 1</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    if (cond) &#123;</span><br><span class="line">        true 2</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        false 3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------</span><br><span class="line">if (cond) &#123;</span><br><span class="line">    1</span><br><span class="line">&#125;else if (cond) &#123;</span><br><span class="line">    2</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Note: 當 if ... else 沒有 block 時, 則只會影響到下一個 statement (敘述)</p></li><li><p>ex1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int x &#x3D; 1;</span><br><span class="line">if (x &lt; 5) &#123;</span><br><span class="line">    x--;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line">x++;</span><br><span class="line">printf(&quot;%d&quot;, x);</span><br></pre></td></tr></table></figure></p></li><li><p>ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int x &#x3D; 10;</span><br><span class="line">&#x2F;*</span><br><span class="line">    說明, 此程式在判別 x 是否大於 5 後, 再行動行</span><br><span class="line">*&#x2F;</span><br><span class="line">if (x &gt; 5) </span><br><span class="line">    x &#x3D; x + 5;</span><br><span class="line">else </span><br><span class="line">    x &#x3D; x - 5;</span><br><span class="line">printf(&quot;%d&quot;, x);</span><br></pre></td></tr></table></figure></p></li></ul><blockquote><p>Note: 註解可分, // =&gt; 單行, /<em>...</em>/ =&gt; 多行註解</p></blockquote><ul><li>ex3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int i &#x3D; 3, j &#x3D; 5;</span><br><span class="line">if (cond) &#123;</span><br><span class="line">    printf(&quot;%d&quot;, i);</span><br><span class="line">    printf(&quot;%d&quot;, j);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    printf(&quot;false&quot;);</span><br><span class="line">    printf(&quot;%d, %d&quot;, i, j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Q: cond 為：<ol><li>(i = 0) &amp;&amp; (j = 4), false, 0, 5 =&gt; Ans</li><li>i == 2 &amp;&amp; j == 4, false, 3, 5</li><li>(i = 0) &amp; (j = 4), false, 0, 4</li><li>(i = 2) || (j = 4), 2, 5</li></ol></li></ul><h2>switch...case</h2><ul><li><p>思考：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(c1)</span><br><span class="line">else if (c2)</span><br><span class="line">else if (c3)</span><br><span class="line">else</span><br><span class="line">&#x2F;&#x2F; 當 else if 太多時，採用 switch...case 較清楚</span><br></pre></td></tr></table></figure></p></li><li><p>格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">switch(變數 or 運算式)</span><br><span class="line">&#123;</span><br><span class="line">    case 符合文 or 數字：</span><br><span class="line">        statement;</span><br><span class="line">    case ...:</span><br><span class="line">        statement;</span><br><span class="line">    case ...:</span><br><span class="line">        ...;</span><br><span class="line">    default: &#x2F;&#x2F;當所有 case 皆不成立, 則於此</span><br><span class="line">        statement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>執行方式：</p><ul><li>step1: 從 switch 的變數去比對哪個 case 符合條件</li><li>step2: 從符合的 case 之 statement 往下做, 直到 break 或 block 結束才停止</li></ul></li><li><p>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch(x) &#123;</span><br><span class="line">    default:</span><br><span class="line">        printf(&quot;No match&quot;);</span><br><span class="line">    case 1:</span><br><span class="line">        printf(&quot;1&quot;);</span><br><span class="line">    case 2:</span><br><span class="line">        printf(&quot;2&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 1. x &#x3D; 2 &#x3D;&gt; 印出 2</span><br><span class="line">&#x2F;&#x2F; 2. x &#x3D; 5 &#x3D;&gt; 印出 No match 1 2</span><br></pre></td></tr></table></figure></p></li></ul><h2>重複 =&gt; loop in C 常用 loop 語法</h2><h3>for</h3><ul><li><p>格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for ( exp1(1); exp2(2); exp3(4)) </span><br><span class="line">&#123;</span><br><span class="line">    statement(3);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 1. initial: 只做一次，於進入時做</span><br><span class="line">&#x2F;&#x2F; 2. conditional: 成立，做 3, 接著 4, 再回到 2。不成立，跳出 for loop</span><br><span class="line">----------------------------------</span><br><span class="line">&#x2F;&#x2F; special case:</span><br><span class="line">for ( ; (true); ;)</span><br><span class="line">[</span><br><span class="line">    &#x2F;&#x2F; 無窮迴圈</span><br><span class="line">]</span><br><span class="line">&#x3D;&gt;</span><br><span class="line">while (true)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Ex: 1+2+3....+10, 用 for 寫<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int sum &#x3D; 0, i;</span><br><span class="line">for(i &#x3D; 1; i ≤ 10; i++) &#123;</span><br><span class="line">    sum &#x3D; sum + i;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;sum&#x3D;%d&quot;, sum);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 55, i &#x3D; 11 最終跑到 11 不成立</span><br></pre></td></tr></table></figure></p></li></ul><h3>while</h3><ul><li>格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 承上題</span><br><span class="line">int sum &#x3D; 0, i;</span><br><span class="line">i &#x3D; 1;</span><br><span class="line">while (i ≤ 10)</span><br><span class="line">&#123;</span><br><span class="line">    sum &#x3D; sum + i;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;sum&#x3D;%d&quot;, sum);</span><br></pre></td></tr></table></figure></li></ul><h3>do...while</h3><ul><li>格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">do(1)</span><br><span class="line">&#123;</span><br><span class="line">(3)</span><br><span class="line">(4)</span><br><span class="line">&#125;while(2);</span><br></pre></td></tr></table></figure></li></ul><h3>Compare 前測式 VS 後測式</h3><table><thead><tr><th>前測式</th><th>後測式</th></tr></thead><tbody><tr><td>先做測試，成立才做 statement =&gt; 最少做 0 次</td><td>先做，再做測試 =&gt; 最少做 1 次</td></tr><tr><td>while, for loop</td><td>do-while</td></tr></tbody></table><ul><li>Note: C語言和 C++ 中, 所有關鍵字都是小寫</li></ul><h3>Compare counted loop VS conditional loop</h3><table><thead><tr><th>counted loop (計數式)</th><th>conditional loop(條件式)</th></tr></thead><tbody><tr><td>執行次數明確</td><td>執行次數不明確，在一特定的條件，成立或不成立才終止</td></tr><tr><td>ex: 1+2+....+100</td><td>linked list 長度</td></tr><tr><td>for loop</td><td>while loop</td></tr></tbody></table><h3>continue &amp; break</h3><table><thead><tr><th>continue</th><th>break</th></tr></thead><tbody><tr><td>遇到時，則之後的敘述不做，直接進入 loop 的下一回合</td><td>遇到時，直接跳出所屬的 loop</td></tr></tbody></table><ul><li><p>ex:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 2; i ≤ 10; i+&#x3D;2)</span><br><span class="line">&#123;</span><br><span class="line">    if (i &#x3D;&#x3D; 6) continue;</span><br><span class="line">    sum +&#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;, sum);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; i  2 4 6 8  10 12</span><br><span class="line">&#x2F;&#x2F;sum 2 6 X 14 24 stop</span><br><span class="line">&#x2F;&#x2F;sum &#x3D; 24</span><br></pre></td></tr></table></figure></p></li><li><p>ex2: 承上題 若 continue 改為 break<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 2; i ≤ 10; i+&#x3D;2)</span><br><span class="line">&#123;</span><br><span class="line">    if (i &#x3D;&#x3D; 6) break;</span><br><span class="line">    sum +&#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;, sum);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; i  2 4 6 </span><br><span class="line">&#x2F;&#x2F;sum 2 6 X </span><br><span class="line">&#x2F;&#x2F;sum &#x3D; 6</span><br></pre></td></tr></table></figure></p></li><li><p>ex3: 呈例 2, 將 <strong>==</strong> 改為 <strong>=</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int sum &#x3D; 0;</span><br><span class="line">for (int i &#x3D; 2; i ≤ 10; i+&#x3D;2)</span><br><span class="line">&#123;</span><br><span class="line">    if (i &#x3D; 6) break;</span><br><span class="line">    sum +&#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;, sum);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;sum &#x3D; 0</span><br></pre></td></tr></table></figure></p></li></ul><h2>Pointer (指標)</h2><ul><li>說明：</li></ul><table><thead><tr><th>一般變數</th><th>指標變數</th></tr></thead><tbody><tr><td>int x;</td><td>int *p;</td></tr></tbody></table><ul><li><p>Ex:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int x &#x3D; 5;</span><br><span class="line">&#x2F;&#x2F; 下面兩行為 int *p &#x3D; &amp;x</span><br><span class="line">int *p;</span><br><span class="line">p &#x3D; &amp;x;</span><br><span class="line">*p &#x3D; *p + 1; &#x2F;&#x2F; 利用指標間接操作指向的內容</span><br><span class="line">printf(&quot;%d&quot;, x)</span><br></pre></td></tr></table></figure></p></li><li><p>Ex: 一學生採 C language coding 如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a &#x3D; 10, b &#x3D; 20;</span><br><span class="line">    swap(a, b);</span><br><span class="line">    printf(&quot;%d, %d&quot;, a, b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void swap(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    int temp;</span><br><span class="line">    temp &#x3D; x;</span><br><span class="line">    x &#x3D; y;</span><br><span class="line">    y &#x3D; temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Q:</p><ol><li>為何呼叫 swap 後, a, b 沒變動？<br>由於此時 swap 的參數傳遞是採用 call by value, 而非 call by address, 故沒有 side effect, 因此 x, y 的變動, a, b 不受影響</li><li>How to modify the program?<br>in C =&gt; 用 pointer 以改成 call by address<br>in C++ =&gt; 用 pointer or 用 call by reference<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a &#x3D; 10, b &#x3D; 20;</span><br><span class="line">    swap(&amp;a, &amp;b);</span><br><span class="line">    printf(&quot;%d, %d&quot;, a, b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void swap(int *x, int *y)</span><br><span class="line">&#123;</span><br><span class="line">    int temp;</span><br><span class="line">    temp &#x3D; *x;</span><br><span class="line">    *x &#x3D; *y;</span><br><span class="line">    *y &#x3D; temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2>陣列(Array)</h2><ul><li><p>宣告方式：<br>type 變數 [size];<br>int  A  [5];</p></li><li><p>Note: 在 C, C++ 中, 陣列名稱本身為 <strong>一固定(其內容不可更動)指標</strong>, 永遠指向第 [0]格</p></li><li><p>Ex:</p><ol><li>A[0] = 10</li><li>A = 1000</li><li>*A = 10</li><li>&amp;A[0] = 1000</li><li>A[2] = 30</li><li>&amp;A[2] = 1008</li><li>*(A+1) = 20 -&gt; A(陣列指標)+1 =&gt; 往下一格</li><li>*(A++) = compile error (因為試圖去更動A, 但A的內容不可更動) -&gt; A++ =&gt; A=A+1</li></ol></li><li><p>Ex1:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int A[5];</span><br><span class="line">int *p;</span><br><span class="line">for ( i &#x3D; 0; ≤ 4; i++)</span><br><span class="line">&#123;</span><br><span class="line">    A[i] &#x3D; 5 - i;</span><br><span class="line">&#125;</span><br><span class="line">p &#x3D; A; &#x2F;&#x2F; A為何不用&amp;, 因為A已經是 address 所以不須加</span><br></pre></td></tr></table></figure><img src="pointer.png" alt=""></p></li></ul><p>Q:<br>1. printf(*p);  5<br>2. printf(<em>p++);  5 // 先取值再往下一格<br>3. printf(</em>++p);  3<br>4. printf(++*p);  4<br>5. printf((<em>p++));  4<br>6. printf(</em>--p);  4</p><ul><li>Note:<br>p++ or ++p =&gt; p=p+1 往下一格<br>p-- or --p =&gt; p=p-1 往上一格</li></ul><p>(*p)++ or ++*p =&gt; *p=*p+1 將p指向的內容+1<br>(*p)-- or --*p =&gt; *p=*p-1 將p指向的內容-1</p><h2>雙重指標</h2><ul><li><p>宣告：<br>type  **變數名稱<br>指標的指標<br>=&gt; 需 &quot;2次&quot; 的 Mem. access 才可取得data</p></li><li><p>Ex:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int x &#x3D; 5;</span><br><span class="line">int *p &#x3D; &amp;x;</span><br><span class="line">int **q &#x3D; &amp;p;</span><br></pre></td></tr></table></figure><img src="double_pointer.png" alt=""></p></li><li><p>Q:</p><ol><li>q = ?  2000</li><li>&amp;q = ?  3000</li><li>*q = ?  1000</li><li>**q = ?  5</li></ol></li></ul><h2>字串的處理方式</h2><ul><li>C 語言中無 string 之 data type =&gt; 拿 &quot;字元陣列&quot; 來存字串</li><li>ex: cahr a[10];<br>a = &quot;hello&quot;;</li><li>ex1:<br>char *S = &quot;hello&quot;;<ul><li>Q:<ol><li>S[0] = ?</li><li>*(S+4) = ?</li><li>printf(&quot;%s&quot;, S+2);?</li></ol></li><li>Sol:<ol><li>h</li><li>o</li><li>llo</li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 程式介紹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 運算子 </tag>
            
            <tag> 位元運算 </tag>
            
            <tag> Pointer </tag>
            
            <tag> 雙重指標 </tag>
            
            <tag> Structure Programming Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter5-程式介紹-基本介紹</title>
      <link href="/repository/2021/07/05/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/"/>
      <url>/repository/2021/07/05/Chapter5-%E7%A8%8B%E5%BC%8F%E4%BB%8B%E7%B4%B9-%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h1>5.1 基本介紹</h1><hr><h2>Programming Language 程式語言</h2><table><thead><tr><th>年代</th><th>特徵1</th><th>特徵2</th><th>特徵3</th><th>特徵4</th><th>特徵5</th></tr></thead><tbody><tr><td>1GL (Machine Language)<strong>低階語言</strong></td><td>由 0, 1 組成</td><td>為機器能直接執行的語言</td><td>user 不易理解</td><td></td><td></td></tr><tr><td>2GL (Assembly Language)<strong>低階語言</strong></td><td>提供簡易的符號供 user 使用</td><td>用 &quot;assembler&quot; 將之轉成 object code</td><td>Ex: ADD R1 3 <strong>=&gt; 將 3 加到 Register R1 中</strong></td><td></td><td></td></tr><tr><td>3GL (High-Level Language)<strong>高階語言</strong></td><td>提供更多貼近 user 的指令</td><td>多為程序導向的程式語言 (procedural language -&gt; tell &quot;how&quot; to do)</td><td>Ex: <code>int i = 3 + 5;</code></td><td>代表：C (具 self-compile), PASCAL, FURTRAN, COBOL, BASIC, C++, JAVA, .NET</td><td>C 語言：  1. compile 完的 object code, 不能跨平台  2. 此邊是語法, 故可跨平台</td></tr><tr><td>4GL (Non-procedural Language) 非程序導向<strong>高階語言</strong></td><td>又稱為<strong>宣告式語言 (Declaractive Language)</strong> -&gt; tell &quot;what&quot; to do</td><td>代表：SQL, report generator</td><td>Ex: <code>Select height From student where height ≥ 180</code></td><td></td><td></td></tr><tr><td>5GL (Natural Language) 自然語言<strong>高階語言</strong></td><td>使用到人工智慧的技術</td><td>為機器能直接執行的語言</td><td>代表：LISP, PROLOG</td><td></td><td></td></tr></tbody></table><h3>種類</h3><table><thead><tr><th>種類</th><th>代表性程式語言</th><th>備註</th></tr></thead><tbody><tr><td>Interpreter language 直譯</td><td>Basic, Java, Javascript, ASP, PHP, JSP, ruby, groovy, python</td><td></td></tr><tr><td>Compile language 編譯</td><td>C, C++, FURTRAN, PASCAL, COBAL -&gt; 先編譯成 object code</td><td>java, javascript 沒有關係</td></tr><tr><td>先 compile, 後 interpreter -&gt; p-code, java</td><td>跨平台 (cross-platform)</td><td></td></tr><tr><td>Object Oriented Programming (OOP)</td><td>java, C++, C#, .NET, javascript, ruby, python, groovy, VB, smalltalk, Ada</td><td></td></tr><tr><td>Functional Programming Language (函式編程語言) FPL</td><td>LISP, ML, F#</td><td>適用於平行運算, 以 function 為 first class, 各 function 間 No side effect</td></tr></tbody></table><h2>funtion (函式) =&gt; C, C++, Java</h2><ul><li>格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return type   function name  parameter list</span><br><span class="line">&#123;</span><br><span class="line">    function code (body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><code>return type</code> : 回傳型態 <strong>output</strong></li><li><code>function name</code>: in c, c++ 中 main 代表主程式</li><li><code>parameter List</code>: 參數串列, 接收外界呼叫時須引入的參數 <strong>input</strong></li><li><code>function code</code> <strong>process</strong></li></ol><h2>funtion calling (呼叫)</h2><ul><li>格式：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">funA()</span><br><span class="line">&#123;</span><br><span class="line">    int a, b;</span><br><span class="line">    ...</span><br><span class="line">    funcB(a, b) &#x2F;&#x2F; (a, b 為 actual parameter 實際參數 AP)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">funB(x, y) &#x2F;&#x2F; (x, y 為 foraml parameter 型式參數 FP)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li>參數傳遞 (funcB in funcA)</li><li>funcB execute</li><li>funcB return</li></ol><h2>參數傳遞種類</h2><table><thead><tr><th>Call by value</th><th>Call by address</th><th>Call by name</th><th>Call by value-result</th></tr></thead><tbody><tr><td>AP 跟 FP 佔用不同的 memory space</td><td>操作相同 Memory space</td><td>AP 會直接取代 FP 之所在</td><td>在 function 最後結束時, 將 FP 寫回對應 AP 之內容</td></tr><tr><td>No side effect</td><td>有</td><td>有</td><td>有</td></tr><tr><td>binding 速度慢 (最慢)</td><td>最快</td><td>居中</td><td></td></tr><tr><td>不適合用於結構型資料的參數傳遞</td><td>適合</td><td></td><td></td></tr></tbody></table><ul><li>Ex1:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a &#x3D; 10, b &#x3D; 20;</span><br><span class="line">    fun(a, b);</span><br><span class="line">    print(a, b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    x &#x3D; 3;</span><br><span class="line">    y &#x3D; 6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>問分別採 1. call by value 2. call by address 3. call by value result, output = ? a = ? b = ?<br><strong>Sol:</strong></p><ol><li>a=10, b=20</li><li>x, y 為記錄 a, b 的位址, 並指回原變數。Ans: a=3, b=6</li><li><strong>最後結束時會將 FP 寫回對應 AP 之內容</strong>, 具 side effect(砍掉前，將最後的值抓回)。Ans: a=3, b=6</li></ol><ul><li>Ex2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a &#x3D; 4, b &#x3D; 6;</span><br><span class="line">    fun(a, b, a+b);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void fun(int x, int y, int z)</span><br><span class="line">&#123;</span><br><span class="line">    x &#x3D; 7;</span><br><span class="line">    y &#x3D; 10;</span><br><span class="line">    int t &#x3D; z * z;</span><br><span class="line">    printf(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>問採 1. call by name? 2. call by address?<br><strong>Sol:</strong></p><ol><li>87, 需注意 <code>a+b*a+b</code>先乘除後加減</li><li>100</li></ol><ul><li>Note:<br>採 <code>call by-address</code> 時, 若有運算式, 則此採 <strong>call by-value</strong> 來接收<br><code>call by-reference</code> 一般而言相同, 但在 c++ 中, 2 者完全不同<br><code>call by-name</code> 多做一件事, 所以居中</li></ul><h2>結構化程式三要求 Structure Programming Language SPL</h2><p>三要素：</p><ol><li>循序 sequential<br>指令會依序一一往下執行</li><li>選擇 selective/conditional<br>利用 &quot;判別式&quot; 來決定接下來的執行步驟為何<br><code>if...else...</code><br><code>switch...case...</code></li><li>重複 repeat/iteractive<br>利用 &quot;loop&quot; 來反覆執行部分的 step<br><code>for loop</code><br><code>while</code><br><code>do...while</code></li></ol><ul><li>SPL 中避免使用 &quot;跳躍&quot; 指令或動作<br><code>jump</code>, <code>goto</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 程式介紹 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Structure Programming Language </tag>
            
            <tag> OOP </tag>
            
            <tag> Call by value </tag>
            
            <tag> Call by address </tag>
            
            <tag> Call by name </tag>
            
            <tag> Call by value result </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter4-系統程式-part2</title>
      <link href="/repository/2021/07/02/Chapter4-%E7%B3%BB%E7%B5%B1%E7%A8%8B%E5%BC%8F-part2/"/>
      <url>/repository/2021/07/02/Chapter4-%E7%B3%BB%E7%B5%B1%E7%A8%8B%E5%BC%8F-part2/</url>
      
        <content type="html"><![CDATA[<h1>4 系統程式 (System Program)</h1><hr><h2>補充 - Linking 的種類</h2><ul><li>Static Linking (like MACRO)</li><li>Dynamic Linking (like Subroutine)</li></ul><h3>Static Linking</h3><ul><li>指在 linking 時會將外部參考的函式皆搬到程式中, 成為程式的一部份, 故<strong>程式將較佔 space, 但後續執行不需去呼叫外部函式</strong></li><li>巨集 =&gt; 程式碼被撐大</li><li>Static Linking =&gt; 執行檔會被撐大</li><li>圖：<img src="staticLinking.png" alt=""></li></ul><h3>Dynamic Linking</h3><ul><li>Linking 時, 只將外部參考和外部函式所在做繫結, 不將外部函式載入, 故執行時在動態呼叫之</li><li>Ex: .dll =&gt; Dynamic Linking Library</li></ul><h3>Compare</h3><table><thead><tr><th>Static Linking</th><th>Dynamic Linking</th></tr></thead><tbody><tr><td>可執行檔較大</td><td>較小</td></tr><tr><td>不需外部呼叫 =&gt; 快</td><td>需要 =&gt; 慢</td></tr><tr><td>若外部程式改 =&gt; 需 relinking</td><td>不需</td></tr><tr><td>不受外在影響 =&gt; 較安全</td><td>受影響 (駭客可以改, 由於動態呼叫, 因此會被影響) =&gt; 較不安全</td></tr></tbody></table><h2>P-code compiler</h2><ul><li>Def: 為 pesudo-machine 之 object code<ul><li>類似中間碼</li><li>與機器獨立</li><li>高可攜性 =&gt; <strong>具跨平台 cross platform</strong></li></ul></li><li>圖：<img src="p-code.png" alt=""></li><li>優點：只要機器上有 P-code interpreter 即可執行 =&gt; 具可攜性</li><li>缺點：P-code 使用 interpreter 執行, 所以執行速度較慢</li><li>中間碼：類似目的碼, 由 0, 1 組成, 但和機器獨立</li></ul><h2>Java-compiler</h2><p><img src="java-compiler.png" alt=""></p><h2>JVM - Java Virtual Machine</h2><p><img src="jvm.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 系統程式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Program </tag>
            
            <tag> Static Linking </tag>
            
            <tag> Dynamic Linking </tag>
            
            <tag> P-code Compiler </tag>
            
            <tag> Java Compiler </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter4-系統程式-part1</title>
      <link href="/repository/2021/07/02/Chapter4-%E7%B3%BB%E7%B5%B1%E7%A8%8B%E5%BC%8F-part1/"/>
      <url>/repository/2021/07/02/Chapter4-%E7%B3%BB%E7%B5%B1%E7%A8%8B%E5%BC%8F-part1/</url>
      
        <content type="html"><![CDATA[<h1>4 系統程式 (System Program)</h1><hr><h2>Software License</h2><table><thead><tr><th>Software Licence</th><th>Def</th><th>licence</th><th>Open source code</th><th>Ex</th></tr></thead><tbody><tr><td><strong>Trial software</strong></td><td>試用一段時間, 若欲長期使用需付費</td><td>Yes</td><td>No</td><td>ACDSee</td></tr><tr><td><strong>Shareware</strong></td><td>同上, 但限制較寬鬆</td><td>Yes</td><td>No</td><td>WinRAR</td></tr><tr><td><strong>Freeware</strong></td><td>free</td><td>Yes</td><td>No</td><td>IE, MSN</td></tr><tr><td><strong>Public domain</strong></td><td>free</td><td>No</td><td>No</td><td>X</td></tr><tr><td><strong>Open software</strong></td><td>free</td><td>No</td><td>Yes</td><td>Redhat, Open Office</td></tr></tbody></table><h2>Open Source Software</h2><p>Def:</p><ul><li>指沒有 licence 限制, 可 free 使用, 且可拿到程式碼</li><li><strong>從 Open source 取得的程式, 修改後亦無 licence 所屬也為 Open source</strong></li></ul><h2>System Program</h2><h3><strong>Assembler (組譯器)</strong></h3><ul><li>Def: 將組合語言轉成 object code (<strong>目的碼, 為機器可識別之程式</strong>), 以便系統執行之</li><li>圖：<img src="assembler.png" alt=""></li></ul><h3><strong>Linker/Loader (鏈結器/載入器)</strong> =&gt; linking loader</h3><ul><li>欲將 object code 載入 memory 中, 過程需<ol><li><strong>linking (連結)</strong>: 將 object code 中的外部參考之宣告, 正式跟外部函式庫鏈結</li><li><strong>relocation (重定址)</strong>: 將程式中參考位址依實際 memory 所在重新計算其實際的位址</li><li><strong>loading (載入)</strong>: 正式將上述完成之 object code 載入 memory 中</li></ol></li></ul><h3><strong>Compiler (編譯器)</strong></h3><ul><li>Def: 將高階語言 (c, c++) 轉成低階的 object code</li><li>圖：<img src="compiler.png" alt=""></li><li>Compiler 過程：<ol><li>Lexical Analysis</li><li>Syntax Analysis</li><li>Semantic Analysis</li><li>Intermediate Code Optimization</li><li>Machine Dependent Code Generation and Optimization</li><li>Generate the Object Code<br>1.~ 4. =&gt; <strong>Machine Independent</strong><br>5.~ 6. =&gt; <strong>Machine Dependent</strong></li></ol></li><li>Lexical Analysis 語彙分析<ul><li>Scan the program and find out the token (語彙單元)<ol><li><strong>Terminal Symbol (終端符號)</strong> =&gt; keyword, 保留字</li><li><strong>Identifier (識別字)</strong> =&gt; 變數</li><li><strong>Liferal (常數)</strong> =&gt; 文, 數字</li></ol><ul><li>Ex: int(1) x(2) = (1) 20(3);(1)</li></ul></li><li>圖：<img src="lexical.png" alt=""></li></ul></li><li>Syntax Analysis 語法分析<ul><li>Def: 判別程式敘述是否合乎文法 (Grammer)<ul><li>合乎：建立出 <strong>parsing tree 或 syntax tree</strong></li><li>不合乎：output syntax tree</li></ul></li><li>圖：<img src="syntax.png" alt=""></li><li>文法 (Grammer)<ul><li>Note: 剖析工具: parser (剖析器)</li><li>Def: <code>G = &lt;N, T, P, S&gt;</code><ul><li>N: Non-terminal symbol set (非終端)</li><li>T: Terminal symbol set (終端)</li><li>P: Production rules (推衍規則)</li><li>S: Start symbol (S ∈ N) (起始)</li></ul></li><li>Ex:<br><code>G = &lt;N, T, P, S&gt;</code>, <code>N = {s, A, B}</code>, <code>T = {a, b}</code>,<br><code>P = {S -&gt; A|B; A -&gt; aA|a; B -&gt; bB|b;}</code> (-&gt; 為推衍符號),<br><code>S = s ∈ N</code> (S 為起始符號, s 為起始符號的名稱), 問 abaa, aaa 是否合乎文法？<br><strong>Sol:</strong><ol><li>S -&gt; A -&gt; aA -&gt; 此無法推出 b, 故不合乎文法</li><li>S -&gt; A -&gt; aA -&gt; aaA -&gt; aaa, 可推論出, 故合乎文法</li></ol></li></ul></li><li>Parsing tree 剖析樹<ul><li>Def: 剖析文法敘述所建立之樹</li><li>作法:<ul><li>N 必為 Tree 中的非終端節點 (degree ≥ 1)</li><li>T 必為 Tree 中的終端節點 (degree = 0)</li></ul></li><li>Ex:<br><code>G = &lt;N, T, P, S&gt;</code>, <code>N = {E, T, F}</code>, <code>T = {+, -, *, /, id (,)}</code>,<br><code>P = {E -&gt; E+T|E-T|T; T -&gt; T*F|T/F|F; F -&gt; id|(E);}</code>, <code>S = E ∈ N</code>,<br>問<ol><li>id + id * id 合法建立剖析樹</li><li>id * (id - id / id)?</li></ol><ul><li>Note: 括號 &quot;()&quot;, 不可以被分割於 2 不同區塊之中<strong>Sol:</strong><br><img src="parsingTree.png" alt=""></li></ul></li></ul></li><li>Syntax tree 語法樹<ul><li>目的：<ul><li>簡化剖析樹</li><li>只保留 Terminal symbol</li><li>利用中序追蹤可還原運算式</li></ul></li><li>Note: <strong>括號不需考慮</strong> (因為已有 priority 之考量)</li></ul></li><li>文法種類<table><thead><tr><th>Note</th><th>Type</th><th>別名</th><th>自動機</th></tr></thead><tbody><tr><td><strong>自由度最大</strong></td><td>0</td><td>Unrestricted (不受限) grammer (AI)</td><td>Turing Machine (杜林機)</td></tr><tr><td><strong>如變數的宣告</strong></td><td>1</td><td>Context-sensitive (上下文相關) grammer</td><td></td></tr><tr><td><strong>高階語法</strong></td><td>2</td><td>Context-free (上下文無關) grammer</td><td></td></tr><tr><td></td><td>3</td><td>Regular grammer</td><td></td></tr></tbody></table></li></ul></li><li>Semantic Analysis 語意分析<ul><li>目的：依剖析結果, 呼叫對應的 semantic routine 或 action routine 以產生 <strong>intermediate code (中間碼)</strong> (<strong>類似目的碼一樣由 0, 1 組成, 但和機器獨立謂之</strong>)</li><li>圖：<img src="semantic.png" alt=""></li></ul></li><li>Intermediate Code Optimization 中間碼最佳化<ul><li>目的：<ol><li>精簡中間碼</li><li>所佔用 space 下降</li><li>效益提高</li></ol></li><li>常用技巧：<ol><li>刪除共通運算式<br><code>A = B + C * D + 2</code><br><code>F = 5 + (B + C + D) / 3</code><br>令 B, C, D 皆不變<br>α = B + C * D</li><li>先求出常數運算<br>Ex: <code>A = 3.14 * 2.56 / 3.2 + 8 - E</code><br>求 α = 3.14 * 2.56 / 3.2 + 8</li><li>布林運算式最佳化<ul><li>Ex1: if (A and B), A B 皆為 Condition (條件式)<br>若 A = false, B 不做 =&gt; 結果必為 false</li><li>Ex2: if (A or B), 若 A = true, B 不做 =&gt; 結果必為 True</li><li>Note: 此概念為：<ul><li>短路：short-circuit</li><li>又稱 <strong>&quot;捷徑運算&quot;</strong></li></ul></li></ul></li></ol></li></ul></li><li>程式中常見的 error<br><img src="error.png" alt=""></li></ul><h3><strong>Interpreter (直譯器)</strong></h3><ul><li>Def:<ul><li>不事先將 source code 轉成 object code</li><li>直接拿 source code 執行, 依原始程式 logical 順序進行</li><li>執行期間 interpreter 須留在 memory 之中</li></ul></li><li>圖：<img src="interpreter.png" alt=""></li></ul><h3>Compare Compiler vs Interpreter</h3><table><thead><tr><th>Compiler</th><th>Interpreter</th></tr></thead><tbody><tr><td>執行不需於 memory 中</td><td>需要</td></tr><tr><td>會事先產生 object code (<strong>有最佳化, 故效益佳</strong>)</td><td>不會, 直接依 logical 執行, 產生結果</td></tr><tr><td>全部 scan, 故比較沒有漏洞</td><td>較易有漏洞</td></tr><tr><td>修改 =&gt; recompile (彈性差)</td><td>不需 recompile (彈性佳)</td></tr><tr><td>開發時期較不適用</td><td>適用</td></tr><tr><td>找 bug 較不易</td><td>較易找到 bug 所在</td></tr><tr><td>初學者較不易</td><td>初學者較易上手</td></tr></tbody></table><hr><h3>Macro 巨集</h3><ul><li>Def: 開放式副程式 (Open subroutine)<br>將一連串的指令定義為巨集指令, 當 source code 轉換時, 遇到巨集呼叫, 就將對應的連串指令插入於呼叫處</li><li>圖：<img src="macro.png" alt=""></li><li>特性：<ol><li>巨集呼叫於<strong>程式轉換</strong>期間, 而非 <strong>runtime</strong></li><li>呼叫 Ｎ 次, 需插入巨集本文 N 次 =&gt; <strong>浪費空間</strong></li><li>執行階段, 不需做控制移轉 =&gt; <strong>快</strong></li><li>多此使用一單獨定義的常式 (定義一次, 可使用多次)</li></ol></li></ul><h3>Subroutine 副程式 =&gt; 又稱 close subroutine</h3><ul><li>Def: 於<strong>執行中</strong>, 當 subroutine 被呼叫才<strong>動態</strong>的去呼叫之, 並將資料及控制權移轉給他, 待完成, 再移轉回來</li><li>優點：只佔用一份 memory =&gt; 省 space</li><li>缺點：需做控制權移轉 =&gt; speed 下降</li></ul><h3>Compare Macro vs Subroutine</h3><table><thead><tr><th>MACRO</th><th>Subroutine</th></tr></thead><tbody><tr><td>Speed 快</td><td>Speed 慢</td></tr><tr><td>以空間換時間</td><td>以時間換空間</td></tr><tr><td>space 浪費</td><td>space 省</td></tr></tbody></table><h2>Summary</h2><p><img src="summary.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 系統程式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Program </tag>
            
            <tag> Software </tag>
            
            <tag> Assembler </tag>
            
            <tag> Linker/Loader </tag>
            
            <tag> Compiler </tag>
            
            <tag> Interpreter </tag>
            
            <tag> Marco </tag>
            
            <tag> Subroutine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-磁碟管理-part3</title>
      <link href="/repository/2021/07/02/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A3%81%E7%A2%9F%E7%AE%A1%E7%90%86-part3/"/>
      <url>/repository/2021/07/02/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A3%81%E7%A2%9F%E7%AE%A1%E7%90%86-part3/</url>
      
        <content type="html"><![CDATA[<h1>3.9 磁碟管理 (Disk Management)</h1><h2>目錄</h2><ul><li>Free space management<ul><li>Link list</li><li>Combination</li><li>Counting</li></ul></li><li>Allocation Method (配置方法)<ul><li>連續性配置 (contiguous allocation)</li><li>鏈結式配置 (linked allocation)<ul><li>FAT (file allocation table)</li></ul></li><li>索引配置 (index allocation)<ul><li>i-node</li></ul></li></ul></li><li>Disk structure**</li><li>Disk access time**</li><li>Disk scheduling**<ul><li>FCFS</li><li>SSTF</li><li>SCAN</li><li>C-SCAN</li><li>LOOK</li><li>C-LOOK</li></ul></li><li>補充</li><li><strong>RAID</strong></li><li><strong>RAID 的種類</strong><ul><li><strong>RAID1</strong></li><li><strong>RAID0+1</strong></li><li><strong>RAID2</strong></li><li><strong>RAID3 vs RAID4</strong></li><li><strong>RAID5</strong></li><li><strong>RAID6</strong></li></ul></li><li><strong>Summary</strong></li></ul><hr><h2>RAID Redundant Array of Independent Disks 磁碟陣列</h2><ul><li>Why RAID?<ol><li><strong>CPU 和 disk I/O 速度不對等</strong></li><li>資料安全性, 可靠性議題</li></ol></li><li>Solution:<ul><li>採用 &quot;<strong>data striping</strong>&quot; 資料切割：指將 data 分成幾個等分, 同時存到不同 disk 之中, <strong>以達平行 I/O 之效</strong></li></ul></li><li>RAID:<ul><li>Def: 指將多顆 physical disk, 組成一顆 logical disk 之後, 以達提高 I/O 效能跟增加資料的可靠性</li><li>圖：<img src="RAID.png" alt=""></li></ul></li></ul><h2>RAID 的種類</h2><ol><li><strong>RAID 0 (striping RAID)</strong></li></ol><ul><li>以效能導向</li><li><strong>速度最快的 RAID</strong></li><li><strong>沒有 fault tolerant</strong></li><li>Cost 低</li><li>至少需 2 顆 disk</li><li>圖：<img src="RAID0.png" alt=""></li></ul><ol start="2"><li><strong>RAID 1 (mirror RAID)</strong></li></ol><ul><li>至少有 ≥ 2 顆 disk 存相同的 data</li><li>具 <strong>fault tolerant</strong> 特色</li><li>Cost 高 (浪費一半 space)</li><li>Read 效益不佳, write 較差</li><li>至少需 2 顆 disk (資料保護)</li><li>圖：<img src="RAID1.png" alt=""></li></ul><ol start="3"><li><strong>RAID 0+1 (01) speed 快 &gt; RAID 10</strong></li></ol><ul><li>兼具 speed up + fault tolerant</li><li>Cost 極高</li><li>至少需 4 顆 disk</li><li>補充：RAID 1+0 (10)<ul><li>先做 mirror, 在做 striping</li><li>相較下, 此種方法可靠性更佳, 故現在較常用此</li></ul></li><li>圖：<img src="RAID01.png" alt=""></li></ul><ol start="4"><li><strong>RAID 2</strong> (被 RAID 3 ~ 5 取代)</li></ol><ul><li>採用 &quot;ECC&quot; (Error Correcting Code) 技術, 達容錯效果</li></ul><ol start="5"><li><strong>RAID 3 vs RAID 4</strong>|RAID 3|RAID 4||--|--||以 &quot;bit&quot; 為切割單位 (太頻繁)|以 &quot;block&quot; 為單位||效能較差|效能較好|</li></ol><ul><li>共同特色：<ul><li>採 <strong>parity check</strong> 做 data 的可靠性機制</li><li>會有一顆專門放 parity 的 disk =&gt; <strong>會成為效能上的瓶頸</strong></li><li>同時允許一顆 disk 損壞依舊可以復原</li></ul></li><li>圖：<img src="RAID3&amp;4.png" alt=""></li></ul><ol start="6"><li><strong>RAID 5</strong> =&gt; 同 RAID 4, 但將 parity data 平均在各 disk 之上</li></ol><ul><li>圖：<img src="parityData.png" alt=""></li><li>小比較：<table><thead><tr><th>RAID</th><th>Speed</th><th>單位</th><th>parity data</th></tr></thead><tbody><tr><td>3</td><td>慢</td><td>bit</td><td>集中</td></tr><tr><td>4</td><td>中</td><td>block</td><td>集中</td></tr><tr><td>5</td><td>快</td><td>block</td><td>分散</td></tr></tbody></table></li></ul><ol start="7"><li><strong>RAID 6</strong></li></ol><ul><li>採 &quot;parity check&quot; + &quot;read soloman code&quot; =&gt; 可允許同時 2 顆 disk 損壞, 仍可恢復</li><li><strong>可靠性優於 RAID 3 ~ 5</strong></li></ul><h2>Summary</h2><table><thead><tr><th>RAID</th><th>至少 disk 數</th><th>Speed</th><th>Cost</th></tr></thead><tbody><tr><td>0</td><td>2</td><td>快</td><td>低 -&gt; striping</td></tr><tr><td>1</td><td>2</td><td>慢</td><td>高 -&gt; mirror</td></tr><tr><td>0+1</td><td>4</td><td>快</td><td>最高</td></tr><tr><td>3</td><td>3</td><td>居中</td><td>居中 -&gt; parity check</td></tr><tr><td>4</td><td>3</td><td>居中</td><td>居中 -&gt; parity check</td></tr><tr><td>5</td><td>3</td><td>居中</td><td>居中 -&gt; parity check</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Disk Management </tag>
            
            <tag> RAID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-磁碟管理-part2</title>
      <link href="/repository/2021/07/02/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A3%81%E7%A2%9F%E7%AE%A1%E7%90%86-part2/"/>
      <url>/repository/2021/07/02/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A3%81%E7%A2%9F%E7%AE%A1%E7%90%86-part2/</url>
      
        <content type="html"><![CDATA[<h1>3.9 磁碟管理 (Disk Management)</h1><h2>目錄</h2><ul><li>Free space management<ul><li>Link list</li><li>Combination</li><li>Counting</li></ul></li><li>Allocation Method (配置方法)<ul><li>連續性配置 (contiguous allocation)</li><li>鏈結式配置 (linked allocation)<ul><li>FAT (file allocation table)</li></ul></li><li>索引配置 (index allocation)<ul><li>i-node</li></ul></li></ul></li><li><strong>Disk structure</strong></li><li><strong>Disk access time</strong></li><li><strong>Disk scheduling</strong><ul><li><strong>FCFS</strong></li><li><strong>SSTF</strong></li><li><strong>SCAN</strong></li><li><strong>C-SCAN</strong></li><li><strong>LOOK</strong></li><li><strong>C-LOOK</strong></li></ul></li><li><strong>補充</strong></li><li>RAID</li><li>RAID 的種類<ul><li>RAID1</li><li>RAID0+1</li><li>RAID2</li><li>RAID3 vs RAID4</li><li>RAID5</li><li>RAID6</li></ul></li><li>Summary</li></ul><hr><h2>Disk structure</h2><ul><li>圖：<img src="diskStructure.png" alt=""></li><li>track 的水平集合 =&gt; surface (磁面)</li><li>track 的垂直集合 =&gt; cylinder (磁柱) 圓柱體</li><li>順序 小 -&gt; 大 =&gt; sector &lt; cluster &lt; track &lt; {surface, cylinder}</li><li>Ex: cylinder = 10, tracks = 20<ul><li>each track has 320 sector</li><li>each sector 的 size = 512 bytes<br>What's the disk total size?<br>Sol:<br><code>10 * 20 * 320 * 512 bytes</code><br><code>= 32000 KB</code><br>約等於 32 MB</li></ul></li></ul><h2>Disk access time</h2><ul><li><p>由下列組成：</p><ol><li>Seek time 搜尋時間：將 Header (讀寫頭) 移到指定的 Track 上方 (最耗時)</li><li>Rotation time 旋轉時間 (Latency 延遲)：將 data 轉到 Header 的下方 (耗時 中等)</li><li>Transfer time 傳輸時間：正式由 Header 讀取 data 做 disk  &lt;-&gt; Memory 傳輸 (耗時 小)</li></ol></li><li><p>Ex: seek time 平均需 8ms, 而 disk 為 7200RPM(轉), 問平均 disk access time = ?<br>RPM = Rotate Per Minute: 7200/60 = 120/secSol:<br>seek time + rotate (平均) = 8ms + 1/120 sec * 1/2 = 8ms + 1/240 sec<br><img src="Ex.png" alt=""></p></li></ul><h2>Disk Scheduling</h2><ul><li>Def: 指當有多個 access request, 在不同的 disk 之上, 則 Header 之移動服務順序為何</li><li><strong>策略採 &quot;Disk Scheduling algorithm&quot;</strong><ol><li><strong>FCFS (FIFO) (First Come First Service)</strong><ul><li>Ex: track 0~99, header = 15, access request - 81, 47, 90, 18, 5<br>Sol: <img src="FCFS.png" alt=""></li></ul></li><li><strong>SSTF (Shortest Seek Time First)(不見得為最佳解)</strong><ul><li>Ex: <img src="SSTF.png" alt=""></li></ul></li><li><strong>SCAN (掃描法)</strong>: 來回於兩端移動, 遇到 access request 即停下來服務之</li><li><strong>C-SCAN</strong> =&gt; 同 SCAN, 但 &quot;單向服務&quot;<ul><li>圖：<img src="C-SCAN.png" alt=""></li></ul></li><li><strong>LOOK</strong>: 跟 SCAN 相似, 但<strong>不見得碰底, 沒服務則往回走</strong><ul><li>較有效率, 但也就較複雜, 需額外空間處理</li><li>圖：<img src="LOOK.png" alt=""></li></ul></li><li><strong>C-LOOK</strong>: 同 LOOK, 但 &quot;單向服務&quot;<ul><li>圖：<img src="C-LOOK.png" alt=""></li></ul></li></ol></li></ul><h2>補充</h2><table><thead><tr><th>說明</th><th>傳統 (IDE, SCSI, SATA)</th><th>固態硬體 SSD(Solid State Drive)</th></tr></thead><tbody><tr><td>比較 1</td><td>Header 採機械式移動 =&gt; 慢 (seek 是 sequential)</td><td>採用 &quot;電子式&quot; =&gt; 快 (random access)</td></tr><tr><td>比較 2</td><td>抗震性差</td><td>抗震性佳 =&gt; 適用於行動裝置上</td></tr><tr><td>比較 3</td><td>成本低</td><td>成本高</td></tr><tr><td>比較 4</td><td>容量高</td><td>容量小</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Disk Management </tag>
            
            <tag> Disk structure </tag>
            
            <tag> Disk scheduling </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-磁碟管理-part1</title>
      <link href="/repository/2021/07/02/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A3%81%E7%A2%9F%E7%AE%A1%E7%90%86-part1/"/>
      <url>/repository/2021/07/02/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A3%81%E7%A2%9F%E7%AE%A1%E7%90%86-part1/</url>
      
        <content type="html"><![CDATA[<h1>3.9 磁碟管理 (Disk Management)</h1><h2>目錄</h2><ul><li><strong>Free space management</strong><ul><li><strong>Link list</strong></li><li><strong>Combination</strong></li><li><strong>Counting</strong></li></ul></li><li><strong>Allocation Method (配置方法)</strong><ul><li><strong>連續性配置 (contiguous allocation)</strong></li><li><strong>鏈結式配置 (linked allocation)</strong><ul><li><strong>FAT (file allocation table)</strong></li></ul></li><li><strong>索引配置 (index allocation)</strong><ul><li><strong>i-node</strong></li></ul></li></ul></li><li>Disk structure</li><li>Disk access time</li><li>Disk scheduling<ul><li>FCFS</li><li>SSTF</li><li>SCAN</li><li>C-SCAN</li><li>LOOK</li><li>C-LOOK</li></ul></li><li>補充</li><li>RAID</li><li>RAID 的種類<ul><li>RAID1</li><li>RAID0+1</li><li>RAID2</li><li>RAID3 vs RAID4</li><li>RAID5</li><li>RAID6</li></ul></li><li>Summary</li></ul><hr><h2>Free Space Management</h2><ol><li><strong>Bit Vector (位元向量)</strong></li></ol><ul><li>圖：<img src="bitVector.png" alt=""></li><li>Def: 給各 block 一個 bit, 當 bit<ul><li>bit = 0, 則 free block</li><li>bit = 1, 則 use</li></ul></li><li>Ex: <code>011001110001</code></li><li>優點：<ol><li>easy to implement</li><li>找連續可用的 block 容易</li></ol></li><li>缺點：當 block 太多, 則 bit vector 不適用</li></ul><ol start="2"><li><strong>Link list (鏈結串列)</strong></li></ol><ul><li>Def: 將 free block 以 link 方式串接</li><li>Ex: <img src="linkList.png" alt=""></li><li>優點：insert / delete free block 容易</li><li>缺點：<ol><li>檔案配置不便</li><li>link broken, data lose</li></ol></li></ul><ol start="3"><li><strong>Combination (組合)</strong></li></ol><ul><li>Def: 將一 Node 給予多個格子合併而成</li><li><img src="combination.png" alt=""></li><li>Ex: <img src="combinationEx.png" alt=""></li></ul><ol start="4"><li><strong>Counting (計數法)</strong></li></ol><ul><li>Def: 在 linked list 中 Node 加入一空間, 放連續 free block 之數量 (<strong>連續的 free block 越多, 串列越短</strong>)</li><li>Ex: <img src="countingEx.png" alt=""></li></ul><hr><h2>Allocation Method (配置方法)</h2><ol><li><strong>連續性配置 (contiguous allocation)</strong></li></ol><ul><li>Def: 檔案大小 = n blocks 時, O.S. 需找到連續 free block ≥ n, 方可配置</li><li>優點：<ol><li>search time 短 =&gt; 因為 data 鄰近度</li><li>support sequential 及 random access =&gt; 處理快</li></ol></li><li>缺點：<ol><li>有 external 碎裂</li><li>檔案大小無法任意擴充</li><li>file size 需事先宣告<br>(2, 3 會導致沒有彈性)</li></ol></li><li><strong>Solution:</strong><ol><li><strong>Repack (壓縮), 但極度耗時</strong></li><li><strong>disk defragmentation 磁碟重組: 將 file 的分配重組, 以求能達:</strong><ul><li>access time 下降 =&gt; 速度快</li><li>連續空間變多 =&gt; 外部碎裂下降</li></ul></li></ol></li><li>圖：<img src="contiguous.png" alt=""></li></ul><ol start="2"><li><strong>鏈結式配置 (linked allocation)</strong></li></ol><ul><li>Def: 檔案大小 = n blocks 時, O.S. 需找到 free block ≥ n, 即可配置</li><li>優點：<ol><li>No external 碎裂</li><li>檔案可以擴充</li><li>file size 不需事先宣告<br>(2, 3 有彈性)</li></ol></li><li>缺點：<ol><li>search time 長 (因為 data 不見得於鄰近處)</li><li>support sequential 較慢, 不支援 random access</li></ol></li><li>圖：<img src="linked.png" alt=""></li><li><strong>FAT (file allocation table)</strong><ul><li>Def:<ul><li>用於 Dos, OS/2 之中</li><li>FAT Stored in the disk, 紀錄各 file block 的 link 關係</li></ul></li><li>Ex: <img src="FATEx.png" alt=""></li><li>Note: windows PC 版用 &quot;NTFS&quot; 格式</li><li>圖：<img src="FAT.png" alt=""></li></ul></li></ul><ol start="3"><li><strong>索引配置 (index allocation)</strong></li></ol><ul><li>Def: 各 file 皆有自己的 index block, 用以指向其 block 對應到 disk block 的編號為何</li><li>Ex: <img src="indexEx.png" alt=""></li><li>優點：結合 Contiguous Allocation &amp; Linked Allocation 的優點 =&gt; speed up 又有彈性</li><li>缺點：<ol><li>index block 需佔用額外空間</li><li>index block 大小不易決定</li></ol></li><li><strong>i-node (unix-like 常用)</strong><ul><li>概念：<img src="i-node.png" alt=""></li><li>說明：<br>1 ~ 12: direct index block (最重要的)<br>13: single indirect index block<br>14: double indirect index block<br>15: triple indirect index block</li><li>Ex:<br>1~10: direct block<br>11: single indirect block<br>12: double indirect block<br>13: triple indirect block<hr>each data block = 4 bytes<br>each index block = 4 k<br>each index size = 4<br>total data size = ?<br><strong>Sol:</strong><br><code>10 * 4 bytes</code> + <code>4k/4 * 4 bytes</code> +<br><code>k * k * 4 bytes</code> + <code>k * k * k * 4 bytes</code><br>= <code>40 bytes + 4kB + 4k^2B + 4k^3B</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Disk Management </tag>
            
            <tag> Free space management </tag>
            
            <tag> Bit vector </tag>
            
            <tag> Linked list </tag>
            
            <tag> Combination </tag>
            
            <tag> Counting </tag>
            
            <tag> Allocation Method </tag>
            
            <tag> FAT </tag>
            
            <tag> i-node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-虛擬記憶體-part2</title>
      <link href="/repository/2021/06/24/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%99%9B%E6%93%AC%E8%A8%98%E6%86%B6%E9%AB%94-part2/"/>
      <url>/repository/2021/06/24/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%99%9B%E6%93%AC%E8%A8%98%E6%86%B6%E9%AB%94-part2/</url>
      
        <content type="html"><![CDATA[<h1>3.8 虛擬記憶體 (Virtual Memory)</h1><ul><li>目的：允許 program size &gt; physical memory size, 而程式仍能執行</li><li>作法：(部分載入) =&gt; <strong>有需要才載入</strong><br>方法：<br>1. Dynamic Loading =&gt; 為 <strong>programmer</strong> 的負擔<br>2. Virtual Memory =&gt; 為 <strong>O.S.</strong> 的負擔</li></ul><h2>目錄</h2><ul><li>Dynamic Loading 動態載入</li><li>Virtual Memory</li><li>Virtual Memory Definition</li><li><strong>Virtual Memory實施方式</strong><ul><li><strong>Demand Paging</strong></li><li><strong>Demand Segment</strong></li><li><strong>Page Fault 處理</strong></li><li><strong>Virtual Memory Performance 評估</strong><ul><li><strong>P 的影響因素</strong><ol><li><strong>frame 數量</strong></li><li><strong>page size 大小</strong></li><li><strong>Program Structure</strong></li><li><strong>Page Replacement algorithm</strong><ol><li><strong>FIFO</strong></li><li><strong>OPT</strong></li><li><strong>LRU</strong></li><li><strong>LRU 近似法則</strong></li><li><strong>Frequency of reference</strong></li></ol></li></ol></li></ul></li><li><strong>Demand Paging 的問題：「Thrashing」猛移/輾轉</strong><ul><li><strong>防止 Thrashing 作法</strong></li></ul></li></ul></li></ul><hr><h2>Virtual Memory 實施方式</h2><ol><li>Demand Paging<ul><li>Def:<ul><li>執行初期只載入部分的 page (有需要, 才載入)</li><li>當遇到 &quot;所需 page 不在 memory 之中&quot;, 則通知 O.S. 做 **page fault (頁面缺失)**處理, <strong>將 lose page 載入 memory 之中</strong></li></ul></li><li>作法：<ul><li>在 P.T. 上加入 V/I Bit , 使 memory 可達部分載入之效</li><li><strong>V: Valid (存在 Memory)</strong></li><li><strong>I: Invalid (不存在)</strong></li></ul></li><li>圖：  <img src="demandPaging.png" alt=""></li></ul></li><li>Demand Segment</li></ol><h3>Page Fault 處理</h3><ol><li>產生 page fault interrupt 訊號給系統</li><li>find: 找一 free frame</li><li>swap in: 將 lose page 載入 memory 中</li><li>updates: 改 page table 內容</li><li>將控制權交還 user</li></ol><hr><h2>Virtual Memory Performance 評估</h2><p>=&gt; 由 Memory 存取時間來決定 (effect memory access time)<br>=&gt; <strong><code>(1 - P) x ma + P x PFPT</code></strong></p><ul><li><code>(1 - P) x ma</code> 命中所需<ul><li>1 - P 小較好</li><li>ma 短</li></ul></li><li><code>P x PFPT</code> 沒命中<ul><li>PFPT 長</li><li><strong>結論 P 越低越好</strong></li></ul></li><li>P: page fault ratio</li><li>ma: memory access time (硬體不能改)</li><li>PFPT: page fault processing time (不能改)</li></ul><h3>P 的影響因素為</h3><ol><li>frame 數量<br><img src="P1.png" alt=""></li><li>page size 大小<ul><li>當 page size 越小, 則：</li><li>缺點：<ol><li>Page Table 大小上升</li><li>I/O 次數 上升</li><li>Page fault ratio 上升</li></ol></li><li>優點：<ol><li>內部碎裂下降</li><li>單一 I/O 量 下降</li></ol></li></ul></li><li>Program Structure:<br>=&gt; 說明：program 的設計跟撰寫的 logical 結構亦會影響 P 的大小</li><li><strong>Page Replacement (頁面置換)</strong> algorithm<ul><li>Def: 當 page fault 時, 又系統的 free frame 已無, 則需：<ol><li><strong>挑出一 victim page (V.P)</strong></li><li><strong>將 Victim Page swap out</strong></li><li><strong>將 Lose Page swap in</strong></li></ol></li><li>挑選策略分為：<ol><li><strong>FIFO</strong></li><li><strong>OPT</strong></li><li><strong>LRU</strong></li><li><strong>LRU 近似法則</strong></li><li><strong>Frequency of reference</strong></li></ol></li></ul></li></ol><h4>1. FIFO - First In First Out</h4><ul><li>先到達, 先被置換</li><li>特色：<ul><li>easy to implement</li><li>效益不佳 (page fault ratio 太高, I/O 就多, 效益一定不好)</li><li>有 <strong>Belady's 異常</strong><ul><li>一般：frame 數給越多 =&gt; page fault ratio 下降</li><li>在 Belady's 之下：frame 數給越多 =&gt; page fault ratio 上升</li></ul></li></ul></li><li>Ex: 採 FIFO, 且用 pure demand paging, page fault 幾次？<br><img src="exFIFO.png" alt=""></li></ul><h4>2. OPT (Optimal) 最佳法則</h4><ul><li>Def: 替換掉 <strong>未來長期不用</strong>的</li><li>特質：<ol><li>效益最佳 (因為 page fault ratio 最小)</li><li>No Belady's 異常</li><li>要預測未來不易 (實作困難)</li><li>拿來當作理論的依據</li></ol></li><li>Note: demand paging 載入方式<ul><li>pure =&gt; 不先載入, 一開始會有 page fault</li><li>prepaging =&gt; 做預先載入</li></ul></li><li>Ex: 呈上例才 OPT<br><img src="OPT.png" alt=""></li></ul><h4>3. LRU (Least Recently Used) =&gt; 看過去的歷史 (Stack)</h4><ul><li>Def: 替換<strong>過去</strong>長期不用的 page</li><li>特色：<ol><li>效果不錯</li><li>No Belady's 異常</li><li>需 Hardware Support (大量硬體)</li></ol></li><li>作法：<ol><li>Counting (計數法)<br>紀錄 page 的參考時間, 替換掉最久的 page</li><li><strong>Stack (堆疊法)</strong><br>採 stack 方式, 最近用的於 top 端, 最底層為下次 swap 之 page</li></ol></li><li>Ex: LRU<br><img src="LRU.png" alt=""></li></ul><h4>4. LRU 近似法則</h4><ul><li>Def: 由於 LRU 近 <strong>花費大量的 Hardware</strong>, 故採用 LRU 近似法來模擬 LRU 之效</li><li>作法：<ol><li>Second Chance<ul><li>Def: FIFO + 1 個 Reference Bit (0 =&gt; 沒被參考, 1 =&gt; 有被參考)</li><li>挑選策略：<ul><li><strong>先用 FIFO 找出 page: P</strong></li><li><strong>check page: P</strong><ul><li><strong>若 R.B = 1 =&gt; 改為 0, 往下找</strong></li><li><strong>若 R.B = 0 =&gt; 此為 victim page</strong></li></ul></li></ul></li><li>Ex: <img src="secondChance.png" alt=""></li><li>Special Case:<ul><li>當 R.B 全為 0, 或 R.B 全為 1, 代表 =&gt; 退化成 FIFO (可能有 Belady's)</li></ul></li></ul></li><li>Enhanced Second Chance<ul><li>Def: 將 Second Chance + 1 個 Modification Bit (M.B)(想要讓效能變更快)</li><li>Note: M.B<ul><li>=0, 代表 page 沒有更動過</li><li>=1, 代表 page 有更動過</li></ul></li><li>當 Victim page 之 M.B = 0, 代表內容沒變, 故不需 swap out =&gt; <strong>performance 上升</strong></li><li>圖：<img src="enhanceChance1.png" alt=""></li><li>挑選策略：<img src="enhanceChance2.png" alt=""></li><li>Ex: 問 victim page, 採 second chance 挑, enhanced second chance 挑？<br><img src="LRU%E8%BF%91%E4%BC%BCex.png" alt=""><br>採 second chance 挑 2<br>enhanced second chance 挑 4</li></ul></li></ol></li></ul><h4>5. Frequency of reference</h4><ul><li>紀錄各 page 被參考的次數</li><li>方式：<ol><li>LFU =&gt; 挑參考值最小的當 victim page</li><li>MFU =&gt; 挑參考值最大的當 victim page</li></ol></li></ul><hr><h2>Demand Paging 的問題：「Thrashing」猛移/輾轉</h2><ul><li>Def: 於 demand paging 下, 當 <strong>process frame 不足</strong>產生 page fault 又 <strong>memory 的 frame</strong>亦不足, 此時需搶奪其他 process 的 frame, 導致：<ul><li><strong>CPU utilization 下降</strong></li><li><strong>O.S. 引入更多 process</strong></li><li><strong>Page fault 更嚴重</strong></li><li>圖：<img src="thrashing1.png" alt=""></li></ul></li><li>問：<ol><li>CPU 使用率 10%, How to do ?</li><li>呈上得知 page fault ratio 90%, How to do ?<br>Sol:<ol><li><strong>Multiprogramming Degree 上升 (引入更多 process)</strong></li><li><strong>Multiprogramming Degree 下降 (收回一些 process)</strong></li></ol></li></ol></li></ul><h3>防止 Thrashing 作法</h3><ol><li>控制 page fault ratio <strong>合理 range</strong><ul><li>圖：<img src="thrashing2.png" alt=""></li></ul></li><li>採 <strong>Working Set Model</strong>(工作集模式)<ul><li>Def: 利用程式執行時有 **&quot;局部性&quot;**之特性, 將各 process 於此 working set 所需之 frame 加以配置, 避免 Thrashing<ul><li><strong>Locality: 指程式於一特定時間會集中執行部分的區塊, 而不是 uniform 的執行</strong></li></ul></li><li>分：<ul><li>Temporal (時間)<ul><li>ex: loop, subroutine, stack, counter</li><li>用到的不久後還會被用到</li></ul></li><li>Spatial (空間)<ul><li>ex: array, 范紐曼, sequential code</li><li>我被用了, 鄰近的空間很容易也被用到</li></ul></li></ul></li><li>Note:<ul><li>O(某符號): Working Set Window<br>Working set (W.S.) =&gt; 指 O 中不同的 page 之集合<br>Working set size (W.S.S) =&gt; 為 W.S 之大小</li></ul></li><li><strong>判別：令</strong> <img src="thrashing3.png" alt=""><ul><li>n: process 數</li><li>M: physical free frame 的數量</li></ul><ol><li>若 <code>D ≤ M</code> =&gt; 依各 process 的 W.S.S 配置 frames 數量</li><li><code>D &gt; M</code> =&gt; stop 部分 process, go to 1.</li></ol></li><li>Ex:<br>P1: 1 2 2 1 | 3 4 2 2 | 3 4 1 5<br>P2: 2 2 1 3 | 3 3 3 3 | 4 2 4 2<br>P3: 1 2 3 4 | 4 3 3 3 | 3 2 2 1<br>O(某符號) = 4<br>Sol:<br>P1:<br>W.S. = {1, 2}<br>W.S.S = 2<br>P2:<br>W.S. = {1, 2, 3}<br>W.S.S = 3<br>P3:<br>W.S. = {1, 2, 3, 4}<br>W.S.S = 4<br>Total: 9</li><li>優點：<ol><li>防止 Thrashing</li><li>對 Prepaging 很有幫助</li></ol></li><li>缺點：<ol><li>Working set 的追蹤不易</li><li>Working set 之間的 Transfer time 拉長</li></ol></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Virtual Memory </tag>
            
            <tag> Demand Paging </tag>
            
            <tag> Page Fault </tag>
            
            <tag> Virtual Memory Performance </tag>
            
            <tag> FIFO </tag>
            
            <tag> LRU </tag>
            
            <tag> OPT </tag>
            
            <tag> Thrashing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-虛擬記憶體-part1</title>
      <link href="/repository/2021/06/24/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%99%9B%E6%93%AC%E8%A8%98%E6%86%B6%E9%AB%94-part1/"/>
      <url>/repository/2021/06/24/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%99%9B%E6%93%AC%E8%A8%98%E6%86%B6%E9%AB%94-part1/</url>
      
        <content type="html"><![CDATA[<h1>3.8 虛擬記憶體 (Virtual Memory)</h1><ul><li>目的：允許 program size &gt; physical memory size, 而程式仍能執行</li><li>作法：(部分載入) =&gt; <strong>有需要才載入</strong><br>方法：<br>1. Dynamic Loading =&gt; 為 <strong>programmer</strong> 的負擔<br>2. Virtual Memory =&gt; 為 <strong>O.S.</strong> 的負擔</li></ul><h2>目錄</h2><ul><li><strong>Dynamic Loading 動態載入</strong></li><li><strong>Virtual Memory</strong></li><li><strong>Virtual Memory Definition</strong></li><li>Virtual Memory實施方式<ul><li>Demand Paging</li><li>Demand Segment</li><li>Page Fault 處理</li><li>Virtual Memory Performance 評估<ul><li>P 的影響因素<ol><li>frame 數量</li><li>page size 大小</li><li>Program Structure</li><li>Page Replacement algorithm<ol><li>FIFO</li><li>OPT</li><li>LRU</li><li>LRU 近似法則</li><li>Frequency of reference</li></ol></li></ol></li></ul></li><li>Demand Paging 的問題：「Thrashing」猛移/輾轉<ul><li>防止 Thrashing 作法</li></ul></li></ul></li></ul><hr><h2>Dynamic Loading 動態載入</h2><ul><li>執行之初只載入所需的部分頁面</li><li>當 subroutine 被呼叫時, 再將之載入到其他不需用的 subroutine 的所在位址, 以 <strong>覆寫</strong> 利用原 Memory space <strong>=&gt; 為 Overlay 之技巧</strong></li><li>圖：<img src="dynamicLoading.png" alt=""></li></ul><h2>Virtual Memory</h2><ul><li>圖：<img src="virtualMem.png" alt=""></li></ul><h2>Virtual Memory Definition</h2><ul><li><strong>正在執行中</strong>的區塊才載入 Memory</li><li>將 Logical 和 Physical address 分開<strong>且 Logical 可大於 Physical 之 address</strong></li><li>在系統會於 <strong>次儲存媒體</strong>(主要 storage 為 main memory, 次要為 <strong>disk</strong> or CD-ROM)挪用一塊空間模擬(<strong>swap space</strong>)成 Memory</li><li>執行時允許<strong>動態</strong>的 swap in/out</li><li>優點：<ol><li>Program 不受限於 physical memory</li><li>Programmer 可專心寫程式即可</li><li>各 process 佔用 memory space 下降 <strong>=&gt;可列入更多 process, 即 Multiprogramming Degree 上升</strong></li><li>單次 I/O 量下降, 但 I/O 次數上升(缺),存取效能下降(因為需I/O)(缺)</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Virtual Memory </tag>
            
            <tag> Dynamic Loading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-記憶體管理</title>
      <link href="/repository/2021/06/22/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86/"/>
      <url>/repository/2021/06/22/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1>3.7 記憶體管理 (Memory Management)</h1><p>圖：<img src="%E8%A8%98%E6%86%B6%E9%AB%94.png" alt=""></p><hr><h2>Memory Allocation Strategy 記憶體配置策略</h2><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">定義</th><th style="text-align:center">Time</th><th style="text-align:center">Space 使用率</th></tr></thead><tbody><tr><td style="text-align:left">First Fit</td><td style="text-align:left">從頭找, 當 free block size ≥ n, 即可配置</td><td style="text-align:center">佳</td><td style="text-align:center">佳</td></tr><tr><td style="text-align:left">Best Fit</td><td style="text-align:left">從頭到尾, 找出所有符合 free block size ≥ n, 且差異小者</td><td style="text-align:center">差</td><td style="text-align:center">佳</td></tr><tr><td style="text-align:left">Worst Fit</td><td style="text-align:left">從頭到尾, 找出所有符合 free block size ≥ n, 且差異大者</td><td style="text-align:center">差</td><td style="text-align:center">差</td></tr></tbody></table><ul><li>Ex:<img src="allocation.png" alt=""></li></ul><h3>First Fit 的小問題</h3><p>經長期配置後, 前面的片段都會只剩下一小部分, 後續的 search 每次皆須經過<br>=&gt; Solution: 採用 &quot;<strong>Next Fit</strong>&quot;<br>Def: 利用 First Fit 概念, 但會從 <strong>上次配置的下一個節點開始 search</strong></p><h2>Memory 中常發生的問題</h2><ol><li>外部碎裂：External Fragmentation<br>Def: 指 process 所需的 Memory 大小小於 memory 總可用空間, 但卻不能配置 (因為空間不連續, <strong>空間夠但不能給</strong>)<br>Solution:<ol><li>Multiple Base/Limit 暫存器</li><li>Compaction 壓縮</li><li>Page Memory Management 分頁式</li></ol></li><li>內部碎裂：Internal Fragmentation<br>Def: 給予的 Memory 大小較 process 所需空間大 (給太多, 你不用別人也不能用), 造成空間上的浪費<br>Solution:<ol><li>Segment Memory Management 分段式</li></ol></li></ol><h3>Multiple Base/ Limit register set. 多重基底限制暫存器</h3><p><img src="baseLimit.png" alt=""></p><h3>Compaction 壓縮</h3><ul><li><p>圖：<img src="compaction.png" alt=""></p></li><li><p>困難：</p><ol><li>壓縮策略不易制定</li><li>Process 皆需支援 <strong>Dynamic Binding</strong> (只要一 process 不支援, 則無法採用)</li></ol></li></ul><h3>Paged Memory Management 分頁式</h3><ul><li><p>觀念：</p><ol><li>Physical memory 視為一組頁框 (frame) 之集合, <strong>各 frame 大小一致</strong></li><li>Logical memory 視為一組頁面 (page) 之集合, <strong>&quot;page size = 一 frame size&quot;</strong></li></ol></li><li><p>圖：<img src="paged.png" alt=""></p></li><li><p>配置策略：</p><ol><li>Page 間採 &quot;不連續&quot; 存放</li><li>Process 為 n 個 page 時, 當 free frames ≥ n 個即可配置 (No 外部碎裂, 夠就一定可以給)</li><li>O.S. 替各 process 準備一 page table, 存放 <strong>page 跟 frame 之對應</strong></li></ol></li><li><p>例：一 program = 19k, frame size = 4k, 則</p><ol><li>需多少 page?</li><li>內部碎裂 = ?</li><li>Page Table 的 entry size = 4 bytes, 問 Page Table 大小 ?<br>Sol:<ol><li>5 個, 需整數</li><li>5 * 4k = 20k, 20k - 19k = 1k</li><li><code>19k -&gt; page size = 4k</code>, <code>5 * 4 bytes = 20 bytes</code></li></ol></li></ol></li></ul><h4>Logical address 對應 Physical address 的方式</h4><ul><li>圖：<img src="logical%E5%B0%8D%E6%87%89.png" alt=""></li><li>Ex: 8 frames, each frame size = 4, 一 process 的 Page Table 如下：問<ol><li>logical address 7 跟 13 的 physical address = ?</li><li>logical 跟 physical address 表示需幾 bits ?<br>Sol:</li><li><img src="ex%E8%A7%A3%E6%B3%951.png" alt=""></li><li><img src="ex%E8%A7%A3%E6%B3%952.png" alt=""></li></ol></li></ul><h4>Page table 的存放製作方式</h4><ol><li>存 register<ul><li>優點：速度快</li><li>缺點：容量大, 不適用 register 小</li></ul></li><li>存 memory<ul><li>優點：容量大, 適用</li><li>缺點：每次需做 2 次的 memory 存取 (第一次抓 P.T, 第二次抓 data)</li><li>作法： <img src="%E5%AD%98%E6%94%BE2.png" alt=""></li></ul></li><li><strong>TLB 方式 Translation look-aside Buffer</strong><ul><li>由高速的關聯是暫存器組成</li><li>其各個的內容為：<ul><li>key: 存 page number (p)</li><li>value: 存 frame number (f)</li></ul></li><li>只存常用的 p, f 之對應 <strong>(目前執行中的 process 方可存入 TLB 之中)</strong> (當如果只要有 process 更換或做了 context switching, TLB 內容需全部 refresh)</li><li><strong>採 TLB 之 effect memory access time 有效記憶體存取時間</strong><ul><li>公式：<code>h * (ta + ma) + (1 - h) * (ta + 2ma)</code><ul><li><code>h * (ta + ma)</code> 為<strong>命中所需時間</strong></li><li><code>(1 - h) * (ta + 2ma)</code> 為 <strong>沒命中</strong></li><li>h = hit ratio</li><li>ta = TLB access time</li><li>ma = Memory access time</li></ul></li><li>Note: <code>h * (ta + ma) + (1 - h) * (ta + 2ma)</code> =&gt; <strong>4-level page table</strong></li></ul></li></ul></li></ol><h3>Segment memory management 分段式記憶體管理</h3><ul><li>觀念：<ol><li>將 logical memory 視為一組 segment 之集合, <strong>各 segment 大小不一致</strong></li><li>和 user 對 memory 的看法一致, segment 可能是 main, subroutine...等</li></ol></li><li>圖：<img src="segmentManagement.png" alt=""></li><li>配置策略：<ol><li>Segment 之間採不連續性存放</li><li>單一 Segment 採 &quot;連續性&quot;配置 (<strong>有外部碎裂</strong>)</li><li>O.S. 會替各 process 準備一 Segment Table, 其中<ul><li>Base: 存段的起始位址</li><li>Limit: 段的大小</li></ul></li></ol></li></ul><hr><h2>Summary</h2><table><thead><tr><th style="text-align:left">分析</th><th style="text-align:center">Paged</th><th style="text-align:center">Segment</th></tr></thead><tbody><tr><td style="text-align:left">優點</td><td style="text-align:center">No 外部碎裂</td><td style="text-align:center">No 內部碎裂</td></tr><tr><td style="text-align:left">缺點</td><td style="text-align:center">有內部碎裂</td><td style="text-align:center">有外部碎裂</td></tr></tbody></table><ul><li><p><strong>相同點</strong>:</p><ol><li>支援 Memory 共享</li><li>支援 Memory 保護</li><li>支援 dynamic loading, linking, binding (動態繫結, 在執行期間可動態去翻轉記憶體位置)</li><li>需額外的 hardware support</li><li>執行較慢 (因為 logical -&gt; physical address)</li></ol></li><li><p>圖：<img src="summary.png" alt=""></p></li></ul><h2>Compare</h2><table><thead><tr><th style="text-align:center">Paged</th><th style="text-align:center">Segment</th></tr></thead><tbody><tr><td style="text-align:center">No 外部碎裂, 有內部碎裂</td><td style="text-align:center">No 內部碎裂, 有外部碎裂</td></tr><tr><td style="text-align:center">Page size 一致</td><td style="text-align:center">Segment 大小不一致</td></tr><tr><td style="text-align:center">和 user 看法不一致</td><td style="text-align:center">較一致</td></tr><tr><td style="text-align:center">需給單一量的 logical address</td><td style="text-align:center">需給 s, d (2 個量)</td></tr><tr><td style="text-align:center">不需做 d &lt; limit 之 check</td><td style="text-align:center">需 check d &lt; limit</td></tr><tr><td style="text-align:center">Memory 共享, 保護, 較不易</td><td style="text-align:center">較容易</td></tr></tbody></table><hr><h2>Page segment memory management 分頁是分段記憶體管理</h2><ul><li>觀念： 先分段, 在分頁 -&gt; 最終存 page</li><li>圖：<img src="%E5%88%86%E9%A0%81%E5%88%86%E6%AE%B5.png" alt=""></li><li>優點：<ol><li>No 外部碎裂</li><li>單一段可以 &quot;不連續性存放&quot;</li></ol></li><li>缺點：<ol><li>有內部碎裂</li><li>Table size 相當大 (因為 Segment Table 及 Page Table 皆需)</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Memory Management </tag>
            
            <tag> Page Memory Management </tag>
            
            <tag> Segment Memory Management </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-程序間的溝通-part2</title>
      <link href="/repository/2021/06/20/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A8%8B%E5%BA%8F%E9%96%93%E7%9A%84%E6%BA%9D%E9%80%9A-part2/"/>
      <url>/repository/2021/06/20/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A8%8B%E5%BA%8F%E9%96%93%E7%9A%84%E6%BA%9D%E9%80%9A-part2/</url>
      
        <content type="html"><![CDATA[<h1>3.6 程序間的溝通 (Process Communication)</h1><p>又稱為 <strong>inter-process communication</strong> IPC<br>方法有兩種：</p><ol><li>Shared Memory</li><li>Message Passing<br>圖：<img src="3.6.png" alt=""></li></ol><h2>目錄</h2><ul><li>Shared Memory</li><li><strong>Message Passing</strong></li></ul><hr><h2>Message Passing (訊息傳遞)</h2><ul><li>Def: 當 process 之間不易採用 Shared Memory, 則可採 Message Passing</li><li>步驟:<ol><li>先建立雙方連結</li><li>將 Message send 到收方</li><li>待收方處理後將結果接收 (receive)<br><img src="messagePass.png" alt=""></li></ol></li><li>可分為:<ul><li>直接通訊:<ul><li>對稱: 收, 送雙方皆須指名<br>ex: <code>send (process, message), receive (process, message)</code></li><li>非對稱: 送方須指名, 收方不需<br>ex: <code>send (process, message), receive (id, message)</code>, id 為接收後帶入送方的身份</li></ul></li><li>間接通訊:<ul><li>圖: <img src="messagepass2.png" alt=""></li></ul></li></ul></li></ul><ul><li>Ex: 用 Message Passing 解決 Producer (生產者 P1) / Consumer (消費者 P2) 問題 (<strong>直接通訊, 對稱式</strong>)</li></ul><pre><code>// 拿筷子wait (right);wait (left);C.S. // eatingsignal (right);siganl (left);R.S. // 放下筷子</code></pre><p><strong>Hold and wait</strong><br><strong>Circular waiting</strong><br><strong>當同時執行時, 會有 deadlock 現象, 故違反 progress</strong></p><p><strong>流程：... produce item; ...-&gt; 1. send(consumer, item); ...-&gt; 2. receive(producer, item); ...-&gt; 3. consume item;</strong></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> Message Passing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-程序間的溝通-part1</title>
      <link href="/repository/2021/06/20/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A8%8B%E5%BA%8F%E9%96%93%E7%9A%84%E6%BA%9D%E9%80%9A-part1/"/>
      <url>/repository/2021/06/20/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E7%A8%8B%E5%BA%8F%E9%96%93%E7%9A%84%E6%BA%9D%E9%80%9A-part1/</url>
      
        <content type="html"><![CDATA[<h1>3.6 程序間的溝通 (Process Communication)</h1><p>又稱為 <strong>inter-process communication</strong> IPC<br>方法有兩種：</p><ol><li>Shared Memory</li><li>Message Passing<br>圖：<img src="3.6.png" alt=""></li></ol><h2>目錄</h2><ul><li><strong>Shared Memory</strong></li><li>Message Passing</li></ul><hr><h2>Shared Memory 分享記憶體</h2><p>Def: 指多個 process 藉由共用相同的 memory space 達到行程間溝通之效 (Multiprocessor)<br>問題：<strong>Race Condition 競爭情況</strong><br>Def: 相同的運作. 因執行順序不同, 造成處理的結果不同謂之<br>解決：<strong>Critical Section 臨界區間</strong><br>Def: 為一程式片段, 用來提供多 process 共用一 memory space 時的存取控管機制 =&gt; <strong>避免 race conditional</strong></p><h3>Critical Section Design</h3><p>格式：<br><img src="C.S.png" alt=""><br>良好的 C.S Design 需滿足：</p><ol><li>Mutual exclusion (互斥)：指同一時間只允許一個 process 進入 C.S.</li><li>Progress (可進行性)：不想進 C.S. 的 process, 不能影響其他欲進入 C.S. 之 process<ul><li>若有多個 process 欲進入 C.S., 則挑選的時間是有限的 =&gt; <strong>避免 deadlock</strong></li></ul></li><li>Bounded waiting (有限性等待)：指 n 個 process 存在於進入 C.S., 最多只需 wait n-1 次 =&gt; <strong>公平, No starvation</strong></li></ol><h3>C.S. Design 目錄</h3><ul><li>algo<ul><li>2 process =&gt; 3 algos (<strong>turn, flag</strong>)</li><li>2 process =&gt; 1 algos (<strong>turn + flag</strong>)</li></ul></li><li>Semaphore<ul><li>Binary</li><li>Counting</li></ul></li></ul><hr><h3>2 個 process 的 C.S. Design</h3><h4>algorithm1:</h4><ul><li>資料結構 (宣告變數)：<br><code>var turn: integer (0~1);</code></li><li>Pi 之程式片段：<br><img src="algo1.png" alt=""></li><li>分析：<ol><li>滿足 mutual exclusion (互斥)<br>說明：<br>當 Pi, Pj 皆欲進入 C.S., 又 turn 不會同時為 i, j (因為 i 不等於 j), 故只能一個 process 進入 C.S.</li><li>不滿足 progress (可進行性)<br>說明：<br>當 Pj 於 R.S. 中 (因為 j 就是不想上廁所), 但 <code>turn = j</code>, 此時若 Pi 想進入 C.S., 將被卡在 while loop 中無法進入 (因為違反 progress)</li></ol></li></ul><h4>algorithm2:</h4><ul><li><p>資料結構：<br><code>var flag [0...1] of Boolean;</code><br><img src="algo2Data.png" alt=""></p></li><li><p>Pi 之程式片段：<br><img src="algo2.png" alt=""></p></li><li><p>分析：</p><ol><li>滿足 mutual exclusion (互斥)<br>說明：<br>若欲使 Pi, Pj 同時進入 C.S., 則 <code>flag[i] = flag[j] = false</code>, 又當欲進入 C.S. 一開始 flag, 會改為 true, 故上述情況不可能存在</li><li>不滿足 progress (可進行性)<br>說明：<br>當 Pi, Pj 皆欲進入 C.S., 則 <code>flag[i] = flag[j] = true</code>, 此時 2 者皆會卡在 while loop 中 =&gt; deadlock, 故違反 progress</li></ol></li><li><p>中山<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag[i] &#x3D; true;</span><br><span class="line">while (flag[j]) do no-op;</span><br></pre></td></tr></table></figure>若交換上述兩行程式, 會發生什麼事？<br>Ans: 違反互斥性, 變成先問對方在舉手</p></li></ul><h4>algorithm3:</h4><ul><li><p>資料結構：<br><img src="algo3Data.png" alt=""></p></li><li><p>Pi 之程式片段：<br><img src="algo3.png" alt=""></p></li><li><p>分析：</p><ol><li>滿足 mutual exclusion (互斥)<br>說明：<br>當 2 process 皆欲進入 C.S., 則 <code>flag[i] = flag[j] = true</code>, 但 turn 不會同時為 i, j (因為 i 不等於 j), 故只有一 process 可進入 C.S.</li><li>滿足 progress (可進行性)<br>說明：<ul><li>當 Pj 不想進入 C.S., 又 <code>turn = j</code>, 且此時 <code>flag[j] = false</code>, 故當 Pi 想進入, 可以順利通過 while loop</li><li>當 2 process 皆欲進入 C.S., 此時視 turn 的值為 i 或 j, 指向者可進入 C.S., 所以 No deadlock</li></ul></li><li>滿足 Bounded Waiting (有限性等待)<br>說明：<br>當 Pi, Pj 皆欲進入 C.S., 而 <code>turn = j</code>時, 則 Pj 可進入, 若 Pj 離開後立即再度欲進入 C.S., 則：<br><code>flag[j] = true;</code><br><code>turn = i</code><br>因為 <code>turn = i</code>, 故下次必由 Pj 進入 C.S. 中</li></ol></li></ul><hr><h3>多 process 的 C.S. Design =&gt; Bakery's algorithm</h3><ul><li><p>資料結構：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var choosing: Array[0....n-1] of Boolean;</span><br><span class="line">    number: Array[0....n-1] of Integer; (initial 皆為 0)</span><br></pre></td></tr></table></figure></p></li><li><p>數字假設：</p><ol><li><code>(a, b) &lt; (c, d)</code>, if<ol><li><code>a &lt; c</code> or</li><li><code>a = c</code> 且 <code>b &lt; d</code></li></ol></li><li><code>Max(X0...Xn-1)</code> =&gt; 取 X0 ~ Xn-1 中最大值</li></ol></li><li><p>Pi 之程式片段：<img src="%E5%A4%9Aprocess.png" alt=""></p></li></ul><hr><h3>Semaphore (號誌) (可有互斥的效果)</h3><ul><li>Def: 為解決同步問題的一種機制, 本身為一整數型別 (通常初始為 1), <strong>會提供 2 個 atomically execution (不可分割, 指過程中不能被中斷) 的運作</strong><ul><li>signal</li><li>wait</li></ul></li><li>圖：<br><img src="semaphore.png" alt=""></li><li>Note:<br>Semaphore 初始值為 1 時, 則狀態永遠為 0 或 1, 故 Pj 謂之 <strong>Binary Semaphore (二元號誌)</strong></li></ul><h3>Counting Semaphore (計數號誌)</h3><p>Def: 有別於 Binary Semaphore, 於 counting semaphore 之中, 值可能為 1, 0, -1, -2....-n, <strong>若值為 -n, 代表有 n 個 process 卡在 wait 之中</strong><br>=&gt; 製作方式：</p><ol><li>用 Block, wakeup 製作</li><li>用 Binary Semaphore 製作</li></ol><h4>&lt;法一&gt;：用 Block, wakeup 及 Queue 製作</h4><ul><li>作法：將 Semaphore 定義成一 Record (紀錄) (like class)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type countingSemaphore: record</span><br><span class="line">    value: integer; &#x2F;&#x2F;initial &#x3D; 1</span><br><span class="line">    L: Queue;</span><br><span class="line">end;</span><br></pre></td></tr></table></figure></li></ul><p><img src="way1.png" alt=""></p><h4>&lt;法二&gt;：用 Binary Semaphore 製作出 counting semaphore</h4><ul><li>資料結構：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var c: integer; initial &#x3D; 1 &#x2F;&#x2F; 計數器, like value, c 當 signal &amp; wait</span><br><span class="line">    S1: Binary Semaphore; initial &#x3D; 1 &#x2F;&#x2F; 對 C 做存取控制</span><br><span class="line">    S2: Binary Semaphore; initial &#x3D; 0 &#x2F;&#x2F; 用來模擬 block, wakeup 之效</span><br></pre></td></tr></table></figure></li></ul><p><img src="way2.png" alt=""></p><h4>Compare</h4><table><thead><tr><th style="text-align:left">Compare</th><th style="text-align:left">busy waiting (spinlock 盤旋鎖) 製作 counting semaphore (簡單的會使用)</th><th style="text-align:left">Block, wakeup 製作 (複雜的通常用)</th></tr></thead><tbody><tr><td style="text-align:left">優點</td><td style="text-align:left">wait 時不會有 context switching, 若為片刻等待, 適用</td><td style="text-align:left">wait 時不會用至 CPU</td></tr><tr><td style="text-align:left">缺點</td><td style="text-align:left">在 waiting 過程中, 會不斷的耗用 CPU 的資源, 所以浪費 CPU</td><td style="text-align:left">需 context switching</td></tr></tbody></table><hr><h3>思考</h3><p><img src="think.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> Shared Memory </tag>
            
            <tag> Critical Section </tag>
            
            <tag> Semaphore </tag>
            
            <tag> Counting Semaphore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-死結deadlock-part2</title>
      <link href="/repository/2021/06/19/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E6%AD%BB%E7%B5%90deadlock-part2/"/>
      <url>/repository/2021/06/19/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E6%AD%BB%E7%B5%90deadlock-part2/</url>
      
        <content type="html"><![CDATA[<h1>3.5 死結 Deadlock</h1><h2>目錄</h2><ul><li>四要件</li><li><strong>Deadlock 處理方式</strong></li><li><strong>Deadlock Free</strong></li></ul><hr><h2>deadlock 處理</h2><ol><li>Preventation 預防：欲使 deadlock 不會發生<br>作法：大破四要件之一</li><li>Avoidance 避免：利用避免演算法確保資源分配不會產生 deadlock<br>作法：Banker's algo. check 安全否</li><li>Detection &amp; Recovery 偵測, 若有恢復</li></ol><h3>Deadlock Preventation =&gt; 打破四要件之一 (打破其中一個即可)</h3><ol><li><strong>打破 &quot;互斥&quot;</strong></li></ol><ul><li><strong>難達成, 因為此為資源先天的限制</strong>, ex: 印表機</li></ul><ol start="2"><li><strong>打破 &quot;Hold and Wait&quot;</strong> (要就全拿, 不要就都不拿)</li></ol><ul><li>作法 1: process 若無法取得, 所需的所有資源, 則需空手</li><li>作法 2: 提出申請時, 需將手中持有的資源 release</li><li>圖：<img src="%E6%89%93%E7%A0%B4Hold&amp;wait.png" alt=""></li></ul><ol start="3"><li><strong>打破 &quot;No preemptive&quot; =&gt; 將之改為 preemptive</strong></li></ol><ul><li>不建議, 因為資源先天限制, ex: 印表機, 印了 3 行被搶奪</li></ul><ol start="4"><li><strong>打破 Circular Waiting</strong></li></ol><ul><li>作法 1:<ul><li>給予各 resource 一獨立編號</li><li>資源申請須以編號遞增的方式提出</li><li>圖：<img src="%E6%89%93%E7%A0%B4circular1.png" alt=""><img src="%E6%89%93%E7%A0%B4circular2.png" alt=""></li></ul></li><li>反證：令仍然會有 Circular waiting, 假設滿足 2 條件下, 則存在如下的 waiting cycle:<img src="%E5%8F%8D%E8%AD%89.png" alt=""></li></ul><h3>Deadlock Avoidance</h3><ul><li>圖：<img src="deadlockAvoidance.png" alt=""></li><li>Note:<ul><li>Safe state (安全狀態):<br>指可以找到 ≥ 1 組執行順序, 確保所有的 process 皆可執行完畢<br>Ex: 5 process (P0 ~ P4) =&gt; <code>P2-&gt;P4-&gt;P1-&gt;P0-&gt;P3</code></li><li>Unsafe state:<br>指找不到上述一組執行的順序謂之<br>Ex: <code>P2-&gt;P4-&gt;.....?</code></li></ul></li></ul><h4>Avoidance algo.</h4><ul><li><p>資源皆單一量 =&gt; 修改資源分配圖</p></li><li><p>資源非單一量 =&gt; Banker's algo. <code>m * n^2</code>, O(n^2) 效率較佳</p><ul><li>m = 資源種類數 (印表機, disk, 螢幕) , n = process 數量</li></ul></li><li><p>Note: Resource Allocation Graph 資源分配圖<br>Def: 一圖形 G = &lt;V, E&gt;, 其中 V 為頂點, E 為邊</p><ul><li>V 分為：<img src="V.png" alt=""></li><li>E 分為：<img src="E.png" alt=""></li><li>在 Resource Allocation Graph 中的性質<ol><li>當資源皆為單一量 -&gt; 有 cycle, 有 deadlock</li><li>當資源非單一量 -&gt; 有 cycle, &quot;不見得有 deadlock&quot;<ul><li>圖：<img src="resourceAllocate.png" alt=""></li></ul></li></ol></li></ul></li></ul><ol><li>資源皆為單一量的 avoidance algo.<br>於 Resource Allocation Graph 中多加入一種邊 &quot;chian edge&quot; 鏈結邊, Pi...Rj =&gt; 指 Pi 在未來會對 Rj 提出申請<ul><li>判別： <strong>Pi 正式對 Rj 提申請</strong><ol><li>先作暫時性配置<br><img src="PiToRj.png" alt=""></li><li>Check 是否有 cycle<ul><li>有 -&gt; Unsafe</li><li>無 -&gt; Safe</li></ul></li></ol></li><li>Ex: 若 P2 對 R2 正式提出申請, 是否可以？<br>圖：<img src="%E5%96%AE%E4%B8%80%E9%87%8Fex.png" alt=""><br>Sol: 有 cycle, 故 unsafe state, 所以申請駁回 (若 P1 則可以)</li></ul></li></ol><ol start="2"><li>Banker's algo. 題型<br>Ex: 系統有 5 個 process {P0...P4}, 三種 resource {A, B, C}, A = 10, B = 5, C = 7, 令時間 T0 時如下圖, 問若 P1 提出 Request1 = (1, 0, 2), 是否可配置？<br>圖：<img src="%E6%9A%AB%E6%99%82%E6%80%A7%E9%85%8D%E7%BD%AE1.png" alt=""><br>Sol:<ul><li><p>Step 1: Need = Max - Allocation (Need: 指 process i 最多尚需多少資源才能完成工作)</p></li><li><p>Step 2:<br>Request i (1, 0, 2) ≤ Need i (1, 2, 2)<br>Request i (1, 0, 2) ≤ Available i (3, 3, 2)</p></li><li><p>Step 3: 暫時性配置<br>圖：<img src="%E6%9A%AB%E6%99%82%E6%80%A7%E9%85%8D%E7%BD%AE2.png" alt=""></p></li><li><p>找執行順序：P1 -&gt; P3 -&gt; P4 -&gt; P0 -&gt; P2,<br>因為找到執行的順序, 故為 safe state =&gt; <strong>故申請核準</strong></p></li></ul></li></ol><hr><h3>Deadlock detection algo</h3><ul><li>資源皆單一量：<strong>修改資源分配圖 (&quot;Wait-for&quot; graph) =&gt; O(n^2)</strong></li><li>資源非單一量：<strong>deadlock detection algo. =&gt; O(m * n^2)</strong></li></ul><h4>Deadlock detection &amp; recovery (資源皆單一量 =&gt; 採&quot;Wait-for&quot; graph 等候圖)</h4><ul><li>Def: 定期偵測系統是否有 deadlock, 若有則須設法做 deadlock recovery 的動作</li><li>說明: 將 Resource Allocation Graph 中的<br><img src="desc.png" alt=""></li><li>Check: <code>有 cycle =&gt; 有 deadlock</code>, <code>No cycle =&gt; No deadlock</code></li><li>Ex:<img src="deadlockDetection.png" alt=""></li></ul><h4>Deadlock recovery</h4><ul><li>由 user 自己處理</li><li>由系統處理<ul><li>全砍：<ul><li>優點：簡單</li><li>缺點：成本高</li></ul></li><li>一次砍一個：<ul><li>優點：成本低</li><li>缺點：複雜</li></ul></li></ul></li></ul><hr><h2>deadlock free</h2><p>Def: 在此條件下, 系統沒有 deadlock 問題, 故不需對其做處理, <strong>欲滿足 deadlock free</strong>, 則：</p><ol><li>1 ≤ Max i ≤ m (資源數量)</li><li>總和(i=1至n) Max i &lt; m + n (n 為 process 數), <strong>process i 完成工作最多所需的資源數</strong></li></ol><p>Ex:</p><ul><li>6 台印表機 each process 完成工作最多需 ? 台 printer?</li><li>問系統中在 deadlock free 下, 最多可有多少 process ?<br>Sol:</li></ul><ol><li>1 ≤ Max i ≤ m ≥ 1 &lt; <strong>2</strong> ≤ 6</li><li>總和(i=1至n) Max i &lt; m + n ≥ 2n &lt; 6 + n, 所以 n &lt; 6, 故 n 最大為 5</li></ol>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> Deadlock </tag>
            
            <tag> Deadlock free </tag>
            
            <tag> Starvation </tag>
            
            <tag> Preventation </tag>
            
            <tag> Avoidance </tag>
            
            <tag> Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-死結deadlock-part1</title>
      <link href="/repository/2021/06/18/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E6%AD%BB%E7%B5%90deadlock-part1/"/>
      <url>/repository/2021/06/18/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E6%AD%BB%E7%B5%90deadlock-part1/</url>
      
        <content type="html"><![CDATA[<h1>3.5 死結 Deadlock</h1><h2>目錄</h2><ul><li><strong>四要件</strong></li><li>Deadlock 處理方式</li><li>Deadlock Free</li></ul><hr><h2>四要件</h2><ol><li><strong>Mutual Exclusion 互斥</strong><br>Def: 指資源同時只允許一個 process 使用之, ex: printer, card reader</li><li><strong>Hold &amp; Wait 持有並等待</strong><br>Def: 指一 process 取得部分資源, 又在等其他資源<br>圖：<img src="Hold&amp;wait.png" alt=""></li><li><strong>No preemptive</strong><br>Def: 指一旦 process 取得某資源, 則其他的 process 無法搶奪, 除非其自願放棄</li><li><strong>Circular waiting 循環式等待</strong><br>Def: 只存在一組 process, 形成如下的 waiting cycle:<br><img src="circularWaiting.png" alt="">Note: Pi -&gt; Pj =&gt; Process i 在等 Process j 手中的資源</li></ol><ul><li>Ex: 令資源具 Mutual Exclusiion 跟 No preemptive, 則<br><img src="deadlock.png" alt=""></li></ul><hr><h2>Compare</h2><table><thead><tr><th style="text-align:left">Description</th><th style="text-align:left">Deadlock</th><th style="text-align:left">Starvation</th></tr></thead><tbody><tr><td style="text-align:left">定義</td><td style="text-align:left">存在一組 process, 形成 wait cycle, 使 cycle 內之 process 皆不可使用 CPU (因為皆 wait)</td><td style="text-align:left">low priority 的 process 長期或無限期無法取得 CPU</td></tr><tr><td style="text-align:left">影響</td><td style="text-align:left">CPU utilization 跟 throughput 大幅下降</td><td style="text-align:left">不見得</td></tr><tr><td style="text-align:left">起因</td><td style="text-align:left">資源分配不當</td><td style="text-align:left">當有 priority 之分</td></tr><tr><td style="text-align:left">解決</td><td style="text-align:left">deadlock 預防, 避免, 偵測與恢復</td><td style="text-align:left">Aging Tech 老化現象</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> Deadlock </tag>
            
            <tag> Deadlock free </tag>
            
            <tag> Starvation </tag>
            
            <tag> Preventation </tag>
            
            <tag> Avoidance </tag>
            
            <tag> Detection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-行程-part3</title>
      <link href="/repository/2021/06/12/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%A1%8C%E7%A8%8B-part3/"/>
      <url>/repository/2021/06/12/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%A1%8C%E7%A8%8B-part3/</url>
      
        <content type="html"><![CDATA[<h1>3.4 行程</h1><h2>目錄</h2><ul><li>Process Definition</li><li>Program vs Process</li><li>Process STD</li><li>PCB, context switching</li><li>CPU Scheduling algorithm</li><li><strong>Thread 執行緒</strong></li></ul><hr><h2>Thread (執行緒) (為執行的最小單位)</h2><p><img src="processvsthread.png" alt=""></p><h2>Compare process and thread</h2><table><thead><tr><th style="text-align:left">Process</th><th style="text-align:left">Thread</th></tr></thead><tbody><tr><td style="text-align:left">Heavy weight process</td><td style="text-align:left">Light weight process</td></tr><tr><td style="text-align:left">各 process 無法共享：Memory space, O.S. Resource, Files</td><td style="text-align:left">同一 Task 中的 Threads 可共用</td></tr><tr><td style="text-align:left"><strong>Context Switching 重</strong></td><td style="text-align:left"><strong>Context Switching 輕</strong></td></tr><tr><td style="text-align:left">相當於一 Task 中, 只有 single thread</td><td style="text-align:left">有 <strong>multithread</strong> 多執行緒系統</td></tr><tr><td style="text-align:left">較不易發揮</td><td style="text-align:left">在 <strong>Multiprocessor 的架構</strong>, 可充分發揮其效能</td></tr><tr><td style="text-align:left">因為無共享 Memory, 故不需處理 Race condition</td><td style="text-align:left">會共享 Memory, 故須針對 <strong>Race Condition 競爭情況</strong> 作處理</td></tr></tbody></table><hr><h2>Thread (執行緒) 製作方式</h2><ul><li>User level: 由 user-level 自行處理, 藉由執行緒程式庫來對 thread 之運作加以管理, kernel 不需介入</li><li>Kernel level: 由 kernel-level 著手處理 thread 的相關運作<br><img src="thread%E8%A3%BD%E4%BD%9C%E6%96%B9%E5%BC%8F.png" alt=""></li></ul><hr><h2>Compare multitasking and multithreading</h2><p><img src="multitaskingvsmultithreading.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> Process </tag>
            
            <tag> Thread </tag>
            
            <tag> Multitasking </tag>
            
            <tag> Multithreading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-行程-part2</title>
      <link href="/repository/2021/06/12/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%A1%8C%E7%A8%8B-part2/"/>
      <url>/repository/2021/06/12/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%A1%8C%E7%A8%8B-part2/</url>
      
        <content type="html"><![CDATA[<h1>3.4 行程</h1><h2>目錄</h2><ul><li>Process Definition</li><li>Program vs Process</li><li>Process STD</li><li>PCB, context switching</li><li><strong>CPU Scheduling algorithm</strong></li><li>Thread 執行緒</li></ul><hr><h2>CPU Scheduling algorithms</h2><p>=&gt; 針對 <strong>STS</strong> 從 <strong>Ready Queue</strong> 挑出一 process 獲得 CPU 之挑選策略方法</p><ul><li>FIFO</li><li>SJF</li><li>SRJF</li><li>Priority</li><li>RR</li><li>Multilevel Queue</li><li>Multilevel Feedback Queue</li></ul><hr><ol><li><strong>FIFO First-In First-Out</strong><br>Def: 愈先到達 Ready Queue 的 process, 先獲得 CPU</li></ol><ul><li><p>Non-preemptive (不可搶奪)<br>優點：</p><ul><li>公平性 (Fair)</li><li>easy to implement</li><li><strong>No starvation 飢餓</strong><br>Def: 指 low priority 之 process 長期或無限期無法取得 CPU 之服務</li></ul><p>缺點：</p><ul><li>效益不佳 (因為 A.W.T &amp; A.T.T 慢)</li><li>會有 <strong>convoy effect (護衛效應)</strong><br>指多個 process 在 wait 一個需長時間執行之 process =&gt; <strong>造成 A.W.T 大幅上升</strong></li><li>Note:<br>A.W.T: Average Waiting time<br>A.T.T: Average Turnaround time (結束時間)</li></ul></li><li><p>Example: CPU Scheduling algorithms 的衡量準則 (performance criteria 效能準則)<br>Sol:</p><ol><li>CPU utilization -&gt; 看 CPU 使用率</li><li>CPU throughput -&gt; 看 CPU 單位生產量</li><li><strong>Waiting time 等候時間</strong><br>Def: 自 process 交付系統到結束, 總共在 Ready Queue 等了多久</li><li><strong>Turnaround time 回覆時間</strong><br>Def: 自 process 交付系統到結束, 總共需多少時間</li><li>Response time (反應)<br>Def: 指 process 自交付系統到第一次獲得回應的時間 -&gt; <strong>interactive system care about this</strong><br>Note: <code>1. ~ 2.</code> 愈高愈好, <code>3. ~ 5.</code>時間愈短愈好</li></ol></li><li><p>Ex: 採 FIFO,</p><table><thead><tr><th style="text-align:center">Process</th><th style="text-align:center">CPU Burst time (CPU 花費時間)</th><th style="text-align:center">CPU arrive time</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">24</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">3</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">3</td><td style="text-align:center">0</td></tr></tbody></table><p>Sol:<br>A.W.T = <code>(0 + 24 + 27) / 3 = 17</code><br>A.T.T = <code>(24 + 27 + 30) / 3 = 27</code></p></li></ul><ol start="2"><li><strong>SJF (Shortest Job First) 最短工作先做</strong><br>Def: 指所需的 CPU 時間愈短, 愈先獲得 CPU 之服務</li></ol><ul><li><strong>Non-preemptive</strong><br>優點：<ul><li>效益最佳 (A.W.T &amp; A.T.T 短)</li><li>No convoy effect</li><li><strong>適用於 LTS</strong>缺點：</li><li>No fair</li><li>可能會有 <strong>starvation</strong></li><li>不適用於 STS (預測 process 時間耗時) -&gt; 一般拿來當理論依據值</li></ul></li></ul><ol start="3"><li><strong>SRJF (Shortest Remaining Time Job First) 最短剩餘時間工作先做</strong><br>Def: 同 2. , 但為 preemtpive, 且 Context Switching 較重</li></ol><ul><li><p>ex:</p><table><thead><tr><th style="text-align:center">Process</th><th style="text-align:center">CPU Burst time (CPU 花費時間)</th><th style="text-align:center">CPU arrive time</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">8</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">4</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">9</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">5</td><td style="text-align:center">3</td></tr></tbody></table><p>分別採 SJF &amp; SRJF, 求 A.W.T &amp; A.T.T = ?<br><img src="%E6%B5%81%E7%A8%8B.png" alt="">Sol:</p><ol><li>SJF<br><img src="exSJF.png" alt=""><br>A.W.T = <code>(0 - 0 + 8 - 1 + 17 - 2 + 12 - 3) / 4 = 7.75</code><br>A.T.T = <code>(8 - 0 + 12 - 1 + 26 - 2 + 17 - 3) / 4 = 14.25</code></li><li>SRJF<img src="exSRJF.png" alt=""><br>A.W.T = <code>(0 - 0 + 10 - 1 + 1 - 1 + 17 - 2 + 5 - 3) / 4 = 6.5</code><br>A.T.T = <code>(17 - 0 + 5 - 1 + 26 - 2 + 10 - 3) / 4 = 13</code></li></ol></li><li><p>Compare</p><table><thead><tr><th style="text-align:center">Preemptive (SRJF)</th><th style="text-align:center">Non-preemptive scheduling (SJF)</th></tr></thead><tbody><tr><td style="text-align:center">Process 取得 CPU 後, 過程可能被其他 process 將 CPU 搶走</td><td style="text-align:center">一旦 process 取得 CPU, 除非自願放棄, 否則其他process 不能搶</td></tr><tr><td style="text-align:center"><strong>適用於即時, 交談式</strong></td><td style="text-align:center"><strong>對 job 較公平</strong>, <strong>Reponse time 較可預期</strong></td></tr><tr><td style="text-align:center"><strong>Context switching 重 (缺點)</strong></td><td style="text-align:center"><strong>Context switching 輕 (優點)</strong></td></tr><tr><td style="text-align:center"><strong>A.W.T &amp; A.T.T 短 (優點)</strong></td><td style="text-align:center"><strong>A.W.T &amp; A.T.T 長 (缺點)</strong></td></tr></tbody></table></li></ul><ol start="4"><li><strong>Priority Scheduling (優先權排列法則)</strong><br>Def: priority 愈高者, 愈先取得 CPU 之服務</li></ol><ul><li>Special case:<ol><li>Arrive time 越短, Priority 越高 =&gt; FIFO</li><li>CPU Burst time 越短, Priority 越高 =&gt; SJF</li></ol></li><li>又可分為：<ul><li>Preemptive =&gt; 易造成 starvation<ul><li><strong>Solution: 採 &quot;Aging Technique&quot; (老化技術)</strong><br>Def: 指每隔一段時間逐步將 low priority 之 process 的 優先權提高</li></ul></li><li>Non-preemptive =&gt; 當 priority 相同 =&gt; 採 FIFO</li></ul></li><li>Ex: 採 priority 求 A.W.T &amp; A.T.T ?<table><thead><tr><th style="text-align:center">Process</th><th style="text-align:center">CPU Burst time (CPU 花費時間)</th><th style="text-align:center">Priority (編號小, priority 高)</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">10</td><td style="text-align:center">3 No.3</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">1</td><td style="text-align:center">1 No.2</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">2</td><td style="text-align:center">3 No.4</td></tr><tr><td style="text-align:center">P4</td><td style="text-align:center">1</td><td style="text-align:center">4 No.5</td></tr><tr><td style="text-align:center">P5</td><td style="text-align:center">5</td><td style="text-align:center">2 No.2</td></tr></tbody></table>Sol:<br><img src="expriority.png" alt=""><br>A.W.T = <code>(6 + 0 + 16 + 18 + 1) / 5 = 8.2</code><br>A.T.T = <code>(16 + 1 + 18 + 19 + 6) / 5 = 12</code></li></ul><ol start="5"><li><strong>Round-Robin (R.R)</strong></li></ol><ul><li><p>Def: 指輪流給各 process 一固定時間</p><ul><li>時間到就得將 CPU 交由下一個 process 執行</li><li>具下列特色：<ol><li>Fair</li><li>preemptive</li><li>Non-starvation</li></ol></li></ul></li><li><p>Special Case:</p><ol><li>CPU time slice (時間週期) 約等於無限 =&gt; <strong>FIFO</strong></li><li>CPU time slice 極小 =&gt; <strong>CPU Sharing</strong>, <strong>But Context Switching 非常重</strong></li></ol></li><li><p>Ex: 採 R.R time slice = 5, 求 A.W.T &amp; A.T.T ?</p><table><thead><tr><th style="text-align:center">Process</th><th style="text-align:center">CPU Burst time (CPU 花費時間)</th><th style="text-align:center">CPU arrive time</th></tr></thead><tbody><tr><td style="text-align:center">P1</td><td style="text-align:center">8</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">P2</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">P3</td><td style="text-align:center">7</td><td style="text-align:center">6</td></tr></tbody></table><p>Sol:<br><img src="exRR.png" alt="">A.W.T = <code>(0 - 0 + 7 - 5 + 5 - 3 + 10 - 6) / 3 = 8/3</code><br>A.T.T = <code>(10 + 7 - 3 + 17 - 6) / 3 = 25/3</code></p></li></ul><ol start="6"><li><strong>Multilevel Queue (多重佇列)</strong></li></ol><ul><li>Def:<ul><li>將 Ready Queue 拆成多個 Queue</li><li>Queue 之間採 preemptive priority scheduling</li><li>各 Queue 可採用自己的排班法則</li></ul></li><li>優點：可依 process 屬性將之放置到適當的位置</li><li>缺點：此方法下, process 無法於 Queue 之間移動, 故會有 <strong>starvation</strong> 之問題</li><li>圖：<img src="multilevelQueue.png" alt=""></li></ul><ol start="7"><li><strong>Multilevel Feedback Queue (多層回饋佇列)</strong><br>Def: 同 6. , 但 <strong>process 可於 Queue 之間挪動</strong><br>策略：<ol><li>於下層的 process 每隔一段時間往上一層移動</li><li>於上層的 process 不需 CPU 時逐步往下層移動</li></ol></li></ol><hr><ul><li>Summary<img src="summary.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> Process </tag>
            
            <tag> CPU Scheduling </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-行程-part1</title>
      <link href="/repository/2021/06/12/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%A1%8C%E7%A8%8B-part1/"/>
      <url>/repository/2021/06/12/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E8%A1%8C%E7%A8%8B-part1/</url>
      
        <content type="html"><![CDATA[<h1>3.4 行程</h1><h2>目錄</h2><ul><li><strong>Process Definition</strong></li><li><strong>Program vs Process</strong></li><li><strong>Process STD</strong></li><li><strong>PCB, context switching</strong></li><li>CPU Scheduling algorithm</li><li>Thread 執行緒</li></ul><hr><h2>Process Definition</h2><p>執行中的程式 (即：程式碼 + 當前執行環境)</p><ul><li>執行環境為：<ul><li>CPU register 暫存器</li><li>Programming counter 程式計數器</li><li>Stack</li><li>Process state 狀態</li><li>Data section</li><li>Code section</li></ul></li></ul><hr><h3>Program and Process Compare</h3><table><thead><tr><th style="text-align:center">Program</th><th style="text-align:center">Process</th></tr></thead><tbody><tr><td style="text-align:center">Passive 被動</td><td style="text-align:center">Active 主動</td></tr><tr><td style="text-align:center">A field stored in the disk</td><td style="text-align:center">有 programming counter</td></tr></tbody></table><hr><h2>Process STD (State Transitive Diagram) 行程狀態轉換圖</h2><h2><img src="STD.png" alt=""></h2><h2>Scheduler 種類</h2><ol><li><strong>LTS (Long Term Scheduler)</strong><br>Def: 從 Job Queue 挑選 Job 進入 Memory 之中, 使其來到 Ready 的狀態<br>特色：<ol><li>執行頻率不高</li><li>可控制 Multiprogramming Degree (分支度) 大小</li><li>可挑 I/O 和 CPU bounded job 為一適當比例</li><li>批次常用, 分時, 即時少用</li></ol></li><li><strong>STS (Short Term Scheduler)</strong><br>Def: 從 Ready Queue 挑一 process, 使之獲得 CPU, 進入 Running 狀態<br>特色：<ol><li>執行頻率高</li><li>各系統皆使用 (因為每個系統皆有 CPU, 因此需要)</li></ol></li><li><strong>MTS (Medium Term Scheduler)</strong><br>Def: 當 Memory 不足時, 由 MTS 挑部分的 process 將之 swap out, 待日後 Memory 有空間時, 再將之 swap in<br>MTS 所挑選的部分為：1. priority 低的 process 2. waiting time 過長<br>圖：<img src="MTS.png" alt=""></li></ol><hr><h2>PCB (Process Control Block)</h2><p>Def: 為方便管理 process 的相關資訊, 故將之集合成一記錄區塊, 謂之 PCB<br>圖：<img src="PCB.png" alt=""></p><hr><h2>Context Switching (內文轉換)</h2><p>Def: 當 process P1 需 wait I/O 時, 則 CPU 將切換給 P2, 此時需將 P1 的 PCB 保存, P2 的 PCB 載入<br>影響 context switching 效能大多為硬體的層次如：</p><ul><li>CPU register 數量</li><li>Memory access speed</li><li>是否提供特殊指令<br>圖示：<img src="contextSwitching.png" alt=""></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> Process </tag>
            
            <tag> STD </tag>
            
            <tag> Scheduler </tag>
            
            <tag> PCB </tag>
            
            <tag> context switching </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-作業系統結構</title>
      <link href="/repository/2021/06/06/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%B5%90%E6%A7%8B/"/>
      <url>/repository/2021/06/06/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E7%B5%90%E6%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1>3.3 作業系統結構</h1><p><img src="structure.png" alt=""></p><hr><h2>Command Interpreter 命令直譯器</h2><ul><li>Def: 接收 user 輸入命令, 加以判別：<ol><li>正確 =&gt; 呼叫對應的 <strong>&quot;Command procedure&quot;</strong></li><li>不正確 =&gt; Output error</li></ol></li><li>分為:</li></ul><ol><li><strong>Intergrated part of O.S.</strong> =&gt; command procedure 整合到 O.S. 之中<br>優點：速度快 (因為所有 command procedure 已於 O.S., 故在 Monitor Area (Memory) 之中)<br>缺點：可擴充性低 (彈性差)</li><li><strong>Isolated part of O.S.</strong> =&gt; 將 command procedure 獨立於 O.S. 之外<br>優點：可擴充性佳 (彈性好)<br>缺點：速度較慢 (因為可能需做 I/O &lt;-&gt; Memory 的傳輸)</li></ol><hr><h2>System Call 系統呼叫</h2><p>Def: 作為 user program 與 O.S. 溝通的介面</p><ul><li>類似 function 或 subroutine, 但為系統所擁有</li></ul><hr><h2>Kernel 核心程式</h2><ul><li>負責多個 process 運作上的協調, 管理等</li><li>負責底層 Hardware 資源的分配及管理<br>分為：巨核心 和 微核心<img src="kernel_compare.png" alt=""></li></ul><hr><h2>Virtual Machine 虛擬機器</h2><ul><li>Def: 藉由模擬技術, 創造一份與底層硬體完全一致的 copy (複製), 以達 Virtual Machine 之效</li><li>可利用資源共享的技術產生許多 Virtual Machine:<ol><li>CPU Scheduling =&gt; 共享 CPU</li><li>用 &quot;Virtual Memory&quot; =&gt; 共享 Memory Space</li><li>用 Spooling =&gt; 共用 I/O Device</li></ol></li><li>Virtual Machine 種類：<ul><li>type 1: 原生型 Virtual Machine =&gt; 概念同上, 各 Virtual Machine 直接面對底層的硬體<br>優點：Virtual Machine 可直接跟 Hardware 溝通 =&gt; 效率佳<br>缺點：Virtual Machine 間缺乏統一管理的機制, 故較不便<br>圖：<img src="%E5%8E%9F%E7%94%9F%E5%9E%8B.png" alt=""></li><li>type2: 寄生型 Virtual Machine =&gt; 各 Virtual Machine 會由一 O.S. 統一管理<br>優點：具統一管理各 Virtual Machine 機制, 所以較方便<br>缺點：Virtual Machine 須經中介者, 方可跟 hardware 溝通, 所以效率較差<br>圖：<img src="%E5%AF%84%E7%94%9F%E5%9E%8B.png" alt=""></li></ul></li><li>Note: 在 Cloud 的 Iaas 之下, 資源的 <strong>&quot;Virtualization&quot;</strong> 大為盛行, 一般會採用 Virtual Machine 的技術, 使得<strong>資源利用率</strong>發揮最大效益</li></ul><hr><h2>Bootstrap Loader 靴帶載入程式 (BIOS - Basic Input Output System)</h2><p>Def: 為一小程式, 於開機時執行, 一般放於 ROM 中 (space 小), 執行過程會帶出 O.S. Kernel 所在, 以便後續開機做來可順利運行</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> Kernel </tag>
            
            <tag> Virtual Machine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-電腦系統結構</title>
      <link href="/repository/2021/06/03/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E9%9B%BB%E8%85%A6%E7%B3%BB%E7%B5%B1%E7%B5%90%E6%A7%8B/"/>
      <url>/repository/2021/06/03/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E9%9B%BB%E8%85%A6%E7%B3%BB%E7%B5%B1%E7%B5%90%E6%A7%8B/</url>
      
        <content type="html"><![CDATA[<h1>3.2 電腦系統結構</h1><h2>I/O process 方式</h2><h3>Polling I/O (詢問式) 又稱 busy wait 或 &quot;programmed I/O&quot;</h3><p>Def:</p><ul><li>當一 process 需 wait I/O, <strong>過程中 CPU 需不斷反覆詢問 I/O 是否完成</strong></li><li>若過程中將 CPU 切換給其他 process, 可能造成<strong>資料遺失</strong>的現象</li></ul><h3>Interrupt I/O (中斷式)</h3><p>Def: 當 process 需 wait I/O 由 <strong>Device Controller 負責監督 I/O 是否完成</strong>, 若完成則通知 O.S. 接手處理 5 ~ 8<br><img src="interrupt_IO.png" alt="">Note: 過程中 CPU 不需介入故可切給另一 process 專心處理之<br>Interrupt vector table<img src="interrupt_IO_ISR.png" alt=""><strong>ISR: Interrupt Service Routine(中斷服務常式)</strong></p><p><img src="interrupt_vs_dma.png" alt=""></p><p>說明：</p><ul><li>採 interrupt 時, &quot;I/O 和 Mem 傳輸&quot;, CPU 需參與監督, 改良後 next</li><li>採 DMA (Direct Memory Access 直接記憶體存取)Def: 由 DMA Controller 負責 I/O 和 Mem. 傳輸 <strong>(CPU 不需介入)</strong></li></ul><h3>DMA 會採用 &quot;Cycle stealing&quot; 的技術</h3><ul><li>週期竊取: 偷取 FO 和 WM 此 2 週期說明：<img src="cycle_stealing.png" alt=""><br>Note: DMA 適用於高速的 I/O Device (ex: disk)</li></ul><h3>Summary</h3><p><img src="summary.png" alt=""></p><h2>中斷種類</h2><p><img src="%E4%B8%AD%E6%96%B7%E7%A8%AE%E9%A1%9E.png" alt=""><br>Note: (Non-maskable interrupt) =&gt; NMI 不可遮蔽式中斷</p><ul><li>為 Priority 最高的 interrupt</li><li>O.S. 需無條件接收, 且立即執行之 (Hardware error)</li></ul><h2>Hardware Protection</h2><h3>I/O protection</h3><ul><li><p>目的：避免 user program 直接存取 I/O resource</p></li><li><p>圖示：<img src="hardware_protection.png" alt=""></p></li><li><p>作法：</p><ol><li>採用 <strong>&quot;Dual Mode&quot;</strong>, 將 I/O 相關的指令, 設為特權指令</li><li>避免 user program 去改變中斷向量表或 ISR</li></ol></li><li><p>Dual Mode (雙重模式)<img src="dual_mode.png" alt=""></p></li><li><p>Ex: 下列哪些為特權指令(O.S.)？</p><ol><li>setup timer</li><li>read clock</li><li>clear mem,</li><li>close interrupt</li><li>mode switch<br>Sol: 1, 3, 4, 5</li></ol></li></ul><h3>CPU protection</h3><ul><li>目的：避免 CPU 長期被某個 process 持有</li><li>作法：設定一個 Timer (計時器), 一旦 process 取得 CPU 就開始倒數, 當時間為 0 , 則換其他 process 執行</li></ul><h3>Memory protection</h3><ul><li>目的：避免 user program 之執行影響到其他的 user program 或 monitor program (O.S.) 之執行</li><li>圖：<img src="memory_protection_pur.png" alt=""></li><li>分成：<ol><li>Monitor Area Protection</li><li>User Area Protection</li></ol></li></ul><h4>1. Monitor Area Protection</h4><ul><li>作法：採用 **&quot;Fence Register&quot;**紀錄 M.A.大小</li><li>Problem: M.A. 的大小會更動(因為 error routine 是動態載入), 故所有的 user program 需動態更新位址, 需有 Dynamic Binding (只要沒有就不行,程式不會動)</li><li>Solution:<img src="memory_protection_sol.png" alt=""></li></ul><h4>2. User Program Area Protection</h4><ul><li>作法：採用 <strong>&quot;base/limit&quot; register</strong>來記錄各 user program 的起始位址跟 U.P. 的大小</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> 中斷 </tag>
            
            <tag> Hardware protection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter3-作業系統-作業系統</title>
      <link href="/repository/2021/05/30/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1/"/>
      <url>/repository/2021/05/30/Chapter3-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1-%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1/</url>
      
        <content type="html"><![CDATA[<h1>3.1 作業系統</h1><h2>O.S. 作用</h2><ol><li>為 user 和 Hardware 間溝通的橋樑</li><li>提供一個易於執行的環境 ex: Dos -&gt; Windows</li><li>資源 (Hardware) 的分配及管理</li><li>避免為和系統的動作發生</li></ol><hr><h2>作業系統型態</h2><ol><li><p><strong>Multiprogramming (多元程式規劃)</strong><br>Def: 指將多個 process 同時載入 memory 中</p><ul><li>以並行或平行方式處理</li><li>當一 process 需 wait I/O, CPU 得交由另一 process 使用</li><li>圖：<img src="multiprogramming.png" alt=""></li></ul></li><li><p><strong>Time sharing (分時系統)</strong><br>Def:</p><ul><li><p>採 Round Robin CPU Scheduling 及資源共享的技術</p></li><li><p>各 process 可輪流使用一固定的 CPU 時間</p></li><li><p>適用於 interactive system</p></li><li><p><strong>可達到 Multitasking 之效</strong></p></li><li><p>圖：<img src="time_sharing.png" alt=""></p></li><li><p>Note:</p><ol><li>interactive (交談式) =&gt; Online (線上作業), ex: game, FB, ptt<br>注重：公平性, 反應時間, 互動性</li><li></li></ol><p>單工：一次只處理一個工作, 結束才換下一個, ex: 早期的 Dos 系統<br>多工(Multitasking)：一次可同時(以並行或平行的方式)執行多個工作, 利用 Time-sharing 達成<br>ex: Unix</p><ol start="3"><li>Batched System (批次系統) =&gt; offline<br>將同質性的作業收集, 於一特定時間在統一處理, ex: 會計帳</li></ol></li><li><p><img src="perfermance_compare.png" alt=""></p></li></ul></li><li><p><strong>Multiprocessor (多處理系統) =&gt; 平行系統</strong><br>Def: 指一電腦內有多顆 processor, 如此可同時執行多個工作(以平行方式), <strong>但不一定能減少每個 process 使用 CPU 的時間</strong><br>特色：</p><ol><li>各 processor 受相同的 O.S., Clock 控制, 並共用 Memory space</li><li>processor 之間溝通 =&gt; <strong>&quot;Shared Memory&quot;</strong></li><li>為 tightly coupled (緊密, 耦合)的架構 =&gt; 一個掛, 全掛<br><img src="multiprocessor.png" alt=""></li></ol></li><li><p><strong>Distributed System (分散式系統)</strong></p><ul><li><p>特色：</p><ol><li>各 process 有專屬的 O.S., Clock, Memory 等資源</li><li>Process 間的溝通採 <strong>&quot;Message passing&quot;</strong></li><li>為 loosely coupled (鬆散, 耦合) system</li></ol></li><li><p>Why Distributed System?</p><ol><li>Speed up</li><li>Resource sharing</li><li>Communication</li><li>Fault tolerant (容錯性) =&gt; reliability 高 (可靠性)</li></ol></li><li><h3>Network Computing</h3><h4>Clustered System (叢集式)</h4><p>Def:</p><ul><li>類似平行系統, 可同時執行多個工作</li><li>But 一般採用 &quot;LAN 將多台 Host 連結&quot;, 形成一大型的服務網路</li><li>圖：<img src="clustered.png" alt=""></li><li>可達：<ol><li>Load Balance (負載平衡)</li><li>High Availability (HA 高可用性)</li><li>Fault Tolerant</li></ol></li></ul><h4>Grid Computing (網格計算)</h4><p>Def:</p><ul><li>利用世界各地分享的資源來共同完成一大型任務</li><li>利用將問題切成多個 subproblem, 並分散給各地資源處理, 以求快速求解<br>缺點：難以普及 (需專家才有辦法對巨大問題分割)<br>圖：<img src="grid_computing.png" alt=""></li></ul><h4>Cloud</h4><p>Def:</p><ul><li>data &amp; service in the cloud</li><li>accessiable with any device</li><li>ingeneral device will use browser to connect into cloud<br>特色：</li><li>user &quot;just use&quot;, 不需做</li><li>系統具強大的可擴充性 (scalability)<br>Cloud 衍生的服務</li><li>圖：<img src="cloud.png" alt=""></li></ul><h4>Compare</h4><table><thead><tr><th>Des</th><th>Grid</th><th>Cloud</th></tr></thead><tbody><tr><td>領導</td><td>學術界</td><td>Service provider</td></tr><tr><td>標準</td><td>有</td><td>無</td></tr><tr><td>特性</td><td>一次處理巨大的量</td><td>一次量少, 頻率極高</td></tr><tr><td>Open source</td><td>完全</td><td>部分開放</td></tr></tbody></table><p>圖：<img src="compare.png" alt=""></p></li></ul></li><li><p><strong>Real-time System (即時系統)</strong><br>Def: 對工作的即時性要求極高, 若不能在指定時間內完成, 就算失敗<br>指定時間內 =&gt; <strong>為精準掌控時程, 一般較少採用輔助儲存裝置(ex: disk, tape)</strong> No disk, no virtual memory, tape 為 secondary storage<br>可分為：</p><ol><li>Hard R.T. =&gt; 即為上述</li><li>Soft R.T. =&gt; 需滿足<ul><li>具 priority scheduling</li><li>具 preemptive 之特色</li><li>降低 kernel 的處理時間</li></ul></li></ol></li><li><p><strong>Handheld System (手持系統)</strong><br>Def: 於手持裝置上執行之系統, ex: smart phone, PDA, Pad<br>限制：1. Speed 較慢 2. Memory space 較小 3. Monitor 較小</p></li><li><p><strong>Embedded System (嵌入式系統)</strong><br>Def: 指開發出的系統, 並非在一般 PC 執行, 而是嵌入 3C 家電等裝置中, 使其具智慧化的效果</p></li></ol><hr><h2>作業系統演進</h2><ul><li><p>Offline (離線作業)<br>Def: 指藉由系統的離峰時間, 將 data 先行載入到高速 device, 使 CPU 之後可從此取得 data<br>=&gt; CPU utilization(使用率) 上升, CPU idle time 下降, 系統 performance 上升</p></li><li><p>Spooling (電腦週邊同步連線作業)<br>Def: 利用高速 device (disk), 存方低速 device (tape) 的 data 使 CPU idle time 下降, 且於 Spooling 中 <strong>&quot;可共用 I/O device 之資源&quot;</strong><br>圖：<img src="spooling.png" alt=""></p></li><li><p>Buffering (緩衝)<br>Def:</p><ul><li>用以解決速度不對等的問題</li><li>一般會在高速 device 切一暫存空間當低速 device 的緩衝區, <strong>如此 CPU 可直接面對高速 device 即可</strong></li></ul></li><li><p>Spooling vs Buffering<br>Spooling 自身的 CPU 計算可和其他工作的 I/O 運作重疊執行<br>Buffering 自身的 CPU 計算只可和自身的的 I/O 運作執行<br>Note: 實際上 buffering 中 上圖 (2), (3) overlay execution 不易達成, 所以 job 可分成 I/O bound job, CPU bound job</p></li><li><p>Compare</p><table><thead><tr><th>I/O Bound</th><th>CPU Bound</th></tr></thead><tbody><tr><td>需大量運作, 少量的 CPU 計算</td><td>相反</td></tr><tr><td>Speed 受限於 I/O device 的效能</td><td>Speed 受限於 CPU 的效能</td></tr><tr><td>Input: CPU 常面對空的 Buffer</td><td>Input: I/O device 常面對滿的 Buffer</td></tr><tr><td>Output: CPU 常面對滿的 Buffer</td><td>Output: I/O device 常面對空的 Buffer</td></tr></tbody></table></li><li><p>Caching (快取)<br>Def: 將常用的 data 複製一份到高速 device 中以提高 CPU 存取的 I/O 效能, <strong>可以加速 CPU 資料存取時間</strong><br>圖：<img src="caching.png" alt=""></p></li><li><p>回寫策略</p><table><thead><tr><th>Write-through</th><th>Write back</th></tr></thead><tbody><tr><td>Cache 一更動, 馬上寫回</td><td>當 cache 的 data 須搬離 cache 之後再將之寫回</td></tr><tr><td>優點：Cache, memory 之間的 data 保持一致性</td><td>優點：Speed 較快</td></tr><tr><td>缺點：Speed 不佳</td><td>缺點：Cache, memory 的 data 可能不一致</td></tr></tbody></table></li></ul><h3>Summary</h3><p><img src="memory_hierarchy.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 作業系統 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> O.S </tag>
            
            <tag> 作業系統 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter2-數位邏輯-Digital Logical</title>
      <link href="/repository/2021/04/01/Chapter2-%E6%95%B8%E4%BD%8D%E9%82%8F%E8%BC%AF-Digital-Logical/"/>
      <url>/repository/2021/04/01/Chapter2-%E6%95%B8%E4%BD%8D%E9%82%8F%E8%BC%AF-Digital-Logical/</url>
      
        <content type="html"><![CDATA[<h1>數位邏輯 Digital Logical</h1><hr><blockquote><p>布林代數 (Boolean Algebra)<br>Def: 用來表示 true (真) 或 false (偽)的邏輯運算, 通常以 0 表示 false, 1 表示 true</p></blockquote><h2>常用的布林代數</h2><ol><li><p>NOT (<strong>~</strong>, <strong>‾</strong>, <strong>'</strong>)</p><ul><li>概念： <code>true -&gt; false</code>, <code>false -&gt; true</code></li><li>truth table (真值表)將所有 input 變數組合對應的 output 皆列出來謂之<table><thead><tr><th style="text-align:left">input</th><th style="text-align:left">output</th></tr></thead><tbody><tr><td style="text-align:left">A</td><td style="text-align:left">NOT A</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1</td><td style="text-align:left">0</td></tr></tbody></table></li></ul></li><li><p>AND (•)</p><ul><li>規則：<br>input: A, B 2個布林值<br>output: A, B 皆為 1 =&gt; 1, 否則為 =&gt; 0</li><li>truth table<table><thead><tr><th style="text-align:left">input</th><th style="text-align:left">output</th></tr></thead><tbody><tr><td style="text-align:left">A B</td><td style="text-align:left">A • B</td></tr><tr><td style="text-align:left">0 0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">0 1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1 0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1 1</td><td style="text-align:left">1</td></tr></tbody></table></li></ul></li><li><p>OR (+)</p><ul><li>規則：<br>input: A, B 2個布林值<br>output: A, B 只要有一個 1 =&gt; 1, 若 A, B 皆為 0 =&gt; 0</li><li>truth table<table><thead><tr><th style="text-align:left">input</th><th style="text-align:left">output</th></tr></thead><tbody><tr><td style="text-align:left">A B</td><td style="text-align:left">A + B</td></tr><tr><td style="text-align:left">0 0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">0 1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1 0</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1 1</td><td style="text-align:left">1</td></tr></tbody></table></li></ul></li><li><p>XOR (exclusive - OR): ⊕</p><ul><li>規則：<br>input: A, Boutput: A, B 相同 =&gt; 0, A, B 相異 =&gt; 1</li><li>truth table<table><thead><tr><th style="text-align:left">input</th><th style="text-align:left">output</th></tr></thead><tbody><tr><td style="text-align:left">A B</td><td style="text-align:left">A ⊕ B</td></tr><tr><td style="text-align:left">0 0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">0 1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1 0</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1 1</td><td style="text-align:left">0</td></tr></tbody></table></li></ul></li><li><p>XNOR (exclusive - NOR): ⊙</p><ul><li>規則：<br>input: A, Boutput: A, B 相同 =&gt; 1, A, B 相異 =&gt; 0</li><li>truth table<table><thead><tr><th style="text-align:left">input</th><th style="text-align:left">output</th></tr></thead><tbody><tr><td style="text-align:left">A B</td><td style="text-align:left">A ⊙ B</td></tr><tr><td style="text-align:left">0 0</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">0 1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1 0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1 1</td><td style="text-align:left">1</td></tr></tbody></table></li></ul></li><li><p>implies (→)</p><ul><li>規則：<br>input: A, Boutput: A → B, 即 ((NOT A) or B)</li><li>truth table<table><thead><tr><th style="text-align:left">A B</th><th style="text-align:left">NOT A</th><th style="text-align:left">NOT A or B</th></tr></thead><tbody><tr><td style="text-align:left">0 0</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">0 1</td><td style="text-align:left">1</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1 0</td><td style="text-align:left">0</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1 1</td><td style="text-align:left">0</td><td style="text-align:left">1</td></tr></tbody></table></li></ul></li><li><p>NAND</p><ul><li>規則：<br>input: A, Boutput: ‾A • B (先做 AND 在做 NOT)<img src="AB.png" alt=""></li><li>truth table<table><thead><tr><th style="text-align:left">A B</th><th style="text-align:left">A．B</th><th style="text-align:left">‾A • B</th></tr></thead><tbody><tr><td style="text-align:left">0 0</td><td style="text-align:left">0</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">0 1</td><td style="text-align:left">0</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1 0</td><td style="text-align:left">0</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">1 1</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr></tbody></table></li></ul></li><li><p>NOR</p><ul><li>規則：<br>input: A, Boutput: ‾ A + B (先做 OR 在做 NOT)<img src="A+B.png" alt=""></li><li>truth table<table><thead><tr><th style="text-align:left">A B</th><th style="text-align:left">A+B</th><th style="text-align:left">‾A + B</th></tr></thead><tbody><tr><td style="text-align:left">0 0</td><td style="text-align:left">0</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">0 1</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1 0</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">1 1</td><td style="text-align:left">1</td><td style="text-align:left">0</td></tr></tbody></table></li></ul></li></ol><blockquote><p>Priority:NOT &gt; AND &gt; OR &gt; Implies, NOT 為單元運算子, 所以最高</p></blockquote><ul><li>Note: 7, 8 為萬用閘 universal gate</li></ul><h2>定理</h2><ol><li><p>單一律：x + x = x<br>x • x = x</p><table><thead><tr><th>x x</th><th>x • x</th></tr></thead><tbody><tr><td>0 0</td><td>0</td></tr><tr><td>1 1</td><td>1</td></tr></tbody></table></li><li><p>x + 0 = x<br>x + 1 = 1<br>x • 0 = 0<br>x • 1 = x</p><table><thead><tr><th>x 0</th><th>x • 0</th></tr></thead><tbody><tr><td>0 0</td><td>0</td></tr><tr><td>1 0</td><td>0</td></tr></tbody></table></li><li><p>補數定律<img src="%E8%A3%9C%E6%95%B8x.png" alt="">‾ ‾x = x, 即 (x')' = x</p><table><thead><tr><th>x</th><th>‾x</th><th>‾ ‾x</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr></tbody></table></li><li><p>交換律<br>x + y = y + x<br>x • y = y • x</p></li><li><p>結合律<br><strong>(</strong> x + <strong>(</strong> y + z <strong>))</strong> = <strong>((</strong> x + y <strong>)</strong> + z <strong>)</strong><br><strong>(</strong> x • <strong>(</strong> y • z <strong>))</strong> = <strong>((</strong> x • y <strong>)</strong> • z <strong>)</strong></p></li><li><p>分配律<br>x • (y + z) = (x • y) + (x • z) <strong>=&gt; • 對 + 的分配律</strong><br>x + (y • z) = (x + y) • (x + z) <strong>=&gt; + 對 • 的分配律</strong> (布林中有, 數字無此)</p></li><li><p>笛摩根定律<br>(1) ‾x•y = ‾x•‾y<br>(2) ‾x+y = ‾x+‾y</p></li><li><p>吸收定律</p><ul><li><p>x + xy = x<br>說明：<br>x + xy = x • 1 + x • y<br>= x (1 + y)<br>= x • 1<br>= x</p></li><li><p>x • (x + y) = x<br>說明：<br>x • (x + y) = x • x + x • y<br>= x + xy<br>= x</p></li><li><p><strong>延展:</strong><br>(A+AB+AC+AD+......)<br>= A (1+B+....)<br>= A • 1<br>= A</p></li></ul></li><li><p>補數定律<br>x + ‾ x = 1<br>x • ‾ x = 0<br><strong>ex:</strong> A + B = A + ‾A B<br>A + B = A + B<br>= A + (A + ‾A) B<br>= A + AB + ‾A B<br>= A + ‾A B</p></li><li><p>對偶性<br>A + 1 = 1<br>A • 0 = 0<br><strong>=&gt; + -&gt; •</strong><br><strong>=&gt; • -&gt; +</strong><br><strong>=&gt; 1 -&gt; 0</strong><br><strong>=&gt; 0 -&gt; 1</strong></p></li></ol><hr><h2>布林函式</h2><p><strong>min-term:</strong> 包含所有變數的乘積項, ex: A, B, C =&gt; ‾A•B•‾C, A•‾B•C, A•B•C<br><strong>max-term:</strong> 包含所有變數的加總項, ex: A, B, C =&gt; ‾A+‾B+C, A+‾B+C, A+B+C<br><strong>ex1:</strong>  3個 input 變數 (x, y, z)的 min-term, max-term</p><table><thead><tr><th>x y z</th><th>min-term(m) (0 取補)</th><th>max-term (M) (1 取補)</th></tr></thead><tbody><tr><td>0 0 0</td><td>‾x • ‾y • ‾z (m0)</td><td>x + y + z (M0)</td></tr><tr><td>0 0 1</td><td>‾x • ‾y • z (m1)</td><td>x + y + ‾z (M1)</td></tr><tr><td>0 1 0</td><td>‾x • y • ‾z (m2)</td><td>x + ‾y + z (M2)</td></tr><tr><td>0 1 1</td><td>‾x • y • z (m3)</td><td>x + ‾y + ‾z (M3)</td></tr><tr><td>1 0 0</td><td>x • ‾y • ‾z (m4)</td><td>‾x + y + z (M4)</td></tr><tr><td>1 0 1</td><td>x • ‾y • z (m5)</td><td>‾x + y + ‾z (M5)</td></tr><tr><td>1 1 0</td><td>x • y • ‾z (m6)</td><td>‾x + ‾y + z (M6)</td></tr><tr><td>1 1 1</td><td>x • y • z (m7)</td><td>‾x + ‾y + ‾z (M7)</td></tr></tbody></table><p><strong>特色：</strong></p><ul><li>‾mi = Mi, ‾Mi = mi<br>‾m3 = M3<br>=&gt; ‾ ‾x • yz = ‾ ‾x + ‾y + ‾z = x + ‾y + ‾z</li><li>f(xyz) = x ‾y z + ‾x y z + x y ‾z = m5 + m3 + m6 = Σm(0, 3, 5, 6)<br>f(xyz) = (x + ‾y + z) • (‾x + y + z) = M2 • M4 = Σm(2, 4)</li><li>f = Σ(mi) = π(Mj)</li><li><strong>Note:</strong> j 是所有組合去除掉 i 的</li><li><strong>ex:</strong> f(x, y, z) = Σm(1, 2, 3, 4) = π(0, 5, 6, 7)</li></ul><p><strong>正規化：</strong><br>f(x, y, z....) = ......(正規化)</p><ol><li>Sum of min-term (最小項之和)格式：<br>f(xy) = xy + ‾x y + x ‾y<br>f(xy) = xy + ‾y (Sum of product) (sop 每一個都用乘, 則乘跟乘之間用加的)</li><li>Sum of max-term (最大項之積)<br>格式：<br>f(xy) = (x + y) • (‾x + y)<br>f(xy) = (x + y) • ‾x (product of sum) (pos)</li></ol><p><strong>ex2:</strong> 將 f(xyz) = x + ‾ y‾z (‾x+y) 化成 Sum of min-term<br><strong>Sol:</strong><br>step1: 利用笛摩根定律, 將 '‾' 置於單一變數上, 形成 sop 格式<br>f(x, y, z) = x + ‾ y‾z(‾x+y)<br>= x + (‾y + ‾ ‾z) (‾x • ‾y)<br>= x + ‾x‾y • ‾y + ‾x‾y • z<br>= x + ‾x‾y + ‾x‾y‾z<br>= x + ‾x‾y</p><p>step2: 將 sop 非 min-term 者化成 min-term<br>作法：</p><ol><li>• (所缺變數 + ‾所缺變數)</li><li>用 • 對 + 的分配律展開</li></ol><p>x + ‾x‾y = x • (y + ‾y) (z + ‾z) + ‾x‾y (z + ‾z)<br>= xyz + xy‾z + x‾y z + x‾y‾z + ‾x‾y z + ‾x‾y‾z<br>= m7 + m6 + m5 + m4 + m1 + m0<br>= Σm(0, 1, 4, 5, 6, 7)</p><p><strong>ex3:</strong> 將 f(x, y, z) = x + ‾yz (x + ‾y) 化成 Product of max-term<br><strong>Sol:</strong><br>step1: 利用笛摩根定律, 將 '‾' 置於單一變數上, 形成 pos 格式</p><p>f(x, y, z) = x + ‾yz(x + ‾y)<br>= x + (‾y + ‾z) • (x + ‾y)<br>= (x + ‾y + ‾z) • (x + x + ‾y)<br>= (x + ‾y + ‾z) • (x + ‾y)</p><p>step2: 將非 max-term 化成 max-term<br>作法：</p><ol><li>用 + (所缺變數 • ‾所缺變數)</li><li>用 + 對 • 的分配律展開</li></ol><p>(x + ‾y + ‾z) • (x + ‾y) + (z • ‾z)<br>= (x + ‾y + ‾z) • (x + ‾y + z) • (x + ‾y + ‾z)<br>= (x + ‾y + z) • (x + ‾y + ‾z)<br>= M2 • M3<br>= π(2, 3)</p><hr><h2>布林函式化簡 (simplity circuit)</h2><p>化成：</p><ol><li>最簡的 sop</li><li>最簡的 pos</li></ol><p>方法： 卡諾圖</p><ul><li><p>Def:</p><ul><li>k 個 input =&gt; 2^k 個格子</li><li>每個格子代表 =&gt; min-term, max-term</li></ul></li><li><p>Ex: input x, y, z , 求 sop?<br><img src="%E5%8C%96%E7%B0%A11.png" alt=""></p></li><li><p>Ex: input w, x, y, z , 求 sop?<br><img src="%E5%8C%96%E7%B0%A12.png" alt=""></p></li></ul><p>化簡原則：</p><ol><li>最簡 sop<ul><li>作法：<br>(1) 將布林函式的 min-term 填 &quot;<strong>1</strong>&quot; 於卡諾圖的對應方格<br>(2) 用最少的矩形方格將 &quot;1&quot; 包含, 其中 <strong>單一矩形方格越大越好</strong> (為 2 的冪次方)<br>(3) &quot;1&quot; 全部被包含, &quot;1&quot; 可重複被包含<br>(4) 矩形方格為 2^k <strong>=&gt; 消除 k 個變數</strong></li><li>Ex1: 求 sop?<br><img src="%E5%8C%96%E7%B0%A13.png" alt=""></li><li>Ex2: f(x, y, z) = ‾x y z + xyz + xy‾z + x‾y‾z, 求 sop?<br><img src="%E5%8C%96%E7%B0%A14.png" alt=""></li><li>Ex3: f(A, B, C) = AC + AB + ABC + BC, 求 sop?<br><img src="%E5%8C%96%E7%B0%A15.png" alt=""></li><li>Ex4: 求 sop?<br><img src="%E5%8C%96%E7%B0%A16.png" alt=""></li><li>Ex5: f(A, B, C, D) = (‾A + ‾B + ‾D) • (‾A + C + ‾D) • (A + ‾B + ‾D) • (‾B + C + D), 求 pos?<br><img src="%E5%8C%96%E7%B0%A17.png" alt=""></li></ul></li></ol><hr><h2>Don't care condition (隨意條件)</h2><ul><li><p>Def: 對結果不具影響之變數組合</p></li><li><p>目的： 進一步化簡電路</p></li><li><p>規則： Don't care condition 於卡諾圖, 當中填入 &quot;x&quot; 其中：</p><ol><li>&quot;x&quot; 不見得要用</li><li>&quot;x&quot; 可重複使用</li><li>&quot;x&quot; 可增加相鄰方格數</li></ol></li><li><p>Ex1:<br><img src="Don1.png" alt=""></p></li><li><p>Ex2: f(A, B, C, D) = Σm(1, 3, 8, 9, 10, 12) + Σd(0, 11, 13, 14) [d means don't care], 求最簡 sop?<br><img src="Don2.png" alt=""></p></li><li><p>Ex3: f(A, B, C) = Σm(0, 1, 2, 4) + Σd(3, 6), 求 sop?<br><img src="Don3.png" alt=""></p></li></ul><hr><h2>邏輯閘 (Logical Gate)</h2>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 數位邏輯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 數位邏輯 </tag>
            
            <tag> 布林代數 </tag>
            
            <tag> 真值表 </tag>
            
            <tag> Logical gate </tag>
            
            <tag> Universal gate </tag>
            
            <tag> Decoder </tag>
            
            <tag> Encoder </tag>
            
            <tag> Flynn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1-基本電腦概論-數碼, 文字碼</title>
      <link href="/repository/2021/04/01/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E6%95%B8%E7%A2%BC-%E6%96%87%E5%AD%97%E7%A2%BC/"/>
      <url>/repository/2021/04/01/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E6%95%B8%E7%A2%BC-%E6%96%87%E5%AD%97%E7%A2%BC/</url>
      
        <content type="html"><![CDATA[<h1>1.5 數碼、文字碼</h1><hr><h2>BCD 碼</h2><p>利用 4 個 bits (2進制) 表示 10 進制中每一位數之值<br><strong>有6種組合不用：</strong> 1010(10), 1011(11), 1100(12), 1101(13), 1110(14), 1111(15)</p><h2>8, 4, -2, -1 碼 (BCD 碼之變形)</h2><h2>Excess-3 code = BCD code + 3</h2><p><strong>有6種組合不用：</strong> 0000(0), 0001(1), 0010(2), 1101(13), 1110(14), 1111(15)<br>具有<strong>Self-Complement(自我補數)</strong> 功能<br>當 10 進制位數值轉成 excess-3 code後, 再取 1's complement 會同於 10 進制取 9's 補數<br>Ex:<img src="self-complement.png" alt=""><br>8, 4, -2, -1 (+3)=&gt; excess-3 code</p><table><thead><tr><th style="text-align:center">10 進位</th><th style="text-align:center">BCD</th><th style="text-align:center">8, 4, -1, -2</th><th style="text-align:center">excess-3 code</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0000</td><td style="text-align:center">0000</td><td style="text-align:center">0011</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0001</td><td style="text-align:center">0111</td><td style="text-align:center">0100</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">0010</td><td style="text-align:center">0110</td><td style="text-align:center">0101</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">0011</td><td style="text-align:center">0101</td><td style="text-align:center">0110</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0100</td><td style="text-align:center">0100</td><td style="text-align:center">0111</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">0101</td><td style="text-align:center">1011</td><td style="text-align:center">1000</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">0110</td><td style="text-align:center">1010</td><td style="text-align:center">1001</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">0111</td><td style="text-align:center">1001</td><td style="text-align:center">1010</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">1000</td><td style="text-align:center">1000</td><td style="text-align:center">1011</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1001</td><td style="text-align:center">1111</td><td style="text-align:center">1100</td></tr></tbody></table><p><strong>Ex:</strong><br>(42)10<br>= (0100 0010)BCD<br>= (0100 0110)8, 4, -2, -1<br>= (0111 0101)excess-3<br><strong>Ex:</strong><br>48 bits 採 BCD 編號後可表示多少組合？<br>(A) 2^48 (B) 2^12 (C) 10^48 (D) 10^12<br>D<br>48/4 = 12 (若 BCD 拿掉, 則選 A)</p><h2>Gray code (格雷碼)</h2><p><strong>Def:</strong> 任何 2 個連續數字利用 2 進位表示只有一個 bit 不同謂之<br><strong>特色:</strong><br>1. Gray Code 不唯一, 欲得唯一的 Gray Code, 用 <strong>reflected (反射) Gray Code</strong>2. 適用於 data 傳輸3. 每次僅更動 1 bit</p><p><strong>Ex:</strong></p><table><thead><tr><th>10 進位</th><th>Gray Code</th><th>Reflected Gray Code</th></tr></thead><tbody><tr><td>0</td><td>00</td><td>11</td></tr><tr><td>1</td><td>01</td><td>10</td></tr><tr><td>2</td><td>11</td><td>00</td></tr><tr><td>3</td><td>10</td><td>01</td></tr></tbody></table><p><strong>Part1:</strong> 10 進制 -&gt; Gray Code<br><strong>作法：</strong><br>(1) 將 10 進制 -&gt; 2 進制<br>(2) 若 2 進制為 (Xn, Xn-1, .....X0)2, 則 Gray Code 如：<br><img src="10%E8%BD%89Gray.png" alt=""><br><strong>Ex:</strong><br>A ⊕ B -&gt; 若 A, B (1) 相同為 0, (2) 相異為 1<br><strong>Ex:</strong><br>(5)10, (6)10, (7)10, 以 4 bits, 化成 Gray Code<br><strong>Sol:</strong><br>1. (5)10 = (0101)2<br><img src="5.png" alt=""><br>2. (6)10 = (0110)2<br><img src="6.png" alt=""><br>3. (7)10 = (0111)2<br><img src="7.png" alt=""></p><p><strong>Part2:</strong> Gray Code -&gt; 10 進制<br><strong>作法：</strong><br>若一 Gray Code:(Gn, Gn-1, ...G0)Gray, 則<br>(1) Gn 直接留下(即最左位元)<br>(2) 將 Gn 和 Gn-1 做 ⊕ 得到 R2, 而 R2 跟 Gn-2 做 ⊕<br><img src="Gray%E8%BD%892.png" alt=""><br><strong>Ex:</strong>  (0101)Gray Code = (6)10<br><img src="ExGray%E8%BD%892.png" alt=""></p><h2>ASCII (American Standard Code for Information Interchange)</h2><p><strong>特色:</strong><br>(1) 理論上由 <strong>7 個 bits</strong> (2^7 = 128 組合) 所組成，而實際應用是由 8 bits (1 byte) 組成(2) 常用字元：<br>'A' -&gt; (65)10 -&gt; (41)16<br>'a' -&gt; (97)10 -&gt; (61)16<br>'0' -&gt; (48)10 -&gt; (30)16<br>(3) 編號順序 '0' &lt; 'A' &lt; 'a' =&gt; 特殊符號(，, Esc) &lt; 數字 &lt; 大寫 &lt; 小寫<br>ASCII 100 = (97) =&gt; a, (98) =&gt; b, (99) =&gt; c, (100) =&gt; d</p><h2>EBCDIC (Extended BCDIC)</h2><p><strong>特色：</strong><br>(1) 由 IBM 所發明，中大型主機採用 (現在也均用 ASCII)<br>(2) 用 8 bits 表示一字元<br>(3) 編碼順序(和 ASCII 相反) -&gt; 小寫 &lt; 大寫 &lt; 數字</p><h2>Unicode (萬用/完全/統一碼)</h2><p><strong>特色：</strong><br>(1) 用 16 bits 表示字元符號<br>(2) 前 128 個字元符號和 ASCII 相同<br>(3) 主要解決 <strong>跨國語系</strong> 問題<br>(4) 目前常使用的格式為 UTF-8, UTF-8 表示中, 日, 韓文需 3 個 Byte (Taiwan =&gt; 6 bytes)<br>Note: 繁體中文 =&gt; Big5, 簡體中文 =&gt; GBK</p><h2>錯誤碼的偵測與更正</h2><ol><li>Parity Check =&gt; 只能 Detect Errors</li><li>CRC =&gt; 只能 Detect Errors</li><li>Hamming Code =&gt; 具有 error correction 之能力<br><img src="%E9%8C%AF%E8%AA%A4%E7%A2%BC%E5%81%B5%E6%B8%AC.png" alt=""></li></ol><h3>(1)Parity Check: 同位元檢查</h3><ul><li><p>偶同位(Even Parity Check):<br><img src="%E5%81%B6%E5%90%8C%E4%BD%8D.png" alt=""></p></li><li><p>奇同位(Odd Parity Check):<br><img src="%E5%A5%87%E5%90%8C%E4%BD%8D.png" alt=""></p></li></ul><p><strong>Ex:</strong><br>M(x) = 1010100, 問採偶同位, T(x) = ?<strong>Sol:</strong><br>10101001 = T(x)<strong>Ex:</strong><br>下列何者為非奇同位？<br>(A) 0011010<br>(B) 1100100<br>(C) 1000000<br>(D) 0010111</p><h3>(2) CRC (Cycle Redundancy Check): 循環冗餘檢查碼</h3><p><strong>特性：</strong>  應用多項式除法概念, 其中除法利用減法取代, 而減法採 ⊕ 運算</p><ul><li>多項式 x^5 + x^4 + 1 =&gt; 位元串 11001</li><li>圖示：<img src="CRC.png" alt=""><br>(1) 送方作法：<br>step1:<br><img src="%E9%80%81%E6%96%B9step1.png" alt=""><br>step2:<br><img src="%E9%80%81%E6%96%B9step2.png" alt="">(2) 收方檢查：<br><img src="%E6%94%B6%E6%96%B9check.png" alt=""><strong>Ex:</strong><br>M(x) = 1101011011, G(x) = x^4+x+1 =&gt; 10011<br><strong>Sol:</strong><br>step1:<br><img src="exstep1.png" alt=""><br>step2:<br><img src="exstep2.png" alt=""></li></ul><h3>(3) Hamming Code (漢明碼) 又稱 Error Correcting Code (ECC)</h3><p><strong>特性：</strong> 有更正錯誤的能力<br><strong>作法：</strong> 決定需要幾個 Hamming Code Bits:</p><ul><li>規定：於漢明碼中編號為 2 的冪次方位置, 必定為 Hamming Code Bit</li><li>公式： 2^k ≥ n+k+1 -&gt; k: Hamming Code Bits 數, n: Message 的 Bits 數</li><li>2^k ≥ 10+k+1, 所以 k = 4</li></ul><p><strong>特色：</strong> Hamming Code 可做 error correct, 但只同時允許 1 個 bit 出錯, 若 ≥ 2 個 errors, 無法更正<br><strong>Ex:</strong>  M(x)=0100001100, 採 Hamming Code,<br>則 =&gt; 2^k ≥ n+k+1, 又 n = 10, 所以 2^k ≥ 10+k+1 =&gt; k=4<br><img src="exHammingcode.png" alt=""></p><p><strong>數碼的漢明距(Hamming Code Distance)</strong><br><strong>Def:</strong></p><ol><li>指 2 個數碼之不同位元值之個數</li><li>一組數碼的 H.D = min{兩倆互相比較之 H.D }</li></ol><ul><li>若要偵測 n 個 error -&gt; H.D 至少 ≥ n+1</li><li>若要更正 n 個 error -&gt; H.D 至少 ≥ 2n+1</li></ul><p><strong>Ex:</strong><br>A: 010101<br>B: 111111<br>=&gt; AB 之 H.D = 3</p><p><strong>Ex:</strong><br>C: 000011<br>=&gt; min{AB, AC, BC} = 3</p><h2>Summary</h2><p><img src="summary.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 基本電腦概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 數碼 </tag>
            
            <tag> 文字碼 </tag>
            
            <tag> 格雷碼 </tag>
            
            <tag> ASCII </tag>
            
            <tag> CRC </tag>
            
            <tag> Hamming code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1-基本電腦概論-浮點數表示方法(Floating - Point)</title>
      <link href="/repository/2021/03/29/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E6%B5%AE%E9%BB%9E%E6%95%B8%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95-Floating-Point/"/>
      <url>/repository/2021/03/29/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E6%B5%AE%E9%BB%9E%E6%95%B8%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95-Floating-Point/</url>
      
        <content type="html"><![CDATA[<h1>1.3 補數</h1><hr><h2>對應方式</h2><p><img src="%E5%B0%8D%E6%87%89%E6%96%B9%E5%BC%8F.png" alt=""></p><h2>超碼 (Excess code)</h2><ul><li>excess - α code =&gt; 代表超 α 碼</li><li>一般若有 N bit 則超 2^N-1 碼, 即 excess - 2^N-1 code</li><li>ex: 5 bits 一般為 excess - 2^5-1 code</li><li>令： x: 原始值, α: 超碼, c: 超碼後內容, 則: <strong>c = x + α</strong></li></ul><p><strong>ex1:</strong> (1011.11)2, 若格式 S(1) C(5) M(10), 問以<br>(1) excess-16 表示<br>(2) 以 2's complement 表示 the result?<br><strong>Sol:</strong><br>正規化 = +(0.101111)2 * 2^4<br>(1) excess-16</p><table><thead><tr><th>S</th><th>C</th><th>M</th></tr></thead><tbody><tr><td>0</td><td>10100</td><td>1011110000</td></tr></tbody></table><p><code>α = 16</code><br><code>c = x + α = 4 + 16 = 20</code></p><p>(2) 2's complement<br><code>+4 = 00100</code></p><table><thead><tr><th>S</th><th>C</th><th>M</th></tr></thead><tbody><tr><td>0</td><td>00100</td><td>1011110000</td></tr></tbody></table><p><strong>ex2:</strong> 5 bits, 採 excess-16, 則<br>(1)x = -12, c = ?<br>(2) x = 3, c = ?<br>(3) c = 01001, x = ?<br>(4) c = 11011, x = ?<br>(5) x 可表示的 range?<br><strong>Sol:</strong></p><ol><li>c = x + α = -12 + 16 = 4 = (00100)excess-16</li><li>c = x + α = 3 + 16 = 19 = (10011)excess-16</li><li>c = (01001)10 = 9, x = c - α =&gt; 9-16 = -7</li><li>c = (11011) = 27, x = 27 - 16 = 11</li><li><table><thead><tr><th>計算組合</th><th>..</th><th>..</th></tr></thead><tbody><tr><td>c</td><td>最小(0)</td><td>最大(11111)</td></tr><tr><td>-α</td><td>-16</td><td>16</td></tr><tr><td>x:</td><td>-16 ~ + 15 =&gt; 同 2's 補數表示法</td><td></td></tr></tbody></table></li></ol><p><strong>ex3:</strong> (0.00001101)2, 若格式 S(1) C(5) M(10), 問以<br>(1) excess-16表示<br>(2) 以 2's complement 表示的 result?<br><strong>Sol:</strong><br>正規化 = +(0.1101)2 x 2^-4<br>(1) excess-16<br><code>c = x + α</code><br><code>-4 + 16 = 12</code></p><table><thead><tr><th>S</th><th>C</th><th>M</th></tr></thead><tbody><tr><td>0</td><td>01100</td><td>1101000000</td></tr></tbody></table><p>(2) 2's complement<code>+4 = 00100 =&gt; -4 = 11100</code></p><table><thead><tr><th>S</th><th>C</th><th>M</th></tr></thead><tbody><tr><td>0</td><td>11100</td><td>1101000000</td></tr></tbody></table><p><strong>ex4:</strong>[反向題] - floating-point 格式 S(1) C(5) M(10), 內容為： 1110011110100100, 若指數分別以<br>(1) excess-16<br>(2) 2's complement, 求原始值？<br><strong>Sol:</strong><br>(1)</p><table><thead><tr><th>S</th><th>C</th><th>M</th></tr></thead><tbody><tr><td>1</td><td>11001</td><td>1110100100</td></tr></tbody></table><p>=&gt; -(0.1110100100)2 x 2^9<br><code>x = c - α =&gt; 25 - 16 = 9</code></p><p>(2)</p><table><thead><tr><th>S</th><th>C</th><th>M</th></tr></thead><tbody><tr><td>1</td><td>11001</td><td>1110100100</td></tr></tbody></table><p>=&gt; -(0.1110100100)2 x 2^-7<br>2's complement 表示法 1 1001 =&gt; -0111 = -7</p><h2>Floating-point 的邊界值</h2><ul><li>最大正數, 最小正數, 最大負數, 最小負數</li></ul><ol><li><p>圖示：<img src="%E5%9C%96%E7%A4%BA.png" alt=""></p></li><li><p>註明：<br>|1| = |4|<br>|2| = |3|<br>=&gt; 只差正負數</p></li><li><p>ex: floating-point 格式： S(1) C(5) M(10), C 用 excess-code 表示, 則：<br>(1) 最大值：(正數, 指數最大, 尾數最大)<br>所以 Max = +(0.1111111111)2 x 2^15 = +(1-2^-10) x 2^15 = 2^15-2^5<br>(2) 最小正數(正數, 指數最小, 尾數最小)<br>所以 最小正數 = +(0.1) x 2^-16 = +2^-17<br>(3) 最大負數(負數, 指數最小, 尾數最小)<br>所以 最大負數 = -(0.1) x 2^-16 = -2^-17<br>(4) 最小值<br>所以 Min = -(0.1111111111)2 x 2^15 = -(1-2^-10) x 2^15</p></li><li><table><thead><tr><th>Note:</th></tr></thead><tbody><tr><td>(0.1.......1)2 = 1 - 2^-N</td></tr><tr><td>(0.0......01)2 = 2^-N</td></tr><tr><td>(100.......0)2 = 2^N</td></tr><tr><td>(1.........1)2 = 2^N - 1</td></tr></tbody></table></li></ol><h2>IEEE754 浮點數表示法</h2><p>分為：</p><ul><li>單精確度 Single precision =&gt; 32 bits<br>=&gt; S(1) C(E)(8) M(F)(23)<br>=&gt; 正規化表示方式：<br><img src="Single_precision.png" alt=""></li><li>倍精確度 Double precision =&gt; 64 bits<br>=&gt; S(1) C(11) M(52)<br>=&gt; 正規化表示方式：<br><img src="Double_precision.png" alt=""></li></ul><h2>特殊值</h2><ol><li>E = 255, F = 0 =&gt; 代表正無限大<br>255 代表全為 1 時, 保留給系統不可使用</li><li>E = 0, F = 0 =&gt; 代表正負0<br>0 代表全為 0 時, 保留給系統不可使用</li><li>E = 255, F != 0 =&gt; 代表 NaN(Not a number)</li><li>E = 0, F != 0 =&gt; 代表無法正規化</li></ol><p><strong>ex:</strong> (98.625)10, 以 IEEE754 單精確表示之結果 = ?<br><strong>Sol:</strong><br><code>c = x + α = 6 + 127 = 133</code></p><p>(98.625)10<br>= + (1100010.101)2<br>= +(1.100010101)2 x 2^6</p><table><thead><tr><th>S</th><th>C</th><th>M</th></tr></thead><tbody><tr><td>0</td><td>10000101</td><td>10001010100000000000000</td></tr></tbody></table><p>=&gt; (42C54000)16</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 基本電腦概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮點數 </tag>
            
            <tag> 超碼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1-基本電腦概論-補數(Complement)</title>
      <link href="/repository/2021/02/21/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E8%A3%9C%E6%95%B8-Complement/"/>
      <url>/repository/2021/02/21/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E8%A3%9C%E6%95%B8-Complement/</url>
      
        <content type="html"><![CDATA[<h1>1.3 補數</h1><hr><h2>補數</h2><p>目的： 簡化減法過程，縮減電路成本<br>作法： 利用 “補數相加”“取代減法”<br><code>ex: A - B = A + B' =&gt; (-B)</code><br>定義： 一數值 N (整數 n 位，小數 m 位)，基底為 b<br><img src="" alt=""></p><ol><li>b's 補數：<br>(1) b^n - N, if N 不等於 0<br>(2) 0, if N = 0</li><li>(b-1)'s 補數：<br>b^n - b ^ -m - N</li></ol><p>ex: (49.2)10, 求 10's 補數及 9's 補數<br>Sol:<br>N = 49.2, b = 10, 整數位數 n = 2, 小數位數 m = 1<br>10's 補數： 10^2 - 49.2 = 50.8<br>9's 補數： 10^2 - 10^-1 - 49.2 = 100 - 0.1 - 49.2 = 50.7</p><blockquote><p>快速解法：<br>欲求 b 進制的： (b-1)'s 補數：拿(b-1) 去減每一位數<br>b's 補數：將(b-1)'s 補數之最後位元 +1 即(b-1)'s complement + b^-m</p></blockquote><p>ex: (1783.25)10, 求 10's 及 9's complement.<br>Sol:<br>1. 9's complement<br>正：10000 - 0.01 - 1783.25 = 8216.74<br>快：9999.99 - 1783.25 = 8216.74<br>2. 10's complement<br>正：10000 - 1783.25 = 8216.75<br>快：8216.74 + 0.01 = 8216.75</p><p>ex1: 更快解<br>(10101000)2 求 1's 及 2's<br>1's: 01010111 =&gt; 1 -&gt; 0, 0 -&gt; 1<br>2's: 將最右 &quot;1&quot; bit 之前皆保留，其餘 1 -&gt; 0, 0 -&gt; 1<br>1010|1000 =&gt; 01011000</p><p>ex2: (0.01010)2<br>1's: 0.10101<br>2's: 0.010|10 =&gt; 0.10110</p><h2>整數的表示方法</h2><ol><li>Unsigned (無號數)：無負數，無正負號，若有 N 個 bits，可表示範圍： 0 ≤ x ≤ 2^N -1</li><li>Signed(有號數)：指令以最左邊之 bits 表示正負號，如下：<br><img src="%E6%95%B4%E6%95%B8%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95.png" alt="">表示方法：<br>正數： 最大範圍 -&gt; 2^N-1 -1<br>負數：<br>(1) 符號大小值法 (Sign Magnitude)<br>(2) 1's 補數表示法 (1's complement)<br>(3) 2's 補數表示法 (2's complement)</li></ol><h2>Compare</h2><p><img src="%E8%A3%9C%E6%95%B8%E6%AF%94%E8%BC%83.png" alt=""></p><p>ex1: 將下列值分別採 (1)符號大小 (2)1's 補數表示法 (3)2's 補數表示法<br>(1) +7 (2) -11 (3) -16 (4) 可表示 range?<br>Sol:<br>(1) 符號大小<br>+7 =&gt; 0 | 0111<br>-11 =&gt; 1 | 1011<br>-16 =&gt; 無法表示，因為 underflow<br>5 bits 可表示 range =&gt; <code>-(2^5-1 -1)~ +(2^5-1 -1)</code> =&gt; <code>-15 ~ +15</code><br>(2) 1's complement 表示<br>+7 =&gt; 0 | 0111<br>+11 = (01011)2 =&gt; 1's =&gt; 1 | 0100 =&gt; -11<br>-16 =&gt; 無法表示<br><code>-(2^5-1 -1) ~ +(2^5-1 -1)</code> =&gt; <code>-15 ~ +15</code><br>(3) 2's complement 表示<br>+7 =&gt; 0|0111<br>+11 =&gt; 0|1011 =&gt; 2's =&gt; 1|0101 =&gt; -11<br>+16 =&gt; 10000 =&gt; 2's =&gt; 10000 =&gt; -16<br>5 bits 的 range =&gt; <code>-2^5-1 ~ 2^5-1 -1</code> =&gt; <code>-16 ~ +15</code></p><p>ex2: 8 bits, 採 1's 補數, 表示 (1) 0 (2)最大,最小值<br>Sol:<br>(1)<br>+0: 00000000<br>-0: 11111111<br>(2)<br>8 bits 可表示 range:<br>=&gt; -(2^8-1 -1) ~ +(2^8-1 -1)<br>=&gt; -127 ~ +127<br>所以 最大：+127 01111111<br>最小： -127 10000000</p><p>ex3: 7 bits: 1101001 「反向」分別以 (1) Sign Magnitude (2) 1's complement notation (3) 2's complement notation 求原始值？<br>Sol:<br>(1) Sign Magnitude<br>1101001<br>-(101001)2 = -41<br>(2) 1's Complement notation<br>1|101001 =&gt; 1's =&gt; -(010110)2 = -22<br>(3) 2's Complement notation<br>1101001 =&gt; 2's =&gt; -(010111)2 = -23</p><h2>1's 及 2's complement 的整數運算法則</h2><ul><li><p>1's complement<br>同號：直接相加<br>異號：將減法變成補數的相加 <code>A-B = A+(B 的 1's 補數)</code><br>作法：</p><ol><li>B 變成 1's complement</li><li>A+(B 的 1's complement)</li><li>檢查最高位元有無溢位<br>無進位 =&gt; 負值<br>有進位 =&gt; 正值(須作端迴進位相加)</li></ol></li><li><p>2's complement<br>同號：直接相加<br>異號：將減法變成補數的相加<br>作法：</p><ol><li>A+(B 的 2's complement)</li><li>檢查最高位元有無進位<br>無進位 =&gt; 負值, 取 2's complement<br>有進位 =&gt; 正值, 進位捨去 (不須作端迴進位相加)</li></ol></li></ul><p>Ex1: 24-6, 6 bits 採 1's, 求過程？<br>Sol:<br>24 - 6 = 24 + (-6)<br>+24 = 011000<br>+6 = 000110 =&gt; 1's =&gt; 111001 =&gt; -6<br><img src="Ex1.png" alt=""></p><p>Ex2: 3-17, 6 bits 採 2's, 求過程？<br>Sol:<br>3-17 = 3+(-17)<br>+3 = (000011)2<br>-17 = (010001)2 =&gt; 2's =&gt; (101111)2 = -17<br><img src="Ex2.png" alt=""></p><p>Ex3: 以 2's complement(6 bits) 執行 (1) 27-14 (2) 8-19<br>Sol:<br>(1) 27-14 = 27 + (-14)<br>+27 = 011011<br>+14 = 001110 =&gt; 2's =&gt; 110010 =&gt; -14<br><img src="Ex3.png" alt="">(2) 8-19 = 8+(-19)<br>+8 = 001000<br>+19 = 010011 =&gt; 2's =&gt; 101101 =&gt; -19<img src="Ex4.png" alt=""></p><h2>溢位 (Overflow or underflow)</h2><p>指欲表示的數值, 超出可表示的範圍 (因為電腦儲存長度有限)<br><img src="%E6%BA%A2%E4%BD%8D.png" alt=""></p><ul><li>判別原則：若 A,B 2 數值皆於合理的表示範圍內,<br>則：<br>(1) A,B 一正一負 =&gt; No 溢位<br>(2) A,B 皆正 =&gt; 相加後 sign bit = 1, 有 overflow<br>(3) A,B 皆負 =&gt; 相加後 sign bit = 0, 有 underflow</li></ul><p>Ex: 8 bits, 採 2's complement 表示, 問 135-44 之結果？<br>Sol:<br>range 為 -2^8-1 ~ +(2^8-1 -1)<br>=&gt; -128 ~ +127<br>因為 135 &gt; 127 =&gt; 故已有 overflow<br>所以無法正確表示</p>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 基本電腦概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 補數 </tag>
            
            <tag> 溢位 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1-基本電腦概論-進制轉換</title>
      <link href="/repository/2021/02/17/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E9%80%B2%E5%88%B6%E8%BD%89%E6%8F%9B/"/>
      <url>/repository/2021/02/17/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E9%80%B2%E5%88%B6%E8%BD%89%E6%8F%9B/</url>
      
        <content type="html"><![CDATA[<h1>1.2 進制轉換</h1><hr><h2>10 進制 -&gt; r 進制</h2><pre><code>格式： (整數、小數)10 =&gt; 右下方的 101. 整數：     (1) 連除以 r, 直到商數為 0    (2) 由下而上取餘數2. 小數：    (1) 將小數部分連乘以 r, 直到小數部分為 0    (2) 由上而下取整數</code></pre><p>Note: 電腦儲存長度有限，故結果會產生截尾誤差</p><ul><li>例 1: 10 -&gt; r, (43.375)10 = ()2 = ()4 = ()8 = ()16<ol><li><p>2 進制：<img src="2%E9%80%B2%E5%88%B6.png" alt="">= (101011.011)2</p></li><li><p>4 進制：<img src="4%E9%80%B2%E5%88%B6.png" alt="">= (223.12)4</p></li><li><p>16 進制：<img src="16%E9%80%B2%E5%88%B6.png" alt="">= (2B.6)16</p></li></ol></li></ul><p>Note:<img src="10%E9%80%B2%E5%88%B6%E5%88%B016%E9%80%B2%E5%88%B6.png" alt=""></p><ul><li><p>例 2: 下列何者無法以 2 進制精確表示法？<br>=&gt; ( check: 將分數約分, 若分母不為 2 的冪次方則謂之)<br>(A) 2/8    2^2<br>(B) 3/16   2^4<br>(C) 9 7/18 2^2<br>(D) 2/5</p><p>Ans: D</p></li><li><p>例 3: (0.4)10 = (0.0110)2 =&gt; (0110 上方會加上長線為表示循環數)<br>Sol:<br>0.4 * 2 = 0.8<br>0.8 * 2 = 1.6<br>0.6 * 2 = 1.2<br>0.2 * 2 = 0.4<br>0.4 * 2 = X</p></li><li><p>例 4: x = 10/3; y = x * 3; 問為何 y 不等於 10?<br>Sol: 因為在第一個時間點已經發生截尾誤差</p></li></ul><h2>r 進制 -&gt; 10 進制</h2><pre><code>格式： (Xn....X1 X0 . Y0 Y1...Ym)r       |     |  |    |  |    |      =&gt;(整數.小數)10     r^n+..+r^1+r^0+r^-1+r^-2+r^-m   </code></pre><ul><li>例: (B2.C)16 = (178.75)10<br>Sol:<br>= 11 * 16^1+2 * 16^0+12 * 16^-1<br>= 176 + 2 + 12/16<br>= 178.75</li></ul><h2>2 的冪次方系統互換</h2><pre><code>Case1: 2^0, 2^1, 2^2....2^n    將 2 -&gt; 4, 8, 16 進制    將每 2 3 4 bits 為一單位作轉換Case2: 4, 8, 16 -&gt; 2 進制    將一數值用 4 3 2 個 bits 表示之</code></pre><p>Note:</p><ul><li><p>整數由右往左數, 不足左邊補 0</p></li><li><p>小數由左往右數, 不足右邊補 0</p></li><li><p>例 Case1:(001100100.011010)2<br>= (1210.1222)4<br>= (144.324)8<br>= (64.6A)16</p></li><li><p>例 Case2:(AB.2F)16 = (253.136)8<br>(010101011.001011110)2</p></li></ul><h2>數值運算(+, -, *, /)</h2><ul><li><p>例 1: (EACB)16 + (OAD2)16 = (172635)8<br>Sol:<img src="16%E8%BD%898%E9%80%B2%E5%88%B6.png" alt=""></p><pre><code>  Case2 =&gt; (001111010110011101)2  Case1 =&gt; (1 7 2 6 3 5)8</code></pre></li><li><p>例 2: (12CA)16 + (OD9C)16 = (110232)4<br>Sol:<img src="16%E8%BD%894%E9%80%B2%E5%88%B6.png" alt=""></p><pre><code>  Case2 =&gt; (0000010100101110)2  Case1 =&gt; (0 0 1 1 0 2 3 2)4</code></pre></li><li><p>例 3: (9)10 + (9)10 = (1010001)2<br>Sol: (9)10 * (9)10 = (81)10 = (1010001)2</p></li></ul><ul><li>例 4: (CB.A)16 -&gt; (203.625)10<br>Sol: CB.A = 16^1 * C + 16^0 * B + 16^-1 * A<br>= 12 * 16 + 11 * 1 + 10 * 1/16<br>= 192 + 11 + 5/8<br>= (203.625)10</li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 基本電腦概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 進制 </tag>
            
            <tag> 數值運算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter1-基本電腦概論-電腦系統介紹</title>
      <link href="/repository/2021/01/31/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E9%9B%BB%E8%85%A6%E7%B3%BB%E7%B5%B1%E4%BB%8B%E7%B4%B9/"/>
      <url>/repository/2021/01/31/Chapter1-%E5%9F%BA%E6%9C%AC%E9%9B%BB%E8%85%A6%E6%A6%82%E8%AB%96-%E9%9B%BB%E8%85%A6%E7%B3%BB%E7%B5%B1%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h1>1.1 電腦系統介紹</h1><hr><h2>電腦發展史</h2><table><thead><tr><th style="text-align:left">名稱</th><th style="text-align:center">組成</th><th style="text-align:center">體積</th><th style="text-align:right">Note</th></tr></thead><tbody><tr><td style="text-align:left">1G 第一代電腦</td><td style="text-align:center">由真空管</td><td style="text-align:center">大</td><td style="text-align:right">溫度高，速度慢</td></tr><tr><td style="text-align:left">2G 第二代電腦</td><td style="text-align:center">由電晶體</td><td style="text-align:center">小</td><td style="text-align:right">速度快，成本低，耗電低</td></tr><tr><td style="text-align:left">3G 第三代電腦</td><td style="text-align:center">由積體電路</td><td style="text-align:center">更小</td><td style="text-align:right">速度更快，成本更低，耗電更低</td></tr><tr><td style="text-align:left">4G 第四代電腦</td><td style="text-align:center">由超大積體電路</td><td style="text-align:center"></td><td style="text-align:right"></td></tr><tr><td style="text-align:left">5G 第五代電腦</td><td style="text-align:center">引入人工智慧技術</td><td style="text-align:center"></td><td style="text-align:right"></td></tr></tbody></table><h2>電腦架構</h2><p>常見：范紐曼架構 Von-Neumann特色：</p><ol><li>採用 <strong>內儲程式 Stored Programming</strong> 概念：指欲執行的程式(Program)跟資料(data)必須先載入記憶體(Mem.)中，再由 CPU 從 memory 中抓取資料處理之<ul><li>程式：Def: 由指令組合之集合，永已達到某一特定任務</li><li>指令：Instruction: 電腦最基本的執行單位，過程不可分割ex: 3+5 =&gt; <code>+</code> 是指令</li></ul></li><li><strong>循序執行 Sequential Execution</strong>:指令會依序一一執行<ul><li>圖示：<img src="%E5%BE%AA%E5%BA%8F%E5%9F%B7%E8%A1%8C.png" alt=""></li></ul></li></ol><h2>五大單元結構</h2><p><img src="5_units.png" alt=""></p><h4>補充：Von Neumann 瓶頸</h4><p>說明：<br>在 CPU 和 Mem. 處理速度不斷上升之下，資料的傳輸速度將成為瓶頸<br><img src="Von_Neumann_bottleneck.png" alt=""></p><h2>機器指令週期 (Machine Cycle)</h2><p>Def: 為 CPU 執行一個指令所需的時間<br>5個步驟：</p><ol><li>Instruction Fetch (IF) 指令擷取： 從記憶體中擷取指令</li><li>Decode (DE) 解碼： 針對擷取指令解碼，以了解所需運算為何</li><li>Fetch Operation (FO) 擷取運算元： 從記憶體中擷取 CPU 運算所需資料</li><li>Execution (EX) 執行： 針對擷取資料進行運算</li><li>Write to Memory (WM) 攜回記憶體：將運算結果寫回記憶體 (反正執行一定要抓運算元)<img src="maching_cycle.png" alt=""></li></ol><h2>Pipeline 管線技術</h2><p>Def: 指不同指令的不同執行週期重疊執行 (Overlay execution) 謂之<br>目的：提升系統的執行效能 (system performance 上升)<br>傳統指令：<br><img src="%E5%82%B3%E7%B5%B1%E6%8C%87%E4%BB%A4.png" alt=""></p><p>In Pipeline:<br><img src="In_pipeline.png" alt=""><strong>CPU 速度沒變快，只是效能提高</strong></p><h4>例：</h4><blockquote><p>Q: IF=3, DE=5, FO=2, EX=3, WM=2,問採 Pipeline 下, 100條指令, 所需花的總時間？<br>Sol:<br><img src="Ex1.png" alt=""><code>Max(IF, DE, FO, EX, WM) = 5</code><br>(N 條指令)<br>公式1: 第一條指令總時間 + (N-1) * Max(各週期值) = 510<br>(3+5+2+3+2) + 99 * 5<br>(常用)<br>公式2: 以最大週期數算所有週期 = 520</p></blockquote><h2>儲存單位</h2><ol><li>bit (位元) =&gt; 0 &amp; 1 =&gt; 為最基本單位</li><li>byte (位元組)  byte = 8 bits</li><li></li></ol><table><thead><tr><th>說明</th><th>Tera</th><th>Giga</th><th>Mega</th><th>Kilo</th></tr></thead><tbody><tr><td>正確</td><td>2^40</td><td>2^30</td><td>2^20</td><td>2^10</td></tr><tr><td>近似</td><td>10^12</td><td>10^9</td><td>10^6</td><td>10^3</td></tr></tbody></table><p>容量, 儲存相關 =&gt; 2進制<br>速度相關 =&gt; 10 進制</p><h2>匯流排</h2><ol><li>位址匯流排(Address Bus)<ul><li>負責傳送 CPU 所要存取的位址</li><li>可決定 CPU 所能處理的記憶體容量</li><li>N 條位址線可以擁有 2 的 N 次方的記憶空間，而其位址為 0 至 2 的 N 次方來減 1 (從 0 開始，編號 0~2^N^-1)</li></ul></li><li>資料匯流排(Data Bus)<ul><li>負責傳送 CPU 所要存取的資料</li><li>其線數的多少代表 CPU 的字組 Word (大小)</li><li>N 位元 CPU 亦就是此 CPU 有 N 條資料線 64 bits = 8 bytes word</li></ul></li><li>控制匯流排(Control Bus)<ul><li>負責傳送 CPU 所發出的控制訊號</li><li>Ex: 計算 =&gt; address line + data line<img src="Control_bus.png" alt=""></li></ul></li></ol><h4>例：</h4><blockquote><p>Q1: 電腦 Mem size = 4GB, 有 30 條 address line(決定格數), 問 CPU word size(data line =&gt; 決定格子大小)?<br>Sol:<br>格數 *  格子大小 = 總 Mem.<br>2^30 * X = 4GB<br>X = 4 bytes = 32 bits</p></blockquote><blockquote><p>Q2: Mem size = 4GB, 又 data line 有 32 條(32 bits = 4 bytes), 問 address line 至少有幾條？<br>Sol:<br>X * 4 bytes = 4GB<br>x = 1G = 2^30 格子 =&gt; 30 條</p></blockquote><h2>常見的時間單位</h2><table><thead><tr><th>毫(sec)</th><th>微(sec)</th><th>奈(sec)</th><th>皮(sec)</th></tr></thead><tbody><tr><td>1 ms</td><td>1 us</td><td>1 ns</td><td>1 ps</td></tr><tr><td>10^-3 sec</td><td>10^-6 sec</td><td>10^-9 sec</td><td>10^-12 sec</td></tr></tbody></table><p>1 秒 = 10^3 ms = 10^6 us = 10^9 ns = 10^12 ps</p><h2>硬體介紹</h2><ul><li>CPU (Central Processing Unit) 中央處理器<ol><li>於大型電腦中的 CPU = Control Unit + A.L.U + Memory</li><li>於 PC 中的 CPU = Control Unit + A.L.U + Register + Cache Memory</li></ol></li><li>CPU 速度衡量單位<ol><li>MIPS (Million Instruction Per Second): 每秒百萬個指令</li><li>MFLOPS (Million Floating-Point Operation Per Second): 每秒執行百萬個浮點數指令<br>優點： 衡量的基準點更趨一致性</li><li>CPI (Clock Per Instruction): 一條指令花多少的 clock cycle<ul><li>clock (時脈): 電腦內部一個類似時鐘的裝置</li><li>clock cycle (時脈週期): clock 計數一次稱為一個 clock cycle</li><li>clock rate (時脈頻率): 指 clock 計算的速度<br>ex: (1) 1MHz =&gt; 每秒做 10 的 6 次方個 clock cycle<br>(2) 2GHz =&gt; 每秒做 2 * 10 的 9 次方 clock cycle</li><li>Ex: CPI=5 =&gt; 代表一指令執行需 5 個 clock cycle</li></ul></li></ol><ul><li>Ex: 下列哪個選項錯？<br>(A) 8KB = 2^13 bytes (2^3 * 2^30)<br>(B) 8MB = 2^13 KB (2^3 * 2^20 = 2^13 * 2^10)<br>(C) 8GB = 2^33 bytes (2^3 * 2^30 = 2^33)<br>(D) 8GHz = 2^33 Hz (2^3 * 10^9 = 2^20) 錯</li></ul></li></ul><h2>CPU 的種類</h2><ol><li>RISC(Reduced): 最大特點是指令長度固定，指令格式種類少，定址方式種類少，易於設計超純量(Superscalar) 和 Pipeline，暫存器數量多，RISC 比 CISC 性能高很多<img src="RISC.png" alt=""></li><li>CISC(Complex): 大量的複雜指令、可變得指令長度、多種的定址方式，大大增加了解碼的難度<img src="CISC.png" alt=""></li></ol><ul><li><p>比較：</p><table><thead><tr><th>RISC</th><th>CISC</th></tr></thead><tbody><tr><td>指令數目少  定址模式少  register 多</td><td>指令數目多  定址模式多  register 少</td></tr><tr><td>指令長度固定，decode 易</td><td>指令長度不一，decode 不易</td></tr><tr><td>Compiler 翻譯出來的指令數目較多</td><td>Compiler 翻譯出來的指令數目較少</td></tr><tr><td>需強力的 Compiler 支援</td><td>不需強力的 Compiler 支援</td></tr><tr><td>代表的有 IBM RS6000, Alphachip</td><td>Intel Pentium 系列</td></tr><tr><td>指令數目少，所以能使用 <strong>硬體線路控制 (Hardware Control)</strong> 來製作  =&gt; 速度快</td><td>指令複雜度，採用 <strong>微程式 (Microprogramming control)</strong> 方式製作  =&gt; 較有彈性</td></tr><tr><td>配合 <strong>Pipeline (管線技術)</strong> 和 <strong>Superscalar (超純量)</strong>  =&gt; 效果佳  因為每個指令只需花一個 clock cycle</td><td>較 RISC 差</td></tr></tbody></table><p>Note: <strong>Pipeline (管線技術)</strong> 和 <strong>Superscalar (超純量)</strong> =&gt; 即 Pipeline + Parallel processing =&gt; 週期長度固定</p><p>圖示：<img src="Pipe+parallel.png" alt=""></p></li></ul><h2>記憶體階層</h2><p>Q: Why Memory Hierarchy?<br>A: 欲於 Speed 和 Cost 之間取得一平衡點</p><ul><li>策略：<ol><li>常用的 data =&gt; 往 speed 快的放</li><li>不常用的 data =&gt; 往 cost 低的放</li></ol></li></ul><h2>記憶體的種類</h2><ol><li>RAM (Random Access Memory) 隨機存取記憶體： SRAM, DRAM</li><li>ROM (Read Only Memory) 唯讀記憶體<ul><li>PROM (Programming ROM) 可程式唯讀記憶體<br>寫入方式：燒錄器<br>Read many, Write once</li><li>EPROM (Erasable-Programming ROM) 可抹除式的可程式僅讀記憶體<br>寫入方式：UV Light 紫外線<br>Read many, Write many</li><li>EEPROM (Electically Erasable-Programming ROM) 電子式(可覆寫)的可抹除-可程式化的唯讀記憶體<br>寫入方式：電流<br>Read many, Write many<br>相較於 EPROM 可寫入更多次</li></ul></li></ol><ul><li>Note: Flash ROM 快閃記憶體 (目前常用的 ROM) =&gt; 比 EEPROM 密度高(容量大)，又更便宜</li></ul><h2>ROM vs RAM</h2><table><thead><tr><th>ROM</th><th>RAM</th></tr></thead><tbody><tr><td>容量較小</td><td>容量較大</td></tr><tr><td>只可讀</td><td>可讀可寫</td></tr><tr><td>Power-off, data 存在</td><td>Power-off, data 消失</td></tr><tr><td>儲存：BIOS, Bootstrap Loade</td><td>儲存：program, data</td></tr><tr><td>非揮發性 (Non-Volatile)</td><td>揮發性 (Volatile)</td></tr></tbody></table><h2>DRAM vs SRAM</h2><table><thead><tr><th>項目</th><th>DRAM (Dynamic) 動態隨機存取記憶體</th><th>SRAM (Static)靜態隨機存取記憶體</th></tr></thead><tbody><tr><td>存取速度</td><td>慢</td><td>快</td></tr><tr><td>價格</td><td>低</td><td>高</td></tr><tr><td>使用元件</td><td>電容 (capaitor)</td><td>正反器 (filp-flop)</td></tr><tr><td>更新電路(Refresh)</td><td>需更新</td><td>不需更新</td></tr><tr><td>電路密度</td><td>密度高</td><td>密度低</td></tr><tr><td>用途</td><td>作為主記憶體 (Main Memory)</td><td>作為快取記憶體 (Cache)</td></tr></tbody></table><ul><li>Ex: <img src="DRAM_vs_SRAM.png" alt=""></li></ul><h2>I/O的定址方式</h2><ol><li>隔離式 I/O (isolated I/O): 不佔記憶體空間，但須額外指令來區分</li><li>記憶體映射式 I/O (memory mapped I/O): 不需額外指令，但佔 Memory 空間</li></ol><h2>圖形表示法</h2><ol><li>點陣圖 bitmap<ul><li>graphic 由許多點集合而成，每一個點為一個像素 (pixel)， pixel 是顯示器的基本單位 (Bit 是最基本的儲存單位)</li><li>當 pixel 越多解析度就越高</li></ul></li><li>向量圖 vector graphic<ul><li>利用 Math 貝茲 (Bezier) 曲線去描述圖形輪廓</li><li>可任意的將圖形放大、縮小、旋轉，而不會出現鋸齒狀</li></ul></li></ol><ul><li><p>Ex1: 圖形 size 為 1024 * 768, 而每個 pixels 需使用 24 bits, 問此圖 size?<br>Sol: 1024 * 768 * 24 bits(3 bytes) = 2304 KB 約等於 2.3 MB</p></li><li><p>Ex2: 呈上，此圖可表示的顏色有幾種？<br>Sol: 1 bit =&gt; 2^1.....N bits = 2^N, Ans: 2 的 24 次方</p></li><li><p>Ex3: 若轉為黑白差幾倍？<br>Sol: 各 pixel 只需 1 bit, 所以差 24 倍</p></li><li><p>Ex4: 圖 1024 * 768, 由三色系 RGB 組成, 又各色系需 8 bits, 問圖的大小？<br>Sol: 8 bits = 1 byte<img src="RGB.png" alt=""></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
          <category> 計算機概論 </category>
          
          <category> 基本電腦概論 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 電腦架構 </tag>
            
            <tag> 匯流排 </tag>
            
            <tag> CPU </tag>
            
            <tag> 記憶體 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo command</title>
      <link href="/repository/2021/01/31/Hexo-command/"/>
      <url>/repository/2021/01/31/Hexo-command/</url>
      
        <content type="html"><![CDATA[<h1>Hexo Command</h1><h2>&lt;!--more--&gt;</h2><h3>Command</h3><ul><li><code>hexo new post &quot;my blog&quot;</code></li><li><code>hexo g</code> generate</li><li><code>hexo g -d</code> deploy</li><li><code>hexo new page search</code> =&gt; 增加一個新的資料夾， url也會增加一層 <code>/search</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 靜態網頁生成器 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes-intro</title>
      <link href="/repository/2020/09/20/Kubernetes-intro/"/>
      <url>/repository/2020/09/20/Kubernetes-intro/</url>
      
        <content type="html"><![CDATA[<h1>Kubernetes Introduction</h1><h2>&lt;!--more--&gt;</h2><h2>What is kubernetes?</h2><ul><li><p>用於自動部署、擴充和管理「容器化」應用程式的開源系統，組成 kubernetes 的設計概念為鬆耦合和可延伸</p></li><li><p>是一個可以幫助&lt;b&gt;管理微服務&lt;/b&gt;的系統，其可自動化部署和管理多台機器上的多個容器</p></li><li><p><code>解決手動部署多個容器到多台機器上並監測管理這些容器的狀態非常麻煩</code></p></li><li><p>K8S 提供一個平台以&lt;b&gt;較高層次&lt;/b&gt;的&lt;b&gt;抽象化&lt;/b&gt;去&lt;b&gt;自動化&lt;/b&gt;操作和管理容器們</p></li></ul><h4>Automated container deployment, scaling, and management</h4><ul><li>同時部署多個 containers 至多台機器上 =&gt; Deployment</li><li>服務的乘載量有變化時，可對容器做自動擴展 =&gt; Scaling</li><li>管理多個 containers 的狀態，自動偵測和遇故障時重啟 container =&gt; Management</li></ul><h2>K8S 4 elements</h2><ol><li>Pod</li></ol><ul><li>K8S 運作最小單元，1 pod 對應到 1 個 application. Ex: 1 pod =&gt; 1 API server</li><li>每一個 pod 有一個身分證，就是 <code>yaml</code> 檔</li><li>每一個 pod 可以用有一個至多個的 containers，但通常 1 pod 有一個 container 是最好的</li><li>同一個 pod 中的 containers 共享相同的資源和網路，彼此透過 local port number 溝通</li></ul><ol start="2"><li><p>Worker nodeK8S 運作最小的硬體單位，1 worker node -&gt; 1 台機器(Notebook, VM =&gt; AWS EC2 | GCP computer engine)每個 node 有 3 個元件：</p><ol><li>kubelet: 該 node 的 manager, 負責管理該 node 上所有的 pods 的狀態並負責與 master 溝通</li><li>kube-proxy: 該 node 的傳訊員，負責更新 node 的 iptables，讓 K8S 中不在該 node 的其他物件可以得知，該 node 上所有 pods 的最新狀態</li><li>container runtime: 該 node 中真正負責 container 執行的程式，以 docker 為例，其對應的 container runtime =&gt; docker engine</li></ol></li><li><p>Master nodeK8S 運作指揮中心，一個特化的 node，負責管理所有其他的 node一個 master node 有 4 個組件：</p><ol><li>kube-apiserver:<ul><li>管理整個 K8S 所需的 API 接口(Endpoint) Ex: 從 command line 下 <code>kubectl</code> 指令會傳送到這裡</li><li>負責 node 之間的溝通橋樑，每個 node 彼此不能直接溝通，須透過 apiserver 轉介</li><li>負責 K8S 中的請求的身份認證和授權</li></ul></li><li>etcd: 用來存放 K8S Cluster 的 data 做為備份，當 master 因為某些原因而故障時，可透過 etcd 幫忙還原 K8S 的狀態</li><li>kube-controller-manager:<ul><li>負責管理並運行 K8S controller 的組件 =&gt; controller 就是 K8S 裡一個個負責監視 Cluster 狀態的 process. Ex: Node Controller, Replication Controller</li><li>這些 process 會在 Cluster 與預期狀態(desire state)不符時，嘗試更新現有狀態(current state). Ex: 現在要多開多台機器以應付突然增加的流量，預期狀態會更新成 N+1，現有狀態 N，此時相對應的 controller 就會想辦法多開一台機器</li><li>controller-manager 的監視和嘗試更新也都需要透過訪問 kube-apiserver 達成</li></ul></li><li>kube-scheduler:<ul><li>整個 K8S 的 pods 調度員</li><li>scheduler 會監視新建立但尚未被指定要跑在哪個 node 上的 pod，並根據每個 node 上面的資源規定，硬體限制...條件去協調出一個最適合放置的 node 讓該 pod 跑</li></ul></li></ol></li><li><p>ClusterK8S 中多個 node 和 master 的集合基本上可以想成在同一個環境裡，所有 node 集合在一起的單位</p></li></ol><p><img src="kubernetes_flow.png" alt=""></p><h3>REFERENCES</h3><ul><li><a href="https://medium.com/@C.W.Hu/kubernetes-basic-concept-tutorial-e033e3504ec0" target="_blank" rel="noopener">Kubernetes 基礎教學</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> pod </tag>
            
            <tag> container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-intro</title>
      <link href="/repository/2020/09/20/docker-intro/"/>
      <url>/repository/2020/09/20/docker-intro/</url>
      
        <content type="html"><![CDATA[<h1>Docker Introduction</h1><h2>&lt;!--more--&gt;</h2><h2>The Existence of docker</h2><p>Before: 傳統 VM 因為需額外安裝 OS，導致啟動慢，佔較大記憶體問題Solution: 以應用程式為核心虛擬化，取代傳統需要 OS 的虛擬化技術</p><h2>What is virtualization?</h2><p>虛擬化是模擬出一個環境，讓程式可在不同硬體上執行都以為是在同一個環境中執行</p><p>Sol: <code>避免在電腦上可運行的程式，移至其他電腦環境卻無法運行</code></p><h3>虛擬化技術有兩種</h3><ol><li>系統層級的虛擬化技術 ex: VM (Virtual box)</li><li>作業層級的虛擬化技術 ex: Container (Docker)</li></ol><p>VM vs Container</p><table><thead><tr><th>VM</th><th>Container</th></tr></thead><tbody><tr><td>以 OS 為中心</td><td>以應用程式為中心</td></tr><tr><td>目標： 建立一個獨立的環境，方便在不同硬體中移動</td><td>目標： 改善 VM 因為需要裝 Guest OS 導致啟動慢，佔大記憶體問題</td></tr></tbody></table><p>在 OS 上虛擬化，透過 container Manager 將一個 application 所需的程式碼、函式庫打包，建立資源控管機制隔離各 container，並分配 Host OS 上的系統資源透過容器，application 不需再另外安裝 OS 也可以執行</p><p><img src="container.png" alt=""></p><h3>Docker 3 元素</h3><ol><li><p>Image:像模板，重複產生容器實體，透過 image，可以快速的產生執行 app 的 containerimage 可由 dockerfile 建立</p></li><li><p>Container:容器是 image 建立出來的執行實例，每個 container 都是分開、隔離的</p></li><li><p>Repository:集中存放 image 的地方</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> virtualization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Channel</title>
      <link href="/repository/2020/09/10/GoLang-Channel/"/>
      <url>/repository/2020/09/10/GoLang-Channel/</url>
      
        <content type="html"><![CDATA[<h1>Channel</h1><h2>&lt;!--more--&gt;</h2><p>Channel is a pipeline, push and pull the value.Channel will wait for another task finished and keep going. =&gt; this can make each <code>goroutine</code> work concurrently</p><h3>Create Channel</h3><p><code>ch := make(chan int)</code></p><h3>Push into channel</h3><p><code>ch &lt;- v</code></p><h3>Pull</h3><p><code>v := &lt;-ch</code></p><h2>Channel Block</h2><p>2 conditions make channel block:</p><ol><li>Push into channel, but when other goroutine haven't pull out, it will be forced to wait other finish.</li><li>When channel is empty, the <code>goroutine</code> which want to pull, it will be forced to wait other <code>goroutine</code> to pull and push</li></ol><h3>The waiting case of Goroutine push into channel</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// calculate goroutine</span></span><br><span class="line">fmt.Println(<span class="string">"Starts calculating"</span>)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">"Ends calculating"</span>)</span><br><span class="line"></span><br><span class="line">ch &lt;- <span class="string">"END"</span> <span class="comment">// goroutine will be forced to wait</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"calculate goroutine finished"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second) <span class="comment">// make main is slower than goroutine</span></span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(<span class="string">"main goroutine finished"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Starts calculating            </span><br><span class="line">Ends calculating</span><br><span class="line">calculate goroutine finished  </span><br><span class="line">END                           </span><br><span class="line">main goroutine finished</span><br></pre></td></tr></table></figure></p><ul><li>Use time.Sleep to force main slower than calculate</li><li>Put END into channel</li><li>But main haven't pull out data in Channel, so calculate will be forced to wait, so&quot; main goroutine finished &quot; isn't show immediately</li><li>Main pull out data in Channel</li><li>Main finished</li></ul><h3>The waiting case of Goroutine pull out from channel</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Starts calculating"</span>)</span><br><span class="line">time.Sleep(time.Second)   <span class="comment">// Heavy calculation</span></span><br><span class="line">fmt.Println(<span class="string">"Ends calculating"</span>)</span><br><span class="line"></span><br><span class="line">ch &lt;- <span class="string">"ENDS"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"calculate goroutine finished"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"main goroutine is waiting for channel to receive value"</span>)</span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// goroutine will be forced to wait</span></span><br><span class="line">fmt.Println(<span class="string">"main goroutine finished"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main goroutine is waiting for channel to receive value </span><br><span class="line">Starts calculating</span><br><span class="line">Ends calculating</span><br><span class="line">calculate goroutine finished</span><br><span class="line">ENDS                                                    </span><br><span class="line">main goroutine finished</span><br></pre></td></tr></table></figure></p><ul><li>Calculate haven't pushed into Channel when main pulled out, it will forced main to wait.</li><li>The last line of main isn't show up immediately</li><li>Put END into channel</li><li>Main pull out data in Channel</li><li>main finished</li></ul><h2>Unbuffered Channel</h2><ul><li>Push a data will cause push side waiting</li><li>Pull out without data will cause pull side waiting</li></ul><h2>Buffered Channel</h2><p><code>ch := make(chan int, 100)</code>The second variable will define buffer length, it will only be blocked cause to wait when data is full in buffer.</p><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// unbuffered</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan send]:</span><br><span class="line">main.main()</span><br><span class="line">        D:&#x2F;go&#x2F;goChannel_goRoutine&#x2F;test.go:8 +0x49</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure></p><ol><li>only one goroutine: main</li><li>Without other goroutine pull out data in Channel after push &quot;1&quot;, so it block!</li><li>Because main is already blocked when push into data, so it will never execute pull out and cause to deadlock.</li></ol><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// buffered</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></p><ol><li>After pushed into channel and it didn't over buffer length, so it won't be blocked.</li></ol><h2>Channel in Loop</h2><h2>Channel in range</h2><h2>Avoid waiting by using select</h2>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Thread </tag>
            
            <tag> Goroutine </tag>
            
            <tag> Channel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Goroutine</title>
      <link href="/repository/2020/09/07/GoLang-Goroutine/"/>
      <url>/repository/2020/09/07/GoLang-Goroutine/</url>
      
        <content type="html"><![CDATA[<h1>Goroutine</h1><h2>&lt;!--more--&gt;</h2><p>Goroutine is like the thread in Go, which makes Go create multitask.Only calls goroutine in main function when program started, which names &lt;b&gt;main&lt;/b&gt; goroutine.<code>go a(x, y)</code>Function begin with go can make <code>a</code> run in another goroutine.Main goroutine end, other goroutine will be force to close.</p><h2>Single Thread</h2><p>Each lines of program is executed by sequence</p><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    reply(<span class="string">"Ni"</span>)</span><br><span class="line">    reply(<span class="string">"How"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reply</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">        fmt.Println(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Output:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Ni</span><br><span class="line">Ni</span><br><span class="line">Ni</span><br><span class="line">Ni</span><br><span class="line">How</span><br><span class="line">How</span><br><span class="line">How</span><br><span class="line">How</span><br><span class="line">How</span><br></pre></td></tr></table></figure><img src="single_thread.JPG" alt=""></p><h2>Multiple Thread</h2><p>Execute goroutine which is the number of CPU in the same time at most.</p><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> reply(<span class="string">"How"</span>)</span><br><span class="line">    reply(<span class="string">"Ni"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Output:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">How</span><br><span class="line">Ni</span><br><span class="line">Ni</span><br><span class="line">How</span><br><span class="line">Ni</span><br><span class="line">How</span><br><span class="line">Ni</span><br><span class="line">How</span><br><span class="line">Ni</span><br></pre></td></tr></table></figure><img src="multiple_thread.JPG" alt=""></p><h2>Wait</h2><p>Here comes the problem which needs waiting.When <code>main</code> goroutine closed, others two goroutine will be force to close and lead to error.Sol: Wait other goroutine end and close main goroutine.<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">go</span> reply(<span class="string">"Ni"</span>)</span><br><span class="line">    <span class="keyword">go</span> reply(<span class="string">"How"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>It contains 3 goroutine:</p><ol><li><code>main</code></li><li><code>go reply(&quot;Ni&quot;)</code></li><li><code>go reply(&quot;How&quot;)</code></li></ol><p>&lt;b&gt; Three ways to wait &lt;/b&gt;</p><ol><li><code>time.Sleep</code>: sleep in specific time</li><li><code>sync.WaitGroup</code>: Wait until specific numbers of <code>Done()</code> use</li><li>Channel block: use &lt;b&gt;wait when received&lt;/b&gt; this characteristic to avoid thread keep executing</li></ol><h3>time.Sleep</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> reply(<span class="string">"Ni"</span>)</span><br><span class="line">    <span class="keyword">go</span> reply(<span class="string">"How"</span>)</span><br><span class="line"></span><br><span class="line">    time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="timeSleep.JPG" alt=""></p><p>&lt;b&gt;cons:&lt;/b&gt; It doesn't know the goroutine execution time is greater or less than sleep time.</p><h3>sync.WaitGroup</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg := <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line">    wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> reply(<span class="string">"Ni"</span>, wg)</span><br><span class="line">    <span class="keyword">go</span> reply(<span class="string">"How"</span>, wg)</span><br><span class="line"></span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reply</span><span class="params">(s <span class="keyword">string</span>, wg *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> wg.Done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">        fmt.Println(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Create <code>WaitGroup</code> Counter which numbers is same as the goroutine that want to wait.Put <code>WaitGroup</code> to goroutine, using <code>wg.Done()</code> to  minus 1 when execution finished.<code>wg.Wait()</code> will wait until counter to 0.</p><p><img src="sync_waitgroup.JPG" alt=""></p><h3>Channel</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">// Build a channel</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> reply(<span class="string">"Ni"</span>, ch)</span><br><span class="line"><span class="keyword">go</span> reply(<span class="string">"How"</span>, ch)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read channel out</span></span><br><span class="line">&lt;-ch</span><br><span class="line">    &lt;-ch</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">reply</span><span class="params">(s <span class="keyword">string</span>,c <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// put END into c</span></span><br><span class="line">c &lt;- <span class="string">"END"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">How</span><br><span class="line">Ni</span><br><span class="line">Ni</span><br><span class="line">How</span><br><span class="line">Ni</span><br><span class="line">How</span><br><span class="line">How</span><br><span class="line">Ni</span><br><span class="line">Ni</span><br><span class="line">How</span><br></pre></td></tr></table></figure></p><p>With 2 goroutine, need to wait 2 <code>End</code> push into channel to end main goroutine.</p><p><img src="channel.png" alt=""></p><h2>Race Condition</h2><h3>Multi-Thread Shared Variables</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">total := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">total++</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line"></span><br><span class="line">fmt.Println(total)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="mutipleThread_sharedVar.JPG" alt=""></p><p>Ex: Current in 60, while in multi-thread</p><ol><li><code>goroutine1</code> get 60 to add</li><li><code>goroutine2</code> probably got <code>total</code> value before <code>goroutine1</code> do <code>total++</code></li><li>In this condition, the result will be 61, not 62</li></ol><p>Doing the addition in the same <code>total</code> variable in multiple goroutine will lead to operation error because it cannot make sure the secure of value when assign it. =&gt; &lt;b&gt;Race Condition&lt;/b&gt;</p><p>There are 2 solutions:</p><ol><li>Sync.Mutex</li><li>Channel</li></ol><h3>Sync.Mutex (互斥鎖)</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SafeNumber <span class="keyword">struct</span> &#123;</span><br><span class="line">v <span class="keyword">int</span></span><br><span class="line">mux sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">total := SafeNumber&#123;v: <span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">total.mux.Lock()</span><br><span class="line">total.v++</span><br><span class="line">total.mux.Unlock()</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">total.mux.Lock()</span><br><span class="line">fmt.Println(total.v)</span><br><span class="line">total.mux.Unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000</span><br></pre></td></tr></table></figure></p><p><img src="sync_mutex.JPG" alt=""></p><h3>Via Channel - security of variable</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">total := <span class="number">0</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ch &lt;- total</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch &lt;- &lt;-ch + <span class="number">1</span></span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">fmt.Println(&lt;-ch)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1000</span><br></pre></td></tr></table></figure></p><p><img src="channel_var.JPG" alt=""></p><ol><li>When <code>goroutine1</code> pull out, and there is nothing in Channel</li><li>Because there is nothing in Channel, cause <code>goroutine2</code> waiting</li><li>When <code>goroutine1</code> finished, <code>total</code> pushed to Channel</li><li>When <code>goroutine2</code> find out there is something in Channel, pull out and wait to operate.</li></ol><h3>REFERENCES</h3><ul><li><a href="https://peterhpchen.github.io/2020/03/08/goroutine-and-channel.html" target="_blank" rel="noopener">Source</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Thread </tag>
            
            <tag> Goroutine </tag>
            
            <tag> Channel </tag>
            
            <tag> WaitGroup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-grpc</title>
      <link href="/repository/2020/07/08/GoLang-grpc/"/>
      <url>/repository/2020/07/08/GoLang-grpc/</url>
      
        <content type="html"><![CDATA[<h2>GRPC</h2><p>&lt;!--more--&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Protocol Buffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Protocol Buffer</title>
      <link href="/repository/2020/06/01/GoLang-Protocol-Buffer/"/>
      <url>/repository/2020/06/01/GoLang-Protocol-Buffer/</url>
      
        <content type="html"><![CDATA[<h2>Protocol Buffer</h2><p>&lt;!--more--&gt;</p><p>&lt;b&gt;Protocol Buffer&lt;/b&gt; is like json、xml, but smaller, faster, simplifier.Only have to define data structure once, and it will generate the file which is match to your programming language automatically, let you use directly.</p><h3>Structure is Document</h3><h4>Define data structure.</h4><p>File should be <code>.proto</code> as suffix.</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Format is Proto v3</span><br><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; User</span><br><span class="line">message User &#123;</span><br><span class="line">    string username &#x3D; 2;</span><br><span class="line">    string password &#x3D; 3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Post</span><br><span class="line">message Post &#123;</span><br><span class="line">    int64 id       &#x3D; 1;</span><br><span class="line">    string content &#x3D; 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4>What is the number after each field?</h4><p>In fact, these are protocol buffer's id when using decode and encode.These will make you remove one of the field without messing up entire data structure encoding or decoding.</p><h3>Pros and Cons with Json</h3><ul><li>More lightweight</li><li>Confusion: being encoded</li><li>Performance high</li><li>Much more convenient: structure is your data model, don't have to create object to mapping these data</li><li>Clear, no need document: <code>.proto</code> is your document</li></ul><h3>Installation</h3><ol><li>Install protocol buffer generator</li></ol><ul><li>First, install <code>protoc</code>, which is the tool for transforming <code>.proto</code> to program.</li><li>https://github.com/protocolbuffers/protobuf/releases install the protocol compiler</li><li>After unzip, put the <code>bin/protoc</code> file to <code>$PATH</code>, this make us to use in terminal.</li></ul><ol start="2"><li>Install Golang plugin</li></ol><ul><li><code>go get -u github.com/golang/protobuf/{proto,protoc-gen-go}</code></li><li>Do <code>touch .bash_profile</code>, and <code>export PATH=$PATH:/Users/pingjing/go/bin</code> to execute in terminal.</li></ul><ol start="3"><li>Transform proto document</li></ol><ul><li><p>Create a <code>example.proto</code> file<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Format is Proto v3</span><br><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成的程式在 Golang 中將會是屬於 protobuf 套件</span><br><span class="line">package protobuf;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; User</span><br><span class="line">message User &#123;</span><br><span class="line">    int64 id        &#x3D; 1;</span><br><span class="line">    string username &#x3D; 2;</span><br><span class="line">    string password &#x3D; 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>protoc --go_out=. *.proto</code> transform to golang</p></li><li><p>And we will get a file <code>example.pb.go</code> which is belongs to <code>protobuf</code> plugin.</p></li><li><p>Then we can use this structure in golang.</p></li></ul><ol start="4"><li>Decode and Encode</li></ol><ul><li><p>Create a folder <code>/protobuf</code>, and put <code>example.pb.go</code> in it.</p></li><li><p>Create <code>main.go</code><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"./protobuf"</span></span><br><span class="line"><span class="string">"github.com/golang/protobuf/proto"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create a User format, and put data into it.</span></span><br><span class="line">data := protobuf.User&#123;</span><br><span class="line">Id:       <span class="number">12345</span>,</span><br><span class="line">Username: <span class="string">"Yu Wang"</span>,</span><br><span class="line">Password: <span class="string">"Hello"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make data encode to Protocol buffer format (Be aware of using Pointer)</span></span><br><span class="line">dataBuffer, _ := proto.Marshal(&amp;data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make the data which is already encoded, decode to protobuf.User format</span></span><br><span class="line"><span class="keyword">var</span> user protobuf.User</span><br><span class="line">proto.Unmarshal(dataBuffer, &amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output the result</span></span><br><span class="line">fmt.Println(user.Id, <span class="string">" "</span>, user.Username, <span class="string">" "</span>, user.Password)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>go run main.go</code></p></li><li><p>Output <code>12345 Yu Wang Hello</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Protocol Buffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Token &amp; Middleware</title>
      <link href="/repository/2020/05/31/GoLang-Token/"/>
      <url>/repository/2020/05/31/GoLang-Token/</url>
      
        <content type="html"><![CDATA[<h2>Token 使用</h2><h2>&lt;!--more--&gt;</h2><p>建立一個 services folder，使用於 authorization</p><p>使用 <code>github.com/dgrijalva/jwt-go</code> package</p><p>建立存於 token 裡的資料於 model<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Claims <span class="keyword">struct</span> &#123;</span><br><span class="line">    UserId   <span class="keyword">int</span>    <span class="string">`json:"userId"`</span></span><br><span class="line">    AuthUuid <span class="keyword">string</span> <span class="string">`json:"authUuid"`</span></span><br><span class="line">    Exp      <span class="keyword">int64</span>  <span class="string">`json:"exp"`</span></span><br><span class="line">    jwt.StandardClaims</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>function <code>GenerateToken</code>將資料包進，並產生 token<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GenerateToken</span><span class="params">(userId <span class="keyword">int</span>, authUuid <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    token := jwt.NewWithClaims(jwt.SigningMethodHS256, &amp;model.Claims&#123;</span><br><span class="line">        UserId:   userId,</span><br><span class="line">        AuthUuid: authUuid,</span><br><span class="line">        Exp:      time.Now().Add(time.Hour * <span class="number">2</span>).Unix(),</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> token.SignedString([]<span class="keyword">byte</span>(<span class="string">"YuSecret"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>function <code>ParseToken</code>驗證 token 的正確性，並將其放進 model AuthDetails<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseToken</span><span class="params">(claims model.Claims, reqToken <span class="keyword">string</span>)</span> <span class="params">(*model.AuthDetails, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    _, err := jwt.ParseWithClaims(reqToken, &amp;claims, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Unexpected signing method: %v"</span>, token.Header[<span class="string">"alg"</span>])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">byte</span>(<span class="string">"YuSecret"</span>), <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;model.AuthDetails&#123;</span><br><span class="line">        AuthUuid: claims.AuthUuid,</span><br><span class="line">        UserId:   claims.UserId,</span><br><span class="line">    &#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><p>於 controller 驗證<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">requestToken := r.Header.Get(<span class="string">"authorization"</span>)</span><br><span class="line"></span><br><span class="line">request, _ := services.ParseToken(model.Claims&#123;&#125;, requestToken)</span><br></pre></td></tr></table></figure></p><h2>Middleware 使用</h2><ul><li>function <code>TokenMiddleware</code>透過 Middleware 去呼叫 function 驗證 token 的正確性<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TokenMiddleware</span><span class="params">(w http.ResponseWriter, r *http.Request, next http.HandlerFunc)</span></span> &#123;</span><br><span class="line">    tokenStr := r.Header.Get(<span class="string">"authorization"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tokenStr == <span class="string">""</span> &#123;</span><br><span class="line">        handler.RespondError(w, http.StatusUnauthorized, handler.New(<span class="literal">false</span>, handler.Message&#123;Code: <span class="string">"0401"</span>, Details: <span class="string">"Unauthorized"</span>&#125;, <span class="literal">nil</span>, handler.Meta&#123;&#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    token, _ := jwt.Parse(tokenStr, <span class="function"><span class="keyword">func</span><span class="params">(token *jwt.Token)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok &#123;</span><br><span class="line">            handler.RespondError(w, http.StatusUnauthorized, handler.New(<span class="literal">false</span>, handler.Message&#123;Code: <span class="string">"0401"</span>, Details: <span class="string">"Unauthorized"</span>&#125;, <span class="literal">nil</span>, handler.Meta&#123;&#125;))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">byte</span>(<span class="string">"YuSecret"</span>), <span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !token.Valid &#123;</span><br><span class="line">        handler.RespondError(w, http.StatusUnauthorized, handler.New(<span class="literal">false</span>, handler.Message&#123;Code: <span class="string">"0401"</span>, Details: <span class="string">"Unauthorized"</span>&#125;, <span class="literal">nil</span>, handler.Meta&#123;&#125;))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    next.ServeHTTP(w, r)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> JWT </tag>
            
            <tag> Middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Router design</title>
      <link href="/repository/2020/02/27/GoLang-Router-design/"/>
      <url>/repository/2020/02/27/GoLang-Router-design/</url>
      
        <content type="html"><![CDATA[<h2>規劃路由</h2><h2>&lt;!--more--&gt;</h2><h3>定義路由</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> App <span class="keyword">struct</span> &#123;</span><br><span class="line">    Router *mux.Router</span><br><span class="line">    db     *gorm.DB</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>將上次 create 的 database connection 放入至 router 中建立 DB 連線，並進行 DB Migrate使用 http.NewServeMux() 處理多路由<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Initialize</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a.db = database.Connect(a.db)</span><br><span class="line">    a.db = database.Migrate(a.db)</span><br><span class="line"></span><br><span class="line">    a.Router = mux.NewRouter()</span><br><span class="line"></span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line"></span><br><span class="line">mux.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">    a.setRouters()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>設定路由 (包括 middleware )使用 negroni 處理 middleware<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">setRouters</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">apiBase := mux.NewRouter()</span><br><span class="line">api := apiBase.PathPrefix(<span class="string">"/api"</span>).Subrouter()</span><br><span class="line"></span><br><span class="line">a.UnAuthPost(<span class="string">"/auth/register"</span>, a.Register)</span><br><span class="line">a.UnAuthPost(<span class="string">"/auth/login"</span>, a.Login)</span><br><span class="line"></span><br><span class="line">a.Get(api, <span class="string">"/own/products"</span>, a.GetProducts)</span><br><span class="line">a.Post(api, <span class="string">"/own/products"</span>, a.PostProduct)</span><br><span class="line">a.Get(api, <span class="string">"/own/products/&#123;id&#125;"</span>, a.GetProduct)</span><br><span class="line">a.Patch(api, <span class="string">"/own/products/&#123;id&#125;"</span>, a.UpdateProduct)</span><br><span class="line">a.Get(api, <span class="string">"/own/tags"</span>, a.GetTags)</span><br><span class="line">a.Get(api, <span class="string">"/own/delete/products"</span>, a.GetDeletedProducts)</span><br><span class="line">a.Delete(api, <span class="string">"/own/products/&#123;id&#125;"</span>, a.DeleteProduct)</span><br><span class="line">a.Get(api, <span class="string">"/auth/logout"</span>, a.Logout)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using middleware</span></span><br><span class="line">a.Router.PathPrefix(<span class="string">"/api"</span>).Handler(negroni.New(</span><br><span class="line">negroni.HandlerFunc(middleware.TokenMiddleware),</span><br><span class="line">negroni.NewLogger(),</span><br><span class="line">negroni.Wrap(apiBase),</span><br><span class="line">))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>將所有 GET/POST... 等 wrap 起來也設定所有連接 controller 的 function<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">UnAuthPost</span><span class="params">(path <span class="keyword">string</span>, f <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request)</span>)</span> &#123;</span><br><span class="line">a.Router.HandleFunc(path, f).Methods(<span class="string">"POST"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Wrap GET method in router</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Get</span><span class="params">(muxRouter *mux.Router, path <span class="keyword">string</span>, f <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request)</span>)</span> &#123;</span><br><span class="line">muxRouter.Path(path).HandlerFunc(f).Methods(<span class="string">"GET"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Post</span><span class="params">(muxRouter *mux.Router, path <span class="keyword">string</span>, f <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request)</span>)</span> &#123;</span><br><span class="line">muxRouter.Path(path).HandlerFunc(f).Methods(<span class="string">"POST"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Patch</span><span class="params">(muxRouter *mux.Router, path <span class="keyword">string</span>, f <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request)</span>)</span> &#123;</span><br><span class="line">muxRouter.Path(path).HandlerFunc(f).Methods(<span class="string">"PATCH"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Delete</span><span class="params">(muxRouter *mux.Router, path <span class="keyword">string</span>, f <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request)</span>)</span> &#123;</span><br><span class="line">muxRouter.Path(path).HandlerFunc(f).Methods(<span class="string">"DELETE"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controllers to manage data</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Register</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.Register(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.Login(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Logout</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.Logout(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">GetProducts</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.GetProducts(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">PostProduct</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.PostProduct(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">GetProduct</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.GetProduct(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">UpdateProduct</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.UpdateProduct(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">GetTags</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.GetTags(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">GetDeletedProducts</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.GetDeletedProducts(a.db, w, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">DeleteProduct</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">controller.DeleteProduct(a.db, w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需使用 cors</p><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Run</span><span class="params">(port <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">n := negroni.Classic()</span><br><span class="line"></span><br><span class="line">c := cors.New(cors.Options&#123;</span><br><span class="line">AllowedOrigins: []<span class="keyword">string</span>&#123;<span class="string">"*"</span>&#125;,</span><br><span class="line">AllowedMethods: []<span class="keyword">string</span>&#123;<span class="string">"GET"</span>, <span class="string">"POST"</span>, <span class="string">"PUT"</span>, <span class="string">"DELETE"</span>, <span class="string">"PATCH"</span>, <span class="string">"OPTIONS"</span>&#125;,</span><br><span class="line">AllowedHeaders: []<span class="keyword">string</span>&#123;<span class="string">"Accept"</span>, <span class="string">"Authorization"</span>, <span class="string">"Content-Type"</span>, <span class="string">"X-CSRF-Token"</span>&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">n.Use(c)</span><br><span class="line">n.UseHandler(a.Router)</span><br><span class="line"></span><br><span class="line">n.Run(port)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> GoLang </tag>
            
            <tag> SQL </tag>
            
            <tag> Mux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Database model design using gorm</title>
      <link href="/repository/2020/02/27/GoLang-Database-model-design-using-gorm/"/>
      <url>/repository/2020/02/27/GoLang-Database-model-design-using-gorm/</url>
      
        <content type="html"><![CDATA[<h2>DB Setting</h2><h2>&lt;!--more--&gt;</h2><h3>DB Connection</h3><p>將連接sql db連線設定置於 <code>.env</code></p><p>Folder <code>database/database.go</code></p><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Create variables</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    config <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">    db     *gorm.DB</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create connect to database</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Connect</span><span class="params">(db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">    config, err := godotenv.Read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">"Error reading .env file"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    credentials := fmt.Sprintf(</span><br><span class="line">        <span class="string">"%s:%s@(%s)/%s?charset=utf8mb4&amp;parseTime=True&amp;loc=Local"</span>,</span><br><span class="line">        config[<span class="string">"DB_USERNAME"</span>],</span><br><span class="line">        config[<span class="string">"DB_PASSWORD"</span>],</span><br><span class="line">        config[<span class="string">"DATABASE_HOST"</span>],</span><br><span class="line">        config[<span class="string">"DB_DATABASE"</span>],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    connect, err := gorm.Open(<span class="string">"mysql"</span>, credentials)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">"Connect tp DB failed"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> connect</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>DB table schema</h3><p>Folder <code>model/model.go</code></p><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A user has many products</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// gorm.Model</span></span><br><span class="line">    Id        <span class="keyword">int</span>       <span class="string">`gorm:"primary_key;AUTO_INCREMENT"`</span></span><br><span class="line">    Account   <span class="keyword">string</span>    <span class="string">`gorm:"type:varchar(30);" json:"account"`</span></span><br><span class="line">    Name      <span class="keyword">string</span>    <span class="string">`gorm:"type:varchar(20);" json:"name"`</span></span><br><span class="line">    Password  <span class="keyword">string</span>    <span class="string">`gorm:"type:longtext;" json:"password"`</span></span><br><span class="line">    Phone     <span class="keyword">string</span>    <span class="string">`gorm:"type:varchar(10);" json:"phone"`</span></span><br><span class="line">    Products  []Product <span class="string">`json:"products"`</span> <span class="comment">// 有著多個 Products</span></span><br><span class="line">    CreatedAt time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uppercase an exported to json</span></span><br><span class="line"><span class="comment">// A product has many tags</span></span><br><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// gorm.Model</span></span><br><span class="line">    Id           <span class="keyword">int</span>    <span class="string">`gorm:"primary_key;AUTO_INCREMENT"`</span></span><br><span class="line">    ProductName  <span class="keyword">string</span> <span class="string">`gorm:"type:varchar(50);" json:"productName"`</span></span><br><span class="line">    Price        <span class="keyword">string</span> <span class="string">`gorm:"type:int;" json:"price"`</span></span><br><span class="line">    PurchaseDate <span class="keyword">string</span> <span class="string">`json:"purchaseDate"`</span></span><br><span class="line">    UserId       <span class="keyword">int</span>    <span class="string">`gorm:"foreign_key" sql:"index" json:"userId"`</span> </span><br><span class="line">    Tags         []Tag  <span class="string">`json:"tags"`</span>    <span class="comment">// 有著多個 Tags</span></span><br><span class="line">    CreatedAt    time.Time</span><br><span class="line">    DeletedAt    *time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tag <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// gorm.Model</span></span><br><span class="line">    Id        <span class="keyword">int</span>    <span class="string">`gorm:"primary_key;AUTO_INCREMENT"`</span></span><br><span class="line">    Name      <span class="keyword">string</span> <span class="string">`gorm:"type:varchar(10);" json:"name"`</span></span><br><span class="line">    ProductId <span class="keyword">int</span>    <span class="string">`gorm:"foreign_key" sql:"index" json:"productId"`</span> </span><br><span class="line">    UserId    <span class="keyword">int</span>    <span class="string">`gorm:"foreign_key" sql:"index" json:"userId"`</span></span><br><span class="line">    DeletedAt *time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Auths <span class="keyword">struct</span> &#123;</span><br><span class="line">    Id       <span class="keyword">int</span>    <span class="string">`gorm:"primary_key;AUTO_INCREMENT"`</span></span><br><span class="line">    UserId   <span class="keyword">int</span>    <span class="string">`gorm:";not null;" json:"userId"`</span></span><br><span class="line">    AuthUuid <span class="keyword">string</span> <span class="string">`gorm:"size:255;not null;" json:"auth_uuid"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>Create table</h3><p>Folder <code>database/database.go</code></p><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Migrate</span><span class="params">(db *gorm.DB)</span> *<span class="title">gorm</span>.<span class="title">DB</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> db.HasTable(model.User&#123;&#125;) &#123;</span><br><span class="line">        db.AutoMigrate(model.User&#123;&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        db.CreateTable(model.User&#123;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    db.AutoMigrate(model.Product&#123;&#125;, model.Tag&#123;&#125;, model.Auths&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    db.Model(model.Product&#123;&#125;).AddForeignKey(<span class="string">"user_id"</span>, <span class="string">"users(id)"</span>, <span class="string">"RESTRICT"</span>, <span class="string">"RESTRICT"</span>)</span><br><span class="line">    db.Model(model.Tag&#123;&#125;).AddForeignKey(<span class="string">"product_id"</span>, <span class="string">"products(id)"</span>, <span class="string">"RESTRICT"</span>, <span class="string">"RESTRICT"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> GoLang </tag>
            
            <tag> Gorm </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-web application-The net/http package</title>
      <link href="/repository/2020/01/08/GoLang-web-application-The-net-http-package/"/>
      <url>/repository/2020/01/08/GoLang-web-application-The-net-http-package/</url>
      
        <content type="html"><![CDATA[<h2>Using net/http to serve</h2><hr><p>承上篇文章，針對wiki 檔案進行http的操作</p><h3>增加view 功能</h3><ol><li><p>增加一個function，將request URL中的/view/ 過濾，取其後面的值作為文章title</p></li><li><p>呼叫 loadPage function<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/view/"</span>):]</span><br><span class="line">p, _ := loadPage(title)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"&lt;h1&gt;%s&lt;/h1&gt;&lt;div&gt;%s&lt;/div&gt;"</span>, p.Title, p.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>接著，在main function 中去設定view 路由</p></li><li><p>並設定聽port 8080<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/view/"</span>, viewHandler)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><h3>Editing Pages</h3><ol><li><p>增加編輯和儲存的路由<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/view/"</span>, viewHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/edit/"</span>, editHandler)</span><br><span class="line">    http.HandleFunc(<span class="string">"/save/"</span>, saveHandler)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>增加編輯 function<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">editHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/edit/"</span>):]</span><br><span class="line">p, err := loadPage(title)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">p = &amp;Page&#123;Title: title&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"&lt;h1&gt;Editing %s&lt;/h1&gt;"</span>+</span><br><span class="line"><span class="string">"&lt;form action=\"/save/%s\" method=\"POST\"&gt;"</span>+</span><br><span class="line"><span class="string">"&lt;textarea name=\"body\"&gt;%s&lt;/textarea&gt;&lt;br&gt;"</span>+</span><br><span class="line"><span class="string">"&lt;input type=\"submit\" value=\"Save\"&gt;"</span>+</span><br><span class="line"><span class="string">"&lt;/form&gt;"</span>,</span><br><span class="line">p.Title, p.Title, p.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>但使用 html hardcode有點醜陋</p></li><li><p>所以可以使用<code>html/template</code> package</p></li></ol><ul><li>建立一個<code>edit.html</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Editing &#123;&#123;.Title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/save/&#123;&#123;.Title&#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"20"</span> <span class="attr">cols</span>=<span class="string">"80"</span>&gt;</span>&#123;&#123;printf "%s" .Body&#125;&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Save"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li><p>將 edit function 改成使用 html<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">editHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/edit/"</span>):]</span><br><span class="line">    p, err := loadPage(title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        p = &amp;Page&#123;Title: title&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t, _ := template.ParseFiles(<span class="string">"edit.html"</span>)</span><br><span class="line">    t.Execute(w, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>template.ParseFiles</code>會讀取 html 內的內容然後 return <code>*template.Template</code></p></li><li><p>也可以將 view 轉成使用 html 檔案</p></li></ol><ul><li><code>view.html</code><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&#123;&#123;.Title&#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;[&lt;a href="/edit/&#123;&#123;.Title&#125;&#125;"&gt;edit&lt;/a&gt;]&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;printf "%s" .Body&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><code>viewHandler</code><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/view/"</span>):]</span><br><span class="line">    p, _ := loadPage(title)</span><br><span class="line">    t, _ := template.ParseFiles(<span class="string">"view.html"</span>)</span><br><span class="line">    t.Execute(w, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>將重複使用的程式共用 function<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">renderTemplate</span><span class="params">(w http.ResponseWriter, tmpl <span class="keyword">string</span>, p *Page)</span></span> &#123;</span><br><span class="line">    t, _ := template.ParseFiles(tmpl + <span class="string">".html"</span>)</span><br><span class="line">    t.Execute(w, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>然後將  viewHandler 和改成使用這個 function<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/view/"</span>):]</span><br><span class="line">    p, _ := loadPage(title)</span><br><span class="line">    renderTemplate(w, <span class="string">"view"</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">editHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/edit/"</span>):]</span><br><span class="line">    p, err := loadPage(title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        p = &amp;Page&#123;Title: title&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    renderTemplate(w, <span class="string">"edit"</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3>處理不存在的Pages</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/view/"</span>):]</span><br><span class="line">    p, err := loadPage(title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Redirect(w, r, <span class="string">"/edit/"</span>+title, http.StatusFound)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    renderTemplate(w, <span class="string">"view"</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>Saving pages</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/save/"</span>):]</span><br><span class="line">    body := r.FormValue(<span class="string">"body"</span>)</span><br><span class="line">    p := &amp;Page&#123;Title: title, Body: []<span class="keyword">byte</span>(body)&#125;</span><br><span class="line">    p.save()</span><br><span class="line">    http.Redirect(w, r, <span class="string">"/view/"</span>+title, http.StatusFound)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>FormValue</code> return type string. 需要轉換值為 []byte 去符合 Page struct</p><h3>Error Handling</h3><p>Handle the error in <code>renderTemplate</code><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">renderTemplate</span><span class="params">(w http.ResponseWriter, tmpl <span class="keyword">string</span>, p *Page)</span></span> &#123;</span><br><span class="line">    t, err := template.ParseFiles(tmpl + <span class="string">".html"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    err = t.Execute(w, p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>fix up <code>saveHandler</code><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title := r.URL.Path[<span class="built_in">len</span>(<span class="string">"/save/"</span>):]</span><br><span class="line">    body := r.FormValue(<span class="string">"body"</span>)</span><br><span class="line">    p := &amp;Page&#123;Title: title, Body: []<span class="keyword">byte</span>(body)&#125;</span><br><span class="line">    err := p.save()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    http.Redirect(w, r, <span class="string">"/view/"</span>+title, http.StatusFound)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>Template caching</h3><p>建立一個全域變數<code>var templates = template.Must(template.ParseFiles(&quot;edit.html&quot;, &quot;view.html&quot;))</code></p><p>修改<code>renderTemplate</code> function<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">renderTemplate</span><span class="params">(w http.ResponseWriter, tmpl <span class="keyword">string</span>, p *Page)</span></span> &#123;</span><br><span class="line">    err := templates.ExecuteTemplate(w, tmpl+<span class="string">".html"</span>, p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>Validation</h3><p>增加regex的格式驗證<code>var validPath = regexp.MustCompile(&quot;^/(edit|save|view)/([a-zA-Z0-9]+)$&quot;)</code></p><p>增加function使用validPath去驗證title<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getTitle</span><span class="params">(w http.ResponseWriter, r *http.Request)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    m := validPath.FindStringSubmatch(r.URL.Path)</span><br><span class="line">    <span class="keyword">if</span> m == <span class="literal">nil</span> &#123;</span><br><span class="line">        http.NotFound(w, r)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, errors.New(<span class="string">"Invalid Page Title"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m[<span class="number">2</span>], <span class="literal">nil</span> <span class="comment">// The title is the second subexpression.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>將 <code>getTitle</code> function 加入 handlers裡<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title, err := getTitle(w, r)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    p, err := loadPage(title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Redirect(w, r, <span class="string">"/edit/"</span>+title, http.StatusFound)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    renderTemplate(w, <span class="string">"view"</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">editHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title, err := getTitle(w, r)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    p, err := loadPage(title)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        p = &amp;Page&#123;Title: title&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    renderTemplate(w, <span class="string">"edit"</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    title, err := getTitle(w, r)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    body := r.FormValue(<span class="string">"body"</span>)</span><br><span class="line">    p := &amp;Page&#123;Title: title, Body: []<span class="keyword">byte</span>(body)&#125;</span><br><span class="line">    err = p.save()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    http.Redirect(w, r, <span class="string">"/view/"</span>+title, http.StatusFound)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>Literals and Closures</h3><p>在每個handler中抓取error的情況會使用很多重複的程式碼，可以將每個handlers中的error 和 validation 用一個function包起來</p><ol><li><p>將每個handler function 加上title string<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">viewHandler</span><span class="params">(w http.ResponseWriter, r *http.Request, title <span class="keyword">string</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">editHandler</span><span class="params">(w http.ResponseWriter, r *http.Request, title <span class="keyword">string</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveHandler</span><span class="params">(w http.ResponseWriter, r *http.Request, title <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure></p></li><li><p>定義function<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeHandler</span><span class="params">(fn <span class="keyword">func</span>(http.ResponseWriter, *http.Request, <span class="keyword">string</span>)</span>) <span class="title">http</span>.<span class="title">HandlerFunc</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        m := validPath.FindStringSubmatch(r.URL.Path) <span class="comment">//extract the page title from the Request</span></span><br><span class="line">        <span class="keyword">if</span> m == <span class="literal">nil</span> &#123;</span><br><span class="line">            http.NotFound(w, r)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        fn(w, r, m[<span class="number">2</span>]) <span class="comment">//call the provided handler 'fn'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>這個return function 是一個closure(閉包)這個閉包會取得request 路徑上的title, 然後透過TitleValidator驗證他的格式若title不合法，則error會寫入 ResponseWriter (http.NotFound)若合法，則此function <code>fn</code> 會被呼叫</p></li><li><p>將makeHandler加至 main function<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/view/"</span>, makeHandler(viewHandler))</span><br><span class="line">    http.HandleFunc(<span class="string">"/edit/"</span>, makeHandler(editHandler))</span><br><span class="line">    http.HandleFunc(<span class="string">"/save/"</span>, makeHandler(saveHandler))</span><br><span class="line"></span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>從handler function裡移除<code>getTitle</code></p></li></ol><h3>REFERENCES</h3><ul><li><a href="https://golang.org/doc/articles/wiki/#tmp_13" target="_blank" rel="noopener">Writing Web Applications</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> pointer </tag>
            
            <tag> error </tag>
            
            <tag> net/http </tag>
            
            <tag> handler </tag>
            
            <tag> closure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-web application-Creating a data structure with methods</title>
      <link href="/repository/2020/01/08/GoLang-web-application-Creating-a-data-structure-with-methods/"/>
      <url>/repository/2020/01/08/GoLang-web-application-Creating-a-data-structure-with-methods/</url>
      
        <content type="html"><![CDATA[<h2>Data Structures</h2><p>&lt;!-- more --&gt;</p><hr><h3>用struct 定義一個Page 其擁有兩個欄位，title 和 body</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Page <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title <span class="keyword">string</span></span><br><span class="line">    Body  []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>[]byte</code> means &quot;a byte slice&quot;</p><h3>建立save 方法</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Page)</span> <span class="title">save</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    filename := p.Title + <span class="string">".txt"</span></span><br><span class="line">    <span class="keyword">return</span> ioutil.WriteFile(filename, p.Body, <span class="number">0600</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>Takes as its receiver p, a pointer to Page.It takes no parameters, and returns a value of type error.</p><p>0600, 傳送第三參數給 WriteFile, 指出這個檔案只應被建立於目前使用者可讀可寫的權限</p><h3>建立loadPage 方法</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadPage</span><span class="params">(title <span class="keyword">string</span>)</span> <span class="params">(*Page, error)</span></span> &#123;</span><br><span class="line">    filename := title + <span class="string">".txt"</span></span><br><span class="line">    body, err := ioutil.ReadFile(filename)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &amp;Page&#123;Title: title, Body: body&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>建立main 方法</h3><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    p1 := &amp;Page&#123;Title: <span class="string">"TestPage"</span>, Body: []<span class="keyword">byte</span>(<span class="string">"This is a sample Page."</span>)&#125;</span><br><span class="line">    p1.save()</span><br><span class="line">    p2, _ := loadPage(<span class="string">"TestPage"</span>)</span><br><span class="line">    fmt.Println(<span class="keyword">string</span>(p2.Body))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>go build wiki.go</code><code>./wiki</code></p><h3>REFERENCES</h3><ul><li><a href="https://golang.org/doc/articles/wiki/#tmp_13" target="_blank" rel="noopener">Writing Web Applications</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> pointer </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-gomodule</title>
      <link href="/repository/2020/01/05/GoLang-gomodule/"/>
      <url>/repository/2020/01/05/GoLang-gomodule/</url>
      
        <content type="html"><![CDATA[<h2>GoModule</h2><h2>&lt;!--more--&gt;</h2><p>先建立一個範例檔<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"pingjing/example/first"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">first.Printfirst()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>使用傳統govendor的做法</h3><p><strong>govendor</strong> 是一種vendor管理，是一個PackageManagementTools</p><p><code>govendor init</code><code>govendor fetch pingjing/example/first</code>用<code>go build -v -o main .</code> 產生 main binary檔案若不在 GOPATH 裡面工作，就會遇到錯誤訊息 -&gt; 使用go module</p><hr><h3>使用go module</h3><p>用 <strong>go module</strong> 解決兩個問題</p><ol><li>專案內不必再使用 vendor 管理套件</li><li>可任意 clone 專案到任何地方，直接下 <code>go build</code> 就可拿到執行檔</li></ol><p><code>export GO111MODULE=on</code> 啟動module變數<code>go mod init 專案目錄</code> 專案會多一個 <code>go.mod</code> 檔案，用來記錄使用到的套件版本，</p><blockquote><p>example: 專案目錄 <code>Users/pingjing/docker/goPractice</code>於程式碼 import時 需使用此路徑</p></blockquote><p>若已在使用 <code>vendor</code> 管理， 則 <code>mod init</code> 會自動將 <code>vendor</code> 紀錄的版本寫入到 <code>go.mod</code><code>go mod download</code> 專案內會多 <code>go.sum</code> 檔案，在專案內下 <code>go build|test|install</code>，會自動將 <code>pkg</code> 下載到 <code>GOPATH/pkg/mod</code> 內<code>go clean -i -x -modcache</code> 將 pkg 目錄清空</p><p><code>Go build -v -o main</code> 產生 main binary檔案</p><blockquote><p>記得 package 後加上的是 folder 名稱</p></blockquote><hr><h3>REFERENCES</h3><ul><li><a href="https://blog.wu-boy.com/2018/10/go-1-11-support-go-module/" target="_blank" rel="noopener">Go 語言 1.11 版本推出 go module</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Gomodule </tag>
            
            <tag> Govendor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-1a2b game practice</title>
      <link href="/repository/2020/01/04/GoLang-1a2b-game-practice/"/>
      <url>/repository/2020/01/04/GoLang-1a2b-game-practice/</url>
      
        <content type="html"><![CDATA[<h2>1a2b Game practice</h2><h2>&lt;!--more--&gt;</h2><h3>說明</h3><p>第13行 <code>random := make([]int, length)</code><code>make</code> 為初始化一個型態為int且長度為length的array第73-77行<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> input_int%<span class="number">10</span> != <span class="number">0</span> &#123;</span><br><span class="line">    input = <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;input_int % <span class="number">10</span>&#125;, input...)</span><br><span class="line">    input_int = input_int / <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>(...)append會將其當作是slice，並進行兩個slice的拼接</p><p>完整程式碼如下：<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// generate a random number</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generate_random_num</span><span class="params">(length <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">    initial := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125; <span class="comment">// create an array 0-9</span></span><br><span class="line">    random := <span class="built_in">make</span>([]<span class="keyword">int</span>, length)                  <span class="comment">// 初始化一個長度為輸入數字長度的陣列</span></span><br><span class="line">    <span class="keyword">if</span> length &gt; <span class="number">10</span> || length &lt; <span class="number">0</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"invalid length:"</span>, length)</span><br><span class="line">        os.Exit(<span class="number">-1</span>) <span class="comment">// invalid and pop out</span></span><br><span class="line">    &#125;</span><br><span class="line">    r := rand.New(rand.NewSource(time.Now().UnixNano())) <span class="comment">// create and seed the generate random a number</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</span><br><span class="line">    tmp := r.Intn(<span class="built_in">len</span>(initial) - i) <span class="comment">// Intn() return int, a non-negative random number</span></span><br><span class="line"></span><br><span class="line">    random[i] = initial[tmp] <span class="comment">// initial 的陣列[2,0,0,0] </span></span><br><span class="line">        initial[tmp], initial[<span class="built_in">len</span>(initial)<span class="number">-1</span>-i] = initial[<span class="built_in">len</span>(initial)<span class="number">-1</span>-i], initial[tmp]</span><br><span class="line">    <span class="comment">// swap，將initial陣列中的tmp值與長度遞減的值交換位置，為避免接下來在取得相同的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> random</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapping the input value and random value</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">mapping_num</span><span class="params">(input, random []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> A, B <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(input) != <span class="built_in">len</span>(random) &#123; <span class="comment">// if length is different then return false</span></span><br><span class="line">        fmt.Println(<span class="string">"Number you entered didn't match the number you set it!"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(input); i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> input[i] == random[i] &#123;</span><br><span class="line">    A++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="built_in">len</span>(input); j++ &#123;</span><br><span class="line">            <span class="keyword">if</span> input[i] == random[j] &#123;</span><br><span class="line">                B++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    B -= A</span><br><span class="line">    fmt.Printf(<span class="string">"%dA%dB\n"</span>, A, B)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> A == <span class="built_in">len</span>(input) &#123;</span><br><span class="line">        fmt.Println(<span class="string">"You Win!"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> input_int, length <span class="keyword">int</span></span><br><span class="line">    <span class="keyword">var</span> input []<span class="keyword">int</span></span><br><span class="line">    status := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">"Welcome to the Final Code Game!"</span>)</span><br><span class="line">    fmt.Println(<span class="string">"Please entering the number you want to guess!"</span>)</span><br><span class="line">    fmt.Scanf(<span class="string">"%d"</span>, &amp;length)</span><br><span class="line"></span><br><span class="line">    random_num := generate_random_num(length)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> !status &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"Please input numbers\n"</span>)</span><br><span class="line">        fmt.Scanf(<span class="string">"%d"</span>, &amp;input_int)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> input_int%<span class="number">10</span> != <span class="number">0</span> &#123;</span><br><span class="line">            input = <span class="built_in">append</span>([]<span class="keyword">int</span>&#123;input_int % <span class="number">10</span>&#125;, input...)</span><br><span class="line">            <span class="comment">//加上(...)append會將其當作是slice，並進行兩個slice的拼接</span></span><br><span class="line">            input_int = input_int / <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        status = mapping_num(input, random_num)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> !status &#123; <span class="comment">// if status is false, then clear input</span></span><br><span class="line">            input = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> make </tag>
            
            <tag> rand </tag>
            
            <tag> append </tag>
            
            <tag> 指標 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-ENTRYPOINT介紹</title>
      <link href="/repository/2019/12/22/docker-ENTRYPOINT%E4%BB%8B%E7%B4%B9/"/>
      <url>/repository/2019/12/22/docker-ENTRYPOINT%E4%BB%8B%E7%B4%B9/</url>
      
        <content type="html"><![CDATA[<h2>Docker ENTRYPOINT</h2><h2>&lt;!--more--&gt;</h2><ul><li><code>ENTRYPOINT</code>的目的和 <code>CMD</code>一樣</li><li>當指定了<code>ENTRYPOINT</code>後，<code>CMD</code>的含義就發生了改變，不再是直接的運行其命令，而是將<code>CMD</code>的內容作為參數傳給<code>ENTRYPOINT</code>指令，換句話說實際執行時，將變為：<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></li></ul><hr><h3>狀況一</h3><p>假設需要得知自己當前公網IP，可以先用CMD來實現：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y curl \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;*</span><br><span class="line">CMD [ &quot;curl&quot;, &quot;-s&quot;, &quot;https:&#x2F;&#x2F;ip.cn&quot; ]</span><br></pre></td></tr></table></figure>執行 <code>docker build -t myip</code>建立image則查詢ip執行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run myip</span><br><span class="line">當前 IP：61.148.226.66 來自：北京市 聯通</span><br></pre></td></tr></table></figure></p><p>上述的<code>CMD</code>中可以看到實質命令是<code>curl</code>，那若希望顯示HTTP header 訊息，就需要加上<code>-i</code>參數。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run myip -i</span><br><span class="line">docker: Error response from daemon: invalid header field value &quot;oci runtime error: container_linux.go:247: starting container process caused \&quot;exec: \\\&quot;-i\\\&quot;: executable file not found in $PATH\&quot;\n&quot;.</span><br></pre></td></tr></table></figure>出現找不到可執行檔案的錯誤訊息，因為這裡的<code>-i</code>替換了原來的<code>CMD</code>，而不是添加在原來的<code>curl -s https://ip.cn</code>後面。而<code>-i</code>根本不是命令，所以自然找不到，必須重新完整的輸入命令才可以執行<code>docker run myip curl -s https://ip.cn -i</code></p><p><strong>使用Entrypoint</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM ubuntu:18.04</span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y curl \</span><br><span class="line">    &amp;&amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;*</span><br><span class="line">ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;, &quot;https:&#x2F;&#x2F;ip.cn&quot; ]</span><br></pre></td></tr></table></figure></p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> docker run myip</span><br><span class="line">當前 IP：61.148.226.66 來自：北京市 聯通</span><br><span class="line"></span><br><span class="line">$ docker run myip -i</span><br><span class="line">HTTP&#x2F;1.1 200 OK</span><br><span class="line">Server: nginx&#x2F;1.8.0</span><br><span class="line">Date: Tue, 22 Nov 2016 05:12:40 GMT</span><br><span class="line">Content-Type: text&#x2F;html; charset&#x3D;UTF-8</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Powered-By: PHP&#x2F;5.6.24-1~dotdeb+7.1</span><br><span class="line">X-Cache: MISS from cache-2</span><br><span class="line">X-Cache-Lookup: MISS from cache-2:80</span><br><span class="line">X-Cache: MISS from proxy-2_6</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Via: 1.1 cache-2:80, 1.1 proxy-2_6:8006</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">當前 IP：61.148.226.66 來自：北京市 聯通</span><br></pre></td></tr></table></figure>因為當存在<code>ENTRYPOINT</code>後，<code>CMD</code>的內容將會作為參數傳給<code>ENTRYPOINT</code>，而這裡<code>-i</code>就是新的<code>CMD</code>，因此會作為參數傳給<code>curl</code>，從而達到了我們預期的效果。</p><hr><h3>狀況二</h3><p>啟動容器就是啟動主進程，但有些時候，啟動主進程前，需要一些準備工作。比如<code>mysql</code>的資料庫，可能需要一些資料庫配置、初始化的工作，這些工作要在最終的<code>mysql</code>服務器運行之前解決。此外，可能希望避免使用<code>root</code>使用者去啟動服務，從而提高安全性，而在啟動服務前還需要以<code>root</code>身份執行一些必要的準備工作，最後切換到服務使用者身份啟動服務。或者除了服務外，其它命令依舊可以使用<code>root</code>身份執行，方便調整等。這些準備工作是和容器<code>CMD</code>無關，都需要事先進行一個預處理的工作。這種情況下，可以寫一個腳本，然後放入<code>ENTRYPOINT</code>中去執行，而這個腳本會將接到的參數（也就是&lt;CMD&gt;）作為命令，在腳本最後執行。比如官方鏡像redis中就是這麼做的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.4</span><br><span class="line">...</span><br><span class="line">RUN addgroup -S redis &amp;&amp; adduser -S -G redis redis</span><br><span class="line">...</span><br><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br><span class="line"></span><br><span class="line">EXPOSE 6379</span><br><span class="line">CMD [ &quot;redis-server&quot; ]</span><br></pre></td></tr></table></figure>在最後指定了<code>ENTRYPOINT</code>為<code>docker-entrypoint.sh</code>腳本。</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;sh</span><br><span class="line">...</span><br><span class="line"># allow the container to be started with &#96;--user&#96;</span><br><span class="line">if [ &quot;$1&quot; &#x3D; &#39;redis-server&#39; -a &quot;$(id -u)&quot; &#x3D; &#39;0&#39; ]; then</span><br><span class="line">    chown -R redis .</span><br><span class="line">    exec su-exec redis &quot;$0&quot; &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>該腳本的內容就是根據<code>CMD</code>的內容來判斷，如果是<code>redis-server</code>的話，則切換到redis使用者身份啟動服務器，否則依舊使用root身份執行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it redis id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root)</span><br></pre></td></tr></table></figure></p><hr><h3>REFERENCES</h3><ul><li><a href="https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html" target="_blank" rel="noopener">Entrypoint</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerfile </tag>
            
            <tag> Entrypoint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-Multi-Stage</title>
      <link href="/repository/2019/12/22/docker-Multi-Stage/"/>
      <url>/repository/2019/12/22/docker-Multi-Stage/</url>
      
        <content type="html"><![CDATA[<h2>Docker Multi-Stage compile Golang Image</h2><h2>&lt;!--more--&gt;</h2><h3>Single Build</h3><ol><li><p>Go 語言<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Hey Yu!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>用 <code>alpine</code> 的 Golang Image 來編譯出執行檔<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:alpine</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">ADD . &#x2F;app</span><br><span class="line">RUN cd &#x2F;app &amp;&amp; go build -o app</span><br><span class="line">ENTRYPOINT .&#x2F;app</span><br></pre></td></tr></table></figure></p></li></ol><blockquote><p>補充說明：</p><ol><li><code>WORKDIR &lt;工作目錄路徑&gt;</code>使用<code>WORKDIR</code>指令用來指定工作目錄（或稱為當前目錄），以後各層的當前目錄就被改為指定的目錄，如該目錄不存在，<code>WORKDIR</code>會幫你建立目錄。</li><li><code>COPY</code>和<code>ADD</code>兩個的功用都一樣，就是將檔案複製進去image差別在於：• <code>COPY</code>只能複製本機端的檔案或目錄• <code>ADD</code>能增加遠端url的檔案到docker image• <code>ADD</code>能順手將本機端複製進去的tar檔解開(遠端的tar不行！)在實例上並不建議使用<code>ADD</code>來抓取網路上的檔案，會使用<code>RUN curl or wget</code>的方式。原因是使用一次<code>ADD</code>指令會增加docker image layers一次，layers越多，docker image size就會越大</li><li><code>ENTRYPOINT</code>的部分，待其他章節說明</li></ol></blockquote><ol start="3"><li>執行編譯指令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t yu&#x2F;go-app .</span><br><span class="line">docker run --rm yu&#x2F;go-app</span><br></pre></td></tr></table></figure>檢查看看編譯出來的 Image 大小，使用 <code>docker images | grep go-app</code>，會發現 Image 大小為 258 MB</li></ol><hr><h3>Multiple build</h3><p>Multiple build 可以在 <code>Dockerfile</code> 使用多個不同的 Image 來源<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># build stage</span><br><span class="line">FROM golang:alpine AS build-env</span><br><span class="line">ADD . &#x2F;src</span><br><span class="line">RUN cd &#x2F;src &amp;&amp; go build -o app</span><br><span class="line"> </span><br><span class="line"># final stage</span><br><span class="line">FROM alpine</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">COPY --from&#x3D;build-env &#x2F;src&#x2F;app &#x2F;app&#x2F;</span><br><span class="line">ENTRYPOINT .&#x2F;app</span><br></pre></td></tr></table></figure><code>AS</code> 及 <code>--from</code> 互相溝通，以往需要寫兩個 <code>Dockerfile</code>，現在只要一個就可以。最後執行編譯指令:</p><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t yu&#x2F;go-app .</span><br><span class="line">docker run --rm yu&#x2F;go-app</span><br></pre></td></tr></table></figure>最後大小為 6.35 MB，比較小了</p><p>參考範例:<code>cmd/server/server.go</code> 需要被更改成你的檔案<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM golang:1.13 as builder</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">COPY . &#x2F;app</span><br><span class="line">RUN CGO_ENABLED&#x3D;0 GOOS&#x3D;linux GOPROXY&#x3D;https:&#x2F;&#x2F;proxy.golang.org go build -o app cmd&#x2F;server&#x2F;server.go</span><br><span class="line"></span><br><span class="line">FROM alpine:latest</span><br><span class="line"># mailcap adds mime detection and ca-certificates help with TLS (basic stuff)</span><br><span class="line">RUN apk --no-cache add ca-certificates mailcap &amp;&amp; addgroup -S app &amp;&amp; adduser -S app -G app</span><br><span class="line">USER app</span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line">COPY --from&#x3D;builder &#x2F;app&#x2F;app .</span><br><span class="line">ENTRYPOINT [&quot;.&#x2F;app&quot;]</span><br></pre></td></tr></table></figure></p><hr><h3>Docker 提供的 image scratch</h3><p>並不適用於每一個案例<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">FROM golang as base</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;app</span><br><span class="line"></span><br><span class="line">ENV GO111MODULE&#x3D;on \</span><br><span class="line">    CGO_ENABLED&#x3D;0 \</span><br><span class="line">    GOOS&#x3D;linux \</span><br><span class="line">    GOARCH&#x3D;amd64</span><br><span class="line"></span><br><span class="line">COPY go.mod .</span><br><span class="line">COPY go.sum .</span><br><span class="line"></span><br><span class="line">RUN go mod download</span><br><span class="line"></span><br><span class="line">COPY . .</span><br><span class="line"></span><br><span class="line"># it will take the flags from the environment</span><br><span class="line">RUN go build</span><br><span class="line"></span><br><span class="line">### Certs</span><br><span class="line">FROM alpine:latest as certs</span><br><span class="line">RUN apk --update add ca-certificates</span><br><span class="line"></span><br><span class="line">### App</span><br><span class="line">FROM scratch as app</span><br><span class="line">COPY --from&#x3D;certs &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;ca-certificates.crt &#x2F;etc&#x2F;ssl&#x2F;certs&#x2F;ca-certificates.crt</span><br><span class="line">COPY --from&#x3D;base app &#x2F;</span><br><span class="line">ENTRYPOINT [&quot;&#x2F;app&quot;]</span><br></pre></td></tr></table></figure></p><h3>REFERENCES</h3><ul><li><a href="https://blog.wu-boy.com/2017/04/build-minimal-docker-container-using-multi-stage-for-go-app/" target="_blank" rel="noopener">用 Docker Multi-Stage 編譯 Golang 最小 Image</a></li><li><a href="https://dev.to/andrioid/slim-docker-images-for-your-go-application-11oo" target="_blank" rel="noopener">Slim Docker images for your Go application</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10209304" target="_blank" rel="noopener">使用 Docker build 一個 Golang image</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerfile </tag>
            
            <tag> single build </tag>
            
            <tag> multiple build </tag>
            
            <tag> multi-stage </tag>
            
            <tag> scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-create dockerfile(1)</title>
      <link href="/repository/2019/12/22/docker-create-dockerfile-1/"/>
      <url>/repository/2019/12/22/docker-create-dockerfile-1/</url>
      
        <content type="html"><![CDATA[<h2>Create Dockerfile</h2><h2>&lt;!--more--&gt;</h2><h3>產出簡單的dockerfile</h3><ol><li>先產出簡單的 <code>dockerfile</code>，再添加相關指令<code>FROM alpine:3.9</code></li><li>將 <code>dockerfile</code>轉換成 <code>image</code> 再用此 <code>image</code>生成 <code>container</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t dockerfile .</span><br><span class="line">docker run -it -p 8080:8080 dockerfile</span><br></pre></td></tr></table></figure></li></ol><hr><h3>嘗試透過一般流程指令安裝nginx</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apk update upgrade</span><br><span class="line">apk add nginx</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure></p><p><strong>問題一</strong><code>nginx: [emerg] open() &quot;/run/nginx/nginx.pid&quot; failed (2: No such file or directory)</code>原因是找不到nginx.pid，經檢查是沒有/run/nginx 這個資料夾，所以nginx無法執行成功<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;run&#x2F;nginx</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure></p><p><strong>問題二</strong>測試 http://localhost:8080/，依舊不行原因是設port 8080:8080 ，但nginx裡設定為80，所以添加一個設定檔<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt; EOF &gt; &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;localhost.conf</span><br><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;var&#x2F;www;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>如此一來會多了一個檔案 <code>/etc/nginx/conf.d/localhost.conf</code>且指向 <code>/var/www</code>，現在給一個index.html<code>echo hi &gt;&gt; /var/www/index.html</code></p><p>執行 <code>nginx -s reload</code></p><p><strong>問題三</strong><code>nginx: [error] invalid PID number &quot;&quot; in &quot;/run/nginx/nginx.pid&quot;</code>原因是只有創建資料夾，還尚未啟用nginx ，來啟用nginx<code>nginx -c /etc/nginx/nginx.conf</code></p><p>###安裝nginx成功後需將指令寫進dockerfile<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine:3.9</span><br><span class="line">RUN apk update</span><br><span class="line">RUN apk upgrade</span><br><span class="line">RUN apk add nginx</span><br><span class="line">RUN mkdir -p &#x2F;run&#x2F;nginx</span><br><span class="line"></span><br><span class="line">COPY localhost.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;localhost.conf</span><br><span class="line"></span><br><span class="line">COPY index.html &#x2F;var&#x2F;www&#x2F;index.html</span><br><span class="line"></span><br><span class="line">CMD nginx -g &quot;daemon off;&quot;</span><br></pre></td></tr></table></figure></p><p>一次 <code>command</code>，在 <code>dockerfile</code>就是 <code>RUN</code>中間新增兩個檔案，是先把檔案創建好，再COPY進去最後給一個要執行的指令 ，使用 <code>nginx -g &quot;daemon off;&quot;</code>，是為了能正確在容器上正常執行，需要保持 <code>daemon off;</code></p><p>###測試是否能執行因為要執行在「背景」，跟剛剛run的指令不一樣<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t dockerfile .</span><br><span class="line">docker run -d --name nginx -p 8080:8080 dockerfile</span><br></pre></td></tr></table></figure>接著可以再docker ps 中檢查</p><hr><h3>REFERENCES</h3><ul><li><a href="https://medium.com/@tasslin/%E9%9A%A8%E6%89%8B%E5%AF%AB%E5%AF%AB-docker-5-dockerfile-3c26d5043279" target="_blank" rel="noopener">隨手寫寫‒‒Docker(5)Dockerfile</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerfile </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-REST API with Mux</title>
      <link href="/repository/2019/12/17/GoLang-REST-API-with-Mux/"/>
      <url>/repository/2019/12/17/GoLang-REST-API-with-Mux/</url>
      
        <content type="html"><![CDATA[<h2>REST API with Mux</h2><h2>&lt;!--more--&gt;</h2><p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"math/rand"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"github.com/gorilla/mux"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Book Struct (Model)</span></span><br><span class="line"><span class="comment">// Struct is kind of like a class, it's used for OOP in Golang</span></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID      <span class="keyword">string</span>  <span class="string">`json:"id"`</span></span><br><span class="line">    Isbn    <span class="keyword">string</span>  <span class="string">`json:"isbn"`</span></span><br><span class="line">    Title   <span class="keyword">string</span>  <span class="string">`json:"title"`</span></span><br><span class="line">    Author  *Author <span class="string">`json:"author"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Author Struct</span></span><br><span class="line"><span class="keyword">type</span> Author <span class="keyword">struct</span> &#123;</span><br><span class="line">    Firstname  <span class="keyword">string</span>  <span class="string">`json:"firstname"`</span></span><br><span class="line">    Lastname   <span class="keyword">string</span>  <span class="string">`json:"lastname"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init books var as a slice Book struct</span></span><br><span class="line"><span class="keyword">var</span> books []Book</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get All Books</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBooks</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">    json.NewEncoder(w).Encode(books)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get Single Book</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBook</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">    params := mux.Vars(r) <span class="comment">// Get params</span></span><br><span class="line">    <span class="comment">// Loop through books and find with id</span></span><br><span class="line">    <span class="keyword">for</span> _, item := <span class="keyword">range</span> books &#123;</span><br><span class="line">        <span class="keyword">if</span> item.ID == params[<span class="string">"id"</span>] &#123;</span><br><span class="line">            json.NewEncoder(w).Encode(item)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    json.NewEncoder(w).Encode(&amp;Book&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a New Book</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createBook</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="keyword">var</span> book Book</span><br><span class="line">    _ = json.NewDecoder(r.Body).Decode(&amp;book)</span><br><span class="line">    book.ID = strconv.Itoa(rand.Intn(<span class="number">10000000</span>)) <span class="comment">// Mock ID - not safe</span></span><br><span class="line">    books = <span class="built_in">append</span>(books, book)</span><br><span class="line">    json.NewEncoder(w).Encode(book)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update a Book</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateBook</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">    params := mux.Vars(r)</span><br><span class="line">    <span class="keyword">for</span> index, item := <span class="keyword">range</span> books &#123;</span><br><span class="line">        <span class="keyword">if</span> item.ID == params[<span class="string">"id"</span>] &#123;</span><br><span class="line">            books = <span class="built_in">append</span>(books[:index], books[index+<span class="number">1</span>:]...)</span><br><span class="line">            <span class="keyword">var</span> book Book</span><br><span class="line">            _ = json.NewDecoder(r.Body).Decode(&amp;book)</span><br><span class="line">            book.ID = params[<span class="string">"id"</span>]</span><br><span class="line">            books = <span class="built_in">append</span>(books, book)</span><br><span class="line">            json.NewEncoder(w).Encode(book)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    json.NewEncoder(w).Encode(books)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete a Book</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteBook</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    w.Header().Set(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">    params := mux.Vars(r)</span><br><span class="line">    <span class="keyword">for</span> index, item := <span class="keyword">range</span> books &#123;</span><br><span class="line">        <span class="keyword">if</span> item.ID == params[<span class="string">"id"</span>] &#123;</span><br><span class="line">            books = <span class="built_in">append</span>(books[:index], books[index+<span class="number">1</span>:]...)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    json.NewEncoder(w).Encode(books)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Init Router</span></span><br><span class="line">    r := mux.NewRouter()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mock Data - @todo - implemet DB</span></span><br><span class="line">    books = <span class="built_in">append</span>(books, Book&#123;ID: <span class="string">"1"</span>, Isbn: <span class="string">"443322"</span>, Title: <span class="string">"Section 1"</span>, Author: &amp;Author&#123;Firstname: <span class="string">"Yu"</span>, Lastname: <span class="string">"Wang"</span>&#125;&#125;)</span><br><span class="line">    books = <span class="built_in">append</span>(books, Book&#123;ID: <span class="string">"2"</span>, Isbn: <span class="string">"554433"</span>, Title: <span class="string">"Section 2"</span>, Author: &amp;Author&#123;Firstname: <span class="string">"Ping"</span>, Lastname: <span class="string">"Wang"</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Route Handlers / Endpoints</span></span><br><span class="line">    r.HandleFunc(<span class="string">"/api/books"</span>, getBooks).Methods(<span class="string">"GET"</span>)</span><br><span class="line">    r.HandleFunc(<span class="string">"/api/books/&#123;id&#125;"</span>, getBook).Methods(<span class="string">"GET"</span>)</span><br><span class="line">    r.HandleFunc(<span class="string">"/api/books"</span>, createBook).Methods(<span class="string">"POST"</span>)</span><br><span class="line">    r.HandleFunc(<span class="string">"/api/books/&#123;id&#125;"</span>, updateBook).Methods(<span class="string">"PUT"</span>)</span><br><span class="line">    r.HandleFunc(<span class="string">"/api/books/&#123;id&#125;"</span>, deleteBook).Methods(<span class="string">"DELETE"</span>)</span><br><span class="line">    log.Fatal(http.ListenAndServe(<span class="string">":8090"</span>, r))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>In main()</h3><ol><li><p><code>r := mux.NewRouter()</code><strong>Create a new Router</strong>Create a new request router.The router is the main router for web application and will later be passed as parameter to the server.It will receive all HTTP connections and pass it on to the request handlers.</p></li><li><p>Registering a Request HandlerOnce have a new router you can register request handlers like usual. The only difference is, that instead of calling <code>http.HandleFunc(...)</code>, call HandleFunc on your router like this: <code>r.HandleFunc(...)</code>.</p></li><li><p>URL ParametersTo have a request handler match the URL mentioned above you replace the dynamic segments of with placeholders in your URL pattern like so:<figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.HandleFunc(<span class="string">"/books/&#123;title&#125;/page/&#123;page&#125;"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// get the book</span></span><br><span class="line">    <span class="comment">// navigate to the page</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>The last thing is to get the data from these segments. The package comes with the function mux.Vars(r) which takes the http.Request as parameter and returns a map of the segments.<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    vars := mux.Vars(r)</span><br><span class="line">    vars[<span class="string">"title"</span>] <span class="comment">// the book title slug</span></span><br><span class="line">    vars[<span class="string">"page"</span>] <span class="comment">// the page</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>manipulate memory spacecreate and update are manipulate memory space, so when you disconnect, then the data will go back to the default value</p></li></ol><h3>Reference</h3><ul><li><a href="https://www.youtube.com/watch?v=SonwZ6MF5BE" target="_blank" rel="noopener">Rest API With Mux</a></li><li><a href="https://gowebexamples.com/routes-using-gorilla-mux/" target="_blank" rel="noopener">Go Web Examples</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Mux </tag>
            
            <tag> Rest API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-語法筆記整理</title>
      <link href="/repository/2019/12/15/GoLang-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98%E6%95%B4%E7%90%86/"/>
      <url>/repository/2019/12/15/GoLang-%E8%AA%9E%E6%B3%95%E7%AD%86%E8%A8%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2>整理</h2><h2>&lt;!--more--&gt;</h2><ol><li><p><code>go build yu.go</code>建立exe檔案<code>./yu</code>執行檔案</p></li><li><p><code>go run main.go</code>於commandline 執行檔案做測試</p></li><li><p><code>go doc fmt</code>查看套件用法<code>go doc fmt.Println</code>查看此套件中的方法用法</p></li><li><p><code>const earthsGravity = 9.80665</code>定義常數變數</p></li><li><p><code>amount, unit := 10, &quot;doll hairs&quot;</code>可以同時定義兩個變數且不同型態</p></li><li><p>空字串、空數字<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> emptyString <span class="keyword">string</span></span><br><span class="line">  <span class="keyword">var</span> emptyInteger integer</span><br><span class="line"></span><br><span class="line">  fmt.Println(emptyString)</span><br><span class="line">  fmt.Println(emptyInteger)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ol><ol start="7"><li><p><code>Println</code> vs <code>Print</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Let's first see how"</span>, <span class="string">"the Println() method works."</span>)</span><br><span class="line">  fmt.Println(<span class="string">"There's also a default space"</span>)</span><br><span class="line">  </span><br><span class="line">  fmt.Print(<span class="string">"Print"</span>, <span class="string">"is"</span>, <span class="string">"different"</span>)</span><br><span class="line">  fmt.Print(<span class="string">"See?"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Let's first see how the Println() method works.</span></span><br><span class="line"><span class="comment">    There's also a default space between the string arguments.</span></span><br><span class="line"><span class="comment">    PrintisdifferentSee?</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>使用 <code>%v</code>, use <code>Printf</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  animal1 := <span class="string">"cat"</span></span><br><span class="line">  animal2 := <span class="string">"dog"</span></span><br><span class="line">  </span><br><span class="line">  fmt.Printf(<span class="string">"Are you a %v or a %v person?"</span>, animal1, animal2)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Are you a cat or a dog person?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>%T</code> is Type</p></li><li><p><code>%d</code> is integer</p></li><li><p><code>%f</code> is float, ex: 3.500000</p></li><li><p><code>%.2f</code> is float, ex: 3.50</p></li><li><p>使用<code>Sprintln</code> 帶入參數並利用 <code>Println</code>印出字串<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  step1 := <span class="string">"Breathe in..."</span></span><br><span class="line">  step2 := <span class="string">"Breathe out..."</span></span><br><span class="line">  </span><br><span class="line">  fmt.Sprintln(step1, step2)</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// doesn't print anything</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  step1 := <span class="string">"Breathe in..."</span></span><br><span class="line">  step2 := <span class="string">"Breathe out..."</span></span><br><span class="line">  </span><br><span class="line">  meditation := fmt.Sprint(step1, step2)</span><br><span class="line">  fmt.Println(meditation)</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// Breathe in...Breathe out...</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>.Scan()</code> to get user input<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"What would you like for lunch?"</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> food <span class="keyword">string</span></span><br><span class="line">  fmt.Scan(&amp;food)</span><br><span class="line">  </span><br><span class="line">  fmt.Printf(<span class="string">"Sure, we can have %v for lunch."</span>, food)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>random number<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"math/rand"</span></span><br><span class="line">  <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// Add your code below:</span></span><br><span class="line">  rand.Seed(time.Now().UnixNano())</span><br><span class="line">  </span><br><span class="line">  amountLeft := rand.Intn(<span class="number">10000</span>)</span><br><span class="line">  </span><br><span class="line">  fmt.Println(<span class="string">"amountLeft is: "</span>, amountLeft)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> amountLeft &gt; <span class="number">5000</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"What should I spend this on?"</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Where did all my money go?"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// amountLeft is:  7298</span></span><br><span class="line"><span class="comment">// What should I spend this on?</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>address</strong> use <code>&amp;</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">treasure := <span class="string">"The friends we make along the way."</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(&amp;treasure)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 0xc0000101e0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><strong>Pointers</strong> are variables that specifically store addresses.<code>var pointerForInt *int</code><code>pointerForInt</code> will store the address of a variable that has an <code>int</code> data type.</p></li></ol><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lyrics := <span class="string">"Moments so dear"</span> </span><br><span class="line">pointerForStr := &amp;lyrics</span><br><span class="line"></span><br><span class="line">*pointerForStr = <span class="string">"Journeys to plan"</span> </span><br><span class="line"></span><br><span class="line">fmt.Println(lyrics) <span class="comment">// Prints: Journeys to plan</span></span><br></pre></td></tr></table></figure></p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addHundred</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  num += <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  x := <span class="number">1</span></span><br><span class="line">  addHundred(x)</span><br><span class="line">  fmt.Println(x) <span class="comment">// Prints 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addHundred</span> <span class="params">(numPtr *<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  *numPtr += <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  x := <span class="number">1</span></span><br><span class="line">  addHundred(&amp;x)</span><br><span class="line">  fmt.Println(x) <span class="comment">// Prints 101</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP vs GoLang</title>
      <link href="/repository/2019/12/09/PHP-vs-GoLang/"/>
      <url>/repository/2019/12/09/PHP-vs-GoLang/</url>
      
        <content type="html"><![CDATA[<h2>PHP vs GoLang</h2><h2>&lt;!--more--&gt;</h2><h3>定義變數－Variables</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">"foo"</span>;</span><br><span class="line">$b = <span class="string">"bar"</span>;</span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>區分為「新定義」、「預先定義」、「自動新定義」、「覆蓋」。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新定義：定義新的 a 變數為字串型別，且值是「foo」</span></span><br><span class="line"><span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 預先定義：先定義一個新的 b 變數為字串型別但不賦予值</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自動新定義：讓 Golang 依照值的內容自己定義新變數的資料型態</span></span><br><span class="line">c := <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆蓋：先前已定義過 a ，可以直接覆蓋其值</span></span><br><span class="line">a = <span class="string">"fooooooo"</span></span><br></pre></td></tr></table></figure></p><h3>輸出－Echo</h3><p>在 PHP 中常用到 <code>echo</code> 來顯示文字。<strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"Foo"</span>; <span class="comment">// 輸出：Foo</span></span><br><span class="line"></span><br><span class="line">$A = <span class="string">"Bar"</span></span><br><span class="line"><span class="keyword">echo</span> $A; <span class="comment">// 輸出：Bar</span></span><br><span class="line"></span><br><span class="line">$B = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">echo</span> $B . <span class="string">", world!"</span>; <span class="comment">// 輸出：Hello, world!</span></span><br><span class="line"></span><br><span class="line">$C = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">echo</span> var_dump($C); <span class="comment">// 輸出：array(3) &#123;[0]=&gt;int(1) [1]=&gt;int(2) [2]=&gt;int(3)&#125;</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 中需要 <code>fmt</code> 套件。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"Foo"</span>) <span class="comment">// 輸出：Foo</span></span><br><span class="line"></span><br><span class="line">A := <span class="string">"Bar"</span>  </span><br><span class="line">fmt.Println(A) <span class="comment">// 輸出：Bar</span></span><br><span class="line"></span><br><span class="line">B := <span class="string">"Hello"</span>  </span><br><span class="line">fmt.Printf(<span class="string">"%s, world!"</span>, B) <span class="comment">// 輸出：Hello, world!</span></span><br><span class="line"></span><br><span class="line">C := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  </span><br><span class="line">fmt.Println(C) <span class="comment">// 輸出：[1 2 3]</span></span><br></pre></td></tr></table></figure></p><h3>函式－Function</h3><p>相差較少<strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, world!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> test(); <span class="comment">// 輸出：Hello, world!</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>Golang 須在函式後面宣告會回傳的資料型別。</p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">string</span></span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello, world!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(test()) <span class="comment">// 輸出：Hello, world!</span></span><br></pre></td></tr></table></figure></p><h3>多值回傳－Multiple Value</h3><p><strong>PHP</strong>在 PHP 中，回傳多個資料需使用陣列，將資料放入陣列裡。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">'username'</span> =&gt; <span class="string">'yu0628'</span>, </span><br><span class="line">        <span class="string">'time'</span>     =&gt; <span class="number">123456</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line">$data = test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $data[<span class="string">'username'</span>], $data[<span class="string">'time'</span>]; <span class="comment">// 輸出：yu0628 123456</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 中不必用到一個陣列，函式可以一次回傳多個值：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"yu0628"</span>, <span class="number">123456</span></span><br><span class="line">&#125;</span><br><span class="line">username, time := test()</span><br><span class="line"></span><br><span class="line">fmt.Println(username, time) <span class="comment">// 輸出：yu0628 123456</span></span><br></pre></td></tr></table></figure></p><h3>匿名函式－Anonymous Function</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Hello, world!"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$a(); <span class="comment">// 輸出：Hello, world!</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Println(<span class="string">"Hello, world!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a() <span class="comment">// 輸出：Hello, world!</span></span><br></pre></td></tr></table></figure></p><h3>多資料儲存型態－Stores</h3><p><strong>PHP</strong>PHP 儲存皆用陣列即可。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$array  = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">$array2 = [<span class="string">'username'</span> =&gt; <span class="string">'yu0628'</span>, </span><br><span class="line">           <span class="string">'password'</span> =&gt; <span class="string">'2019 Dec'</span>];</span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>Golang 中有這些型態：<code>array</code>, <code>slice</code>, <code>map</code>, <code>interface</code>Golang 是個<strong>強型別語言</strong>，意思是陣列中只能有一種型態，means當決定此陣列是擺放字串資料時，就只能放字串。沒有數值、沒有布林值。</p><h4>1. 陣列－Array</h4><blockquote><p>一個存放固定長度的陣列。</p></blockquote><p>Golang 定義陣列時，須給一個長度及其內容存放的資料型態，陣列內容不一定要填滿其長度，但陣列內容不能超過當初定義的長度。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a = [<span class="string">"foo"</span>, <span class="string">"bar"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $a[<span class="number">0</span>]; <span class="comment">// 輸出：foo</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">2</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="string">"foo"</span>  </span><br><span class="line">a[<span class="number">1</span>] = <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a[<span class="number">0</span>]) <span class="comment">// 輸出：foo</span></span><br></pre></td></tr></table></figure></p><h4>2. 切片－Slice</h4><blockquote><p>可供「裁切」而且供自由擴展的陣列。</p></blockquote><p>相較於陣列的好處：「不用定義其最大長度，而且你可以直接賦予值」。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a = [<span class="string">"foo"</span>, <span class="string">"bar"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $a[<span class="number">0</span>]; <span class="comment">// 輸出：foo</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a := []<span class="keyword">string</span>&#123;<span class="string">"foo"</span>, <span class="string">"bar"</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(a[<span class="number">0</span>]) <span class="comment">// 輸出：foo</span></span><br></pre></td></tr></table></figure></p><p>像是 PHP 中的 <code>array_slice()</code>，但 Golang 直接讓 <code>Slice</code>「內建」了，其用法是：<code>slice[開始:結束]</code>。</p><p><strong>GoLang</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(p[<span class="number">0</span>:<span class="number">1</span>]) <span class="comment">// 輸出：[1]  </span></span><br><span class="line">fmt.Println(p[<span class="number">1</span>:<span class="number">1</span>]) <span class="comment">// 輸出：[]  （！注意跟 PHP 不一樣！）  </span></span><br><span class="line">fmt.Println(p[<span class="number">1</span>:])  <span class="comment">// 輸出：[2, 3, 4, 5, 6]  </span></span><br><span class="line">fmt.Println(p[:<span class="number">1</span>])  <span class="comment">// 輸出：[1]</span></span><br></pre></td></tr></table></figure></p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$p = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> array_slice($p, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 輸出：[1]  </span></span><br><span class="line"><span class="keyword">echo</span> array_slice($p, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// 輸出：[2]  </span></span><br><span class="line"><span class="keyword">echo</span> array_slice($p, <span class="number">1</span>);    <span class="comment">// 輸出：[2, 3, 4, 5, 6]  </span></span><br><span class="line"><span class="keyword">echo</span> array_slice($p, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 輸出：[1]</span></span><br></pre></td></tr></table></figure></p><h4>3. 映照－Map</h4><blockquote><p>有鍵名和鍵值的陣列。</p></blockquote><p>「需要事先定義其鍵名、鍵值的資料型態」，仍限制無法在映照中存放多種不同型態的資料。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$data[<span class="string">"username"</span>] = <span class="string">"yu0628"</span>;</span><br><span class="line">$data[<span class="string">"password"</span>] = <span class="string">"2019 Dec"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $data[<span class="string">"username"</span>]; <span class="comment">// yu0628</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 需要先用 <code>make()</code> 宣告 <code>map</code>。</p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">data[<span class="string">"username"</span>] = <span class="string">"yu0628"</span>  </span><br><span class="line">data[<span class="string">"password"</span>] = <span class="string">"2019 Dec"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(data[<span class="string">"username"</span>]) <span class="comment">// yu0628</span></span><br></pre></td></tr></table></figure></p><h4>4. 接口－Interface</h4><blockquote><p>一個可存放多種資料型態的陣列。</p></blockquote><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$mixedData  = [<span class="string">"foobar"</span>, <span class="number">123456</span>];</span><br><span class="line">$mixedData2 = [<span class="string">'username'</span> =&gt; <span class="string">'yu0628'</span>, </span><br><span class="line">               <span class="string">'time'</span>     =&gt; <span class="number">123456</span>];</span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>Golang 的 <code>interface{}</code> 可以接受任何內容，可以存放任何型態的資料<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mixedData := []<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">"foobar"</span>, <span class="number">123456</span>&#125;</span><br><span class="line"></span><br><span class="line">mixedData2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)  </span><br><span class="line">mixedData2[<span class="string">"username"</span>] = <span class="string">"yu0628"</span>  </span><br><span class="line">mixedData2[<span class="string">"time"</span>]     = <span class="number">123456</span></span><br></pre></td></tr></table></figure></p><h3>不定值－Mixed Type</h3><p>有個不定值的變數，在 PHP 可以直接將一個變數定義成字串、數值、空值。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$mixed = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">echo</span> $mixed; <span class="comment">// 輸出：123</span></span><br><span class="line"></span><br><span class="line">$mixed = <span class="string">'Moon, Dalan!'</span>;</span><br><span class="line"><span class="keyword">echo</span> $mixed; <span class="comment">// 輸出：Moon, Dalan!</span></span><br><span class="line"></span><br><span class="line">$mixed = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>];</span><br><span class="line"><span class="keyword">echo</span> $mixed; <span class="comment">// 輸出：['A', 'B', 'C']</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 中給予變數一個指定的資料型別<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixed <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">mixed = <span class="number">123</span>  </span><br><span class="line">fmt.Println(mixed) <span class="comment">// 輸出：123</span></span><br><span class="line"></span><br><span class="line">mixed = <span class="string">"Moon, Dalan!"</span>  </span><br><span class="line">fmt.Println(mixed) <span class="comment">// 輸出：Moon, Dalan!</span></span><br><span class="line"></span><br><span class="line">mixed = []<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;  </span><br><span class="line">fmt.Println(mixed) <span class="comment">// 輸出：["A", "B", "C"]</span></span><br></pre></td></tr></table></figure></p><h3>逆向處理－Defer</h3><p>當程式中不需要繼續使用到某個資源或是發生錯誤時，會將其關閉或是拋棄來節省資源開銷，如 PHP 裡的讀取檔案：<strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$handle = fopen(<span class="string">'example.txt'</span>, <span class="string">'r'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($errorA)  </span><br><span class="line">    errorHandlerA();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($errorB)  </span><br><span class="line">    errorHandlerB();</span><br><span class="line"></span><br><span class="line">fclose($handle); <span class="comment">// 關閉檔案</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 中，使用 <code>defer</code> 來在函式結束的時候自動執行某些程式(其執行方向為反向)。就不需要在函式最後面結束最前面的資源。<code>defer</code> 可被稱為「推遲執行」，實際上就是在函式結束後會「反序」執行的東西例如按照了這樣的順序定義 defer： A-&gt;B-&gt;C-&gt;D，那麼執行的順序其實會是 D-&gt;C-&gt;B-&gt;A，這用在程式結束時還蠻有用的<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">handle := file.Open(<span class="string">"example.txt"</span>)  </span><br><span class="line"><span class="keyword">defer</span> file.Close() <span class="comment">// 關閉檔案但「推遲執行」，所有程式結束後才會執行這裡</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errorA &#123;  </span><br><span class="line">    errorHandlerA()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> errorB &#123;  </span><br><span class="line">    errorHandlerB()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>迴圈－Loops</h3><p>Golang 中僅有 <code>for</code> 一種迴圈但卻能夠達成 <code>foreach</code>、<code>while</code>、<code>for</code> 多種用法。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; <span class="number">3</span>; $i++)  </span><br><span class="line">    <span class="keyword">echo</span> $i; <span class="comment">// 輸出：012</span></span><br><span class="line"></span><br><span class="line">$j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>($j; $j &lt; <span class="number">5</span>; $j++)  </span><br><span class="line">    <span class="keyword">echo</span> $j; <span class="comment">// 輸出：01234</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 請記得：若 <code>i</code> 先前並不存在，就需要定義它，所以下面這個範例會 <code>i := 0</code>。</p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;  </span><br><span class="line">    fmt.Println(i) <span class="comment">// 輸出 012</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">j := <span class="number">0</span>  </span><br><span class="line"><span class="keyword">for</span> ; j &lt; <span class="number">5</span> ; j++ &#123;  </span><br><span class="line">    fmt.Println(j) <span class="comment">// 輸出：01234</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>每個－Foreach</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$data = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($data <span class="keyword">as</span> $index =&gt; $value)  </span><br><span class="line">    <span class="keyword">echo</span> $index . $value . <span class="string">'|'</span> ; <span class="comment">// 輸出：0a|1b|2c|</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($data <span class="keyword">as</span> $index =&gt; $value)  </span><br><span class="line">    <span class="keyword">echo</span> $index . <span class="string">'|'</span> ; <span class="comment">// 輸出：0|1|2|</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($data <span class="keyword">as</span> $value)  </span><br><span class="line">    <span class="keyword">echo</span> $value . <span class="string">'|'</span> ; <span class="comment">// 輸出：a|b|c|</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> data &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">"%d%s|"</span>, index, value)  <span class="comment">// 輸出：0a|1b|2c|</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index := <span class="keyword">range</span> data &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">"%d|"</span>, index)  <span class="comment">// 輸出：0|1|2|</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, value := <span class="keyword">range</span> data &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">"%s|"</span>, value)  <span class="comment">// 輸出：a|b|c|</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>重複－While</h3><p><code>while(條件)</code> 迴圈在 PHP 裡面可以不斷地執行區塊中的程式，直到 條件 為 <code>false</code> 為止。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>( $i &lt; <span class="number">3</span> ) &#123;  </span><br><span class="line">    $i++;</span><br><span class="line">    <span class="keyword">echo</span> $i; <span class="comment">// 輸出：123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"WOW"</span> <span class="comment">// 輸出：WOWWOWWOW...</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 裡也有相同的做法，但仍是透過 <code>for</code> 迴圈，此 <code>for</code> 迴圈並沒有任何的分號（;），而且一個沒有條件的 <code>for</code> 迴圈會一直被執行。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">3</span> &#123;  </span><br><span class="line">    i++</span><br><span class="line">    fmt.Println(i) <span class="comment">// 輸出：123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;  </span><br><span class="line">    fmt.Println(<span class="string">"WOW"</span>) <span class="comment">// 輸出：WOWWOWWOWWOWWOW...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>做 .. 重複－Do While</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;  </span><br><span class="line">    $i++;</span><br><span class="line">    <span class="keyword">echo</span> $i; <span class="comment">// 輸出：123</span></span><br><span class="line">&#125; <span class="keyword">while</span>($i &lt; <span class="number">3</span>);</span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 中則沒有相關函式，但可以透過一個無止盡的 <code>for</code> 迴圈加上條件式使其結束迴圈。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;  </span><br><span class="line">    i++</span><br><span class="line">    fmt.Println(i) <span class="comment">// 輸出：123</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意這個條件式和 PHP 有所不同</span></span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>日期－Date</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> date(<span class="string">"Y-m-d H:i:s"</span>); <span class="comment">// 輸出：2016-07-13 12:59:59</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>Golang 並不是以 <code>Y-m-d</code> 此格式做為定義，而是 <code>1、2、3</code>，這令人需要去翻閱文件，才能夠知道 1 的定義是代表什麼。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(time.Now().Format(<span class="string">"2006-2-1 03:04:00"</span>))          <span class="comment">// 輸出：2016-07-13 12:59:59  </span></span><br><span class="line">fmt.Println(time.Now().Format(<span class="string">"Mon, Jan 2, 2006 at 3:04pm"</span>)) <span class="comment">// 輸出： Mon, Jul 13, 2016 at 12:59pm</span></span><br></pre></td></tr></table></figure></p><h3>切割字串－Split</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$data  = <span class="string">'a, b, c, d'</span>;</span><br><span class="line">$array = explode(<span class="string">', '</span>, $data);</span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data  := <span class="string">"a, b, c, d"</span>  </span><br><span class="line">array := strings.Split(data, <span class="string">", "</span>)</span><br></pre></td></tr></table></figure>記得引用 <code>strings</code> 套件。</p><h3>關聯陣列－Associative Array</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$data = [<span class="string">'username'</span> =&gt; <span class="string">'yu0628'</span>,</span><br><span class="line">         <span class="string">'password'</span> =&gt; <span class="string">'2019 Dec'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $data[<span class="string">"username"</span>]; <span class="comment">// 輸出：yu0628</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;  </span><br><span class="line">           <span class="string">"username"</span>: <span class="string">"yu0628"</span>, </span><br><span class="line">           <span class="string">"password"</span>: <span class="string">"2019 Dec"</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(data[<span class="string">"username"</span>]) <span class="comment">// 輸出：yu0628</span></span><br></pre></td></tr></table></figure></p><h3>是否存在－Isset</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 $data['username'] 存在</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($data[<span class="string">'username'</span>])) &#123;  </span><br><span class="line">    $username = $data[<span class="string">'username'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 裡面很簡單的能夠這樣辦到（僅適用於 <code>map</code>）。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">username, exists := data[<span class="string">"username"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !exists &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">"你要找的資料不存在。"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>指針－Pointer</h3><p>指針（參照）是一個像是「變數別名」的方法，此方法讓人不用整天覆蓋舊的變數假設 A = 1; B = A; 此時 B 會複製一份 A 且兩者不相干，倘若希望修改 B 的時候實際上也會修改到 A 的值，就會需要指針。</p><p>指針比起複製一個變數，會建立一個指向到某個變數的記憶體位置，這就是為什麼改變指針，實際上是在改變某個變數。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zero</span><span class="params">(&amp;$number)</span> </span>&#123; <span class="comment">// &amp; 即是指針  </span></span><br><span class="line">    $number = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$A = <span class="number">5</span>;</span><br><span class="line">zero($A);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $A; <span class="comment">// 輸出：0</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 需要用上 <code>*</code> 還有 <code>&amp;</code> 符號。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">zero</span><span class="params">(number *<span class="keyword">int</span>)</span></span> &#123;  </span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    A := <span class="number">5</span>;</span><br><span class="line">    zero(&amp;A)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%d"</span>, A) <span class="comment">// 輸出：0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>錯誤處理－Error Exception</h3><p>有時回傳的陣列裡可能有資料還有錯誤代號，且會用條件式判斷錯誤代號是否非空值。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($number)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>($number !== <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'number'</span> =&gt; <span class="number">-1</span>, </span><br><span class="line">                <span class="string">'error'</span>  =&gt; <span class="string">'$number is not 1'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'number'</span> =&gt; $number, </span><br><span class="line">            <span class="string">'error'</span>  =&gt; <span class="keyword">null</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bar = foo(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($bar[<span class="string">'error'</span>])  </span><br><span class="line">    <span class="keyword">echo</span> $bar[<span class="string">'number'</span>], $bar[<span class="string">'error'</span>]; <span class="comment">// 輸出：-1</span></span><br><span class="line">                                        <span class="comment">//      $number is not 1</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 中函式可以一次回傳多個值。不需要真的回傳一個陣列，不過要注意的是將會回傳一個屬於 <code>error</code> 資料型態的錯誤，所以需引用 <code>errors</code> 套件幫助。Golang 沒有 try .. catch，因為 <strong>Golang 推薦</strong>，應在每一次執行可能會發生錯誤的程式時就處理錯誤，而非後來用 try 到處包覆程式。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"errors"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(number <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> number != <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>, errors.New(<span class="string">"$number is not 1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> number, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> bar, err := foo(<span class="number">0</span>); err != <span class="literal">nil</span> &#123;  </span><br><span class="line">    fmt.Println(bar, err) <span class="comment">// 輸出：-1</span></span><br><span class="line">                          <span class="comment">//      $number is not 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>if</code> 條件式裡宣告變數會只能在 <code>if</code> 內部使用這個變數，而不會污染到全域範圍。</p><h3>拋出和捕捉異常－Try &amp; Catch</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($number)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>($number &lt; <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'$number is less than 10'</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>($number &gt; <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'$number is greater than 10'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    foo(<span class="number">9</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage(); <span class="comment">// 輸出：$number is less than 10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    foo(<span class="number">11</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $e-&gt;getMessage(); <span class="comment">// 輸出：$number is greater than 10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>可以使用 Golang 中另類處理錯誤的方式（可以的話盡量避免使用這種方式）：<code>panic(), recover(), defer</code>。可把 <code>panic()</code> 當作是 <code>throw</code>（丟出錯誤），一但你執行了 <code>panic()</code> 程式就會宣告而終，程式結束的時候會呼叫 <code>defer</code>，所以接下來要在 <code>defer</code> 停止 <code>panic()</code>。接著要在 <code>defer</code> 內使用 <code>recover()</code> 讓程式不再繼續進行結束動作，這就像是捕捉異常。<code>recover()</code> 可以看作 <code>catch</code>（捕捉），在 <code>defer</code> 裡面用 <code>recover()</code> 解決 <code>panic()</code>，如此程式就會回歸正常而不會被結束。</p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立一個模仿 try&amp;catch 的函式供稍後使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">try</span><span class="params">(fn <span class="keyword">func</span>()</span>, <span class="title">handler</span> <span class="title">func</span><span class="params">(<span class="keyword">interface</span>&#123;&#125;)</span>)</span> &#123;  </span><br><span class="line">    <span class="comment">// 這不會馬上被執行，但當 panic 被執行就會結束程式，結束程式就必定會呼叫 defer</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; </span><br><span class="line">        <span class="comment">// 透過 recover 來從 panic 狀態中恢復，並呼叫捕捉函式</span></span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            handler(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 執行可能帶有 panic 的程式</span></span><br><span class="line">    fn()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(number <span class="keyword">int</span>)</span></span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"number is less than 10"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> number &gt; <span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"number is greater than 10"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    try(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        foo(<span class="number">9</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">func</span><span class="params">(e <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        fmt.Println(e) <span class="comment">// 輸出：number is less than 10</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    try(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        foo(<span class="number">11</span>)</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">func</span><span class="params">(e <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">        fmt.Println(e) <span class="comment">// 輸出：number is greater than 10</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>套件／匯入／匯出－Package / Import / Export</h3><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    $foo = <span class="string">"bar"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="keyword">include</span> <span class="string">"a.php"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $foo; <span class="comment">// 輸出：bar</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>Golang 怎麼透過「套件」解決這個問題<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo <span class="keyword">string</span> = <span class="string">"bar"</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Println(foo) <span class="comment">// 輸出：bar</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>main.go</code> 中除了引用 <code>fmt</code> 套件（為了要輸出結果用的套件）之外完全沒有引用到 <code>a.go</code>。<strong>因為兩者都是屬於 <code>main</code> 套件，因此共享同一個區域</strong>。</p><h4>1. 套件－Package</h4><p>套件是每一個 <code>.go</code> 檔案都必須聲明在 Golang 原始碼中最開端的東西:<code>package main</code></p><p>意味著目前的檔案是屬於 <code>main</code> 套件，那麼要如何讓同個套件之間的函式溝通呢？</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="keyword">include</span> <span class="string">"a.php"</span>;</span><br><span class="line"></span><br><span class="line">    foo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.go</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    foo()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4>2. 匯入－Import</h4><p>在 Golang 中沒有引用單獨檔案的方式，必須匯入一整個套件，且記住：「一旦匯入，就一定要使用它」。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">"fmt"</span>                           <span class="comment">// 引用底層套件</span></span><br><span class="line">    <span class="string">"time"</span>                          <span class="comment">// 這也是底層套件</span></span><br><span class="line">    <span class="string">"github.com/yamiodymel/teameow"</span> <span class="comment">// 來自 Github 的 "teameow" 套件</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">// 下面使用剛匯入的套件</span></span><br><span class="line">    fmt.XXX()</span><br><span class="line">    time.XXX()</span><br><span class="line">    teameow.XXX()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>假如不希望使用匯入的套件，只是為了要觸發那個套件的 <code>main()</code> 函式而引用，那麼可在前面加上一個底線（<code>_</code>）。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    _ <span class="string">"fmt"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>如果套件出現了名稱衝突，可以在套件來源前面給一個新的名稱。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">"github.com/karisu/teameow"</span></span><br><span class="line">    neko <span class="string">"github.com/yamiodymel/teameow"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    teameow.XXX()</span><br><span class="line">    neko.XXX()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4>3. 匯出－Export</h4><p>同個套件內的函式還有共享變數確實可以直接用，但不表示可以給其他套件使用，其方法取決於<strong>函式／變數的「開頭大小寫」</strong>。<strong>Golang 依照一個函式／變數的開頭大小寫決定這個東西是否可供「匯出」</strong>。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.go</span></span><br><span class="line"><span class="keyword">package</span> hello</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：這裡的 Foo 的開頭字母是大寫！</span></span><br><span class="line"><span class="keyword">var</span> Foo <span class="keyword">string</span> = <span class="string">"bar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：這個 World 函式的開頭字母是大寫！</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">World</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.go</span></span><br><span class="line"><span class="keyword">package</span> test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (  </span><br><span class="line">    <span class="string">"hello"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Println(hello.Foo) <span class="comment">// 輸出：bar</span></span><br><span class="line"></span><br><span class="line">    hello.World()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>用在區別函式時格外有用，小寫開頭的任何事物都是不供匯出的，反之，大寫開頭的任何事物都是用來匯出供其他套件使用的。</p><h3>類別－Class</h3><p>Golang 中沒有類別，但有所謂的「建構體（Struct）」和「接口（Interface）」</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foobar</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> $a = <span class="string">"hello, world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> Foobar();</span><br><span class="line">$b-&gt;test(); <span class="comment">// 輸出：hello, world!</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>首先知道在 Golang 中「類別」的成員還有方法都是在「類別」外面所定義的，與 PHP 在類別內定義的方式不同<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先定義一個 Foobar 建構體，有個 a 的字串成員</span></span><br><span class="line"><span class="keyword">type</span> Foobar <span class="keyword">struct</span> &#123;  </span><br><span class="line">    a <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定義一個屬於 Foobar 的 test 方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foobar)</span> <span class="title">test</span> <span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">// 接收來自 Foobar 的 a（等同於 PHP 的 `$this-&gt;a`）</span></span><br><span class="line">    fmt.Println(f.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b := &amp;Foobar&#123;a: <span class="string">"hello, world!"</span>&#125;  </span><br><span class="line">b.test() <span class="comment">// 輸出：hello, world!</span></span><br></pre></td></tr></table></figure></p><h4>1. 建構子－Constructor</h4><p>在 PHP 中，當有一個類別被 <code>new</code> 的時候會自動執行該類別內的建構子（<code>__construct()</code>），通常會用這個來初始化一些類別內部的值。</p><p><strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = <span class="string">"foobar"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> Test();</span><br><span class="line">$b-&gt;show(); <span class="comment">// 輸出：foobar</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>但在 Golang 裡因為沒有類別，也就沒有建構子，不巧的是建構體本身也不帶有建構子的特性，此時只能自己在外部建立一個建構用函式。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Test <span class="keyword">struct</span> &#123;  </span><br><span class="line">    a <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Test)</span> <span class="title">show</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Println(t.a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用來建構 Test 的假建構子</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTest</span><span class="params">()</span> <span class="params">(test *Test)</span></span> &#123;  </span><br><span class="line">    test = &amp;Test&#123;a: <span class="string">"foobar"</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 這裡會回傳一個型態是 *Test 建構體的 test 變數</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b := newTest()  </span><br><span class="line">b.show() <span class="comment">// 輸出：foobar</span></span><br></pre></td></tr></table></figure></p><h4>2. 嵌入－Embed</h4><p>假設有兩個類別，會把其中一個類別傳入到另一個類別裡面使用<strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> $msg = <span class="string">"Hello, world!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> $foo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($foo)</span></span>&#123; </span><br><span class="line">    <span class="keyword">$this</span>-&gt;foo = $foo;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;foo-&gt;msg; </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> Foo();</span><br><span class="line">$b = <span class="keyword">new</span> Bar($a);</span><br><span class="line">$b-&gt;show(); <span class="comment">// 輸出：Hello, world!</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 中也有相同的用法，但請記得：「<strong>任何東西都是在「類別」外完成建構的</strong>」。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;  </span><br><span class="line">    msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bar <span class="keyword">struct</span> &#123;  </span><br><span class="line">    *Foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Bar)</span> <span class="title">show</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    <span class="comment">// Foo 中的 msg 會直接暴露在 Bar 底下</span></span><br><span class="line">    <span class="comment">// 所以可以直接使用 b.msg</span></span><br><span class="line">    fmt.Println(b.msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := &amp;Foo&#123;msg: <span class="string">"Hello, world!"</span>&#125;  </span><br><span class="line">b := &amp;Bar&#123;a&#125;  </span><br><span class="line">b.show() <span class="comment">// 輸出 Hello, world!</span></span><br></pre></td></tr></table></figure></p><h4>3. 遮蔽－Shadowing</h4><p>在 PHP 中沒有相關的範例Golang 在進行 <code>Foo</code> 嵌入 <code>Bar</code> 時，會自動將 <code>Foo</code> 的成員暴露在 <code>Bar</code> 底下，那麼假設「雙方之間有相同的成員名稱」呢？此時被嵌入的成員就會被「遮蔽」</p><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;  </span><br><span class="line">    msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bar <span class="keyword">struct</span> &#123;  </span><br><span class="line">    *Foo</span><br><span class="line">    msg <span class="keyword">string</span> <span class="comment">// 遮蔽了 Foo 的 msg</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a := &amp;Foo&#123;msg: <span class="string">"Hello, world!"</span>&#125;  </span><br><span class="line">b := &amp;Bar&#123;Foo: a, msg: <span class="string">"Moon, Dalan!"</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(b.msg)     <span class="comment">// 輸出：Moon, Dalan!  </span></span><br><span class="line">fmt.Println(b.Foo.msg) <span class="comment">// 輸出：Hello, world!</span></span><br></pre></td></tr></table></figure></p><h4>4. 多形－Polymorphism</h4><p>雖然都是呼叫同一個函式，但這個函式可以針對不同的資料來源做出不同的舉動，這就是多形。也能夠把這看作是：「訊息的意義由接收者定義，而不是傳送者」。</p><p>目前 PHP 中沒有真正的「多形」，不過仍可以做出同樣的東西。<strong>PHP</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"><span class="keyword">public</span> $msg = <span class="string">"hello"</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $msg = <span class="string">"world!"</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">process</span><span class="params">($class)</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(get_class($class)) &#123;</span><br><span class="line">            <span class="comment">// 依照不同的資料類型做出不同的舉動</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Foo'</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'處理 Foo | '</span> . $class-&gt;msg . <span class="string">', world!'</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Bar'</span>:</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'處理 Bar | '</span> . <span class="string">'hello, '</span> . $class-&gt;msg;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$foo = <span class="keyword">new</span> Foo();</span><br><span class="line">$bar = <span class="keyword">new</span> Bar();</span><br><span class="line">$handler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 雖然都是同個函式，但是可以處理不同資料</span></span><br><span class="line">$handler-&gt;process($foo); <span class="comment">// 輸出：處理 Foo | hello, world!</span></span><br><span class="line">$handler-&gt;process($bar); <span class="comment">// 輸出：處理 Bar | hello, world!</span></span><br></pre></td></tr></table></figure></p><p><strong>GoLang</strong>在 Golang 中有 interface 可以幫忙完成這個工作。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;  </span><br><span class="line">    msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bar <span class="keyword">struct</span> &#123;  </span><br><span class="line">    msg <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 透過 Handler 實作 process</span></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;  </span><br><span class="line">    process()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理 Foo 資料的 process</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f Foo)</span> <span class="title">process</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">"處理 Foo | %s, world!"</span>, f.msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 處理 Bar 資料的 process</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bar)</span> <span class="title">process</span><span class="params">()</span></span> &#123;  </span><br><span class="line">    fmt.Printf(<span class="string">"處理 Bar | hello, %s"</span>, b.msg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo := Foo&#123;msg: <span class="string">"hello"</span>&#125;  </span><br><span class="line">bar := Bar&#123;msg: <span class="string">"world!"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 雖然都是同個函式，但是可以處理不同資料</span></span><br><span class="line">Handler.process(foo) <span class="comment">// 輸出：處理 Foo | hello, world!  </span></span><br><span class="line">Handler.process(bar) <span class="comment">// 輸出：處理 Bar | hello, world!</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> PHP </tag>
            
            <tag> Defer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-練習姓名產生器-dep</title>
      <link href="/repository/2019/12/09/GoLang-%E7%B7%B4%E7%BF%92%E5%A7%93%E5%90%8D%E7%94%A2%E7%94%9F%E5%99%A8-dep/"/>
      <url>/repository/2019/12/09/GoLang-%E7%B7%B4%E7%BF%92%E5%A7%93%E5%90%8D%E7%94%A2%E7%94%9F%E5%99%A8-dep/</url>
      
        <content type="html"><![CDATA[<h2>Practice</h2><h2>&lt;!--more--&gt;</h2><ul><li>透過應用程式可以產生姓名，並建立屬於自己的字典，讓取名可以有自定義的方向，還可避開不喜歡的字。</li></ul><h3>使用dep</h3><ul><li><p>使用 <code>dep</code> 初始化一個 <code>CLI</code> 專案。</p></li><li><p><code>$ brew install dep</code></p></li><li><p>找現有程式參考。 <code>Dapper</code> 是個不錯且夠簡單的 <code>CLI</code> 專案，其 <code>main.go</code> 用了 [urfave/cli][] （有改名過）框架。</p></li><li><p>先下載 <code>cli</code> 套件原始碼：<code>$ go get github.com/urfave/cli</code></p></li><li><p>建立主要檔案 <code>main.go</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"github.com/urfave/cli"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">app := cli.NewApp()</span><br><span class="line">app.Name = <span class="string">`Namer`</span></span><br><span class="line">app.Run(os.Args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>切記，須將project建立在 <code>$HOME/go/src/myproject</code></p></li><li><p>關於 <code>dep</code> 的應用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ dep</span><br><span class="line">dep is a tool for managing dependencies for Go projects</span><br><span class="line"></span><br><span class="line">Usage: dep &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  init     Initialize a new project with manifest and lock files</span><br><span class="line">  status   Report the status of the project&#39;s dependencies</span><br><span class="line">  ensure   Ensure a dependency is safely vendored in the project</span><br><span class="line">  prune    Prune the vendor tree of unused packages</span><br><span class="line">  version  Show the dep version information</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  dep init                               set up a new project</span><br><span class="line">  dep ensure                             install the project&#39;s dependencies</span><br><span class="line">  dep ensure -update                     update the locked versions of all dependencies</span><br><span class="line">  dep ensure -add github.com&#x2F;pkg&#x2F;errors  add a dependency to the project</span><br><span class="line"></span><br><span class="line">Use &quot;dep help [command]&quot; for more information about a command.</span><br></pre></td></tr></table></figure></p></li><li><p>需至<code>$HOME/go/src/myproject</code> 進行<code>dep init</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ dep init</span><br><span class="line">  Using ^1.20.0 as constraint for direct dep github.com&#x2F;urfave&#x2F;cli</span><br><span class="line">  Locking in v1.20.0 (cfb3883) for direct dep github.com&#x2F;urfave&#x2F;cli</span><br></pre></td></tr></table></figure></p></li><li><p>將程式碼裡的依賴都找出，將其下載到 <code>vendor</code> 目錄。</p></li><li><p><code>vendor</code> 須不須 <code>commit</code> ，可以參考官方文件，是隨意，同時也很負責的說明了優缺點。</p></li></ul><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">NAME:</span><br><span class="line">   Namer - A new cli application</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   main [global options] command [command options] [arguments...]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">   0.0.0</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">     help, h  Shows a list of commands or help for one command</span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --help, -h     show help</span><br><span class="line">   --version, -v  print the version</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Inheritance</title>
      <link href="/repository/2019/12/08/GoLang-Inheritance/"/>
      <url>/repository/2019/12/08/GoLang-Inheritance/</url>
      
        <content type="html"><![CDATA[<h2>Inheritance</h2><h2>&lt;!--more--&gt;</h2><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">age   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(people People)</span> <span class="title">Hello</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hi! I am `</span> + people.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">yu := People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(yu.Hello()) <span class="comment">// Hi! Someone, I am Yu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>假設想要有新的結構是 <code>Taiwanese</code> 繼承 <code>People</code> ，寫法是這樣的：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">age   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Taiwanese <span class="keyword">struct</span> &#123;</span><br><span class="line">People</span><br><span class="line">country  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(people People)</span> <span class="title">Hello</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hi! I am `</span> + people.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">yu := Taiwanese&#123;People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>&#125;, <span class="string">`Taiwan`</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(yu)         <span class="comment">// &#123;&#123;Yu 18&#125; Taiwan&#125;</span></span><br><span class="line">fmt.Println(yu.country) <span class="comment">// Taiwan</span></span><br><span class="line"></span><br><span class="line">fmt.Println(yu.name)    <span class="comment">// Yu</span></span><br><span class="line">fmt.Println(yu.age)     <span class="comment">// 18</span></span><br><span class="line">fmt.Println(yu.Hello()) <span class="comment">// Hi! I am Yu</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定結構</span></span><br><span class="line">fmt.Println(yu.People.name)    <span class="comment">// Yu</span></span><br><span class="line">fmt.Println(yu.People.age)     <span class="comment">// 18</span></span><br><span class="line">fmt.Println(yu.People.Hello()) <span class="comment">// Hi! I am Yu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>可以多重繼承，但若成員重覆的話，就會出現 <code>ambiguous selector</code> 編譯錯誤<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">age   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Taiwanese <span class="keyword">struct</span> &#123;</span><br><span class="line">People</span><br><span class="line">Animal</span><br><span class="line">country  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>覆寫成員與方法</h3><ul><li><p>第一個例子可以看到成員與方法是會被繼承下來的，也可以被覆寫：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Taiwanese <span class="keyword">struct</span> &#123;</span><br><span class="line">People</span><br><span class="line">name    <span class="keyword">string</span></span><br><span class="line">country <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(people People)</span> <span class="title">Hello</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hi! I am `</span> + people.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(taiwanese Taiwanese)</span> <span class="title">Hello</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`你好！我是`</span> + taiwanese.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">yu := Taiwanese&#123;People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>&#125;, <span class="string">`妤`</span>, <span class="string">`Taiwan`</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(yu.Hello())        <span class="comment">// 你好！我是妤</span></span><br><span class="line">fmt.Println(yu.People.Hello()) <span class="comment">// Hi! I am Yu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>Taiwanese</code> 看起來很像 <code>People</code> 了，不過還是不能當作是 <code>People</code> 使用（多型），要使用 <code>interface</code> 之後才能解決。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Inheritance </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Method</title>
      <link href="/repository/2019/12/08/GoLang-Method/"/>
      <url>/repository/2019/12/08/GoLang-Method/</url>
      
        <content type="html"><![CDATA[<h2>Method</h2><h2>&lt;!--more--&gt;</h2><ul><li><p>結構可以定義同類型的資料，而同類型的資料通常又會有同類型的行為。</p></li><li><p>Go 有 <code>Anonymous Function</code> ，有寫過 Javascript 可能第一個想到的解法是這樣：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">age   <span class="keyword">int</span></span><br><span class="line">Hello <span class="function"><span class="keyword">func</span><span class="params">(other People)</span> <span class="title">string</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> yu People  <span class="comment">// var 變數名稱 變數型態</span></span><br><span class="line"></span><br><span class="line">other := People&#123;name: <span class="string">`Someone`</span>&#125;</span><br><span class="line">yu = People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>, <span class="function"><span class="keyword">func</span><span class="params">(other People)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hi! `</span> + other.name + <span class="string">`, I am `</span> + yu.name</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(yu.Hello(other)) <span class="comment">// Hi! Someone, I am Yu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>但缺點是，需要動態給匿名函式的值，且需要閉包才能取得 yu 變數，這樣函式就很難共用，且得先宣告 yu ，才能把匿名函式指定給 yu ，整個程式會變得有點混亂。因此<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">age   <span class="keyword">int</span></span><br><span class="line">Hello <span class="function"><span class="keyword">func</span><span class="params">(self People, other People)</span> <span class="title">string</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">hello := <span class="function"><span class="keyword">func</span><span class="params">(self People, other People)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hi! `</span> + other.name + <span class="string">`, I am `</span> + self.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">other := People&#123;name: <span class="string">`Someone`</span>&#125;</span><br><span class="line">yu := People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>, hello&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(yu.Hello(yu, other)) <span class="comment">// Hi! I am Yu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>第一個傳的值就是結構變數，在函式裡就可以使用 <code>self</code> 取得結構的資料。這做法有點類似 Python 定義類別裡的 <code>self</code> ，只是需要自己手動傳值。</p></li><li><p>事實上 Go 有提供更好的寫法：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name  <span class="keyword">string</span></span><br><span class="line">age   <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(people People)</span> <span class="title">Hello</span><span class="params">(other People)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hi! `</span> + other.name + <span class="string">`, I am `</span> + people.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">other := People&#123;name: <span class="string">`Someone`</span>&#125;</span><br><span class="line">yu := People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(yu.Hello(other)) <span class="comment">// Hi! Someone, I am Yu</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>它的概念是定義一個函式 <code>func</code> ，開頭就宣告這是哪個結構所使用的，以及裡面將會用什麼變數來代表結構本身 <code>(people People)</code> （傳值或傳址都可以），後面就跟平常定義函數一樣。</p></li><li><p>這樣的寫法，就會把 <code>Hello</code> 函式跟 <code>People</code> 綁定在一起，用起來就會非常像物件導向的寫法了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Struct</title>
      <link href="/repository/2019/12/03/GoLang-Struct/"/>
      <url>/repository/2019/12/03/GoLang-Struct/</url>
      
        <content type="html"><![CDATA[<h2>Struct</h2><h2>&lt;!--more--&gt;</h2><ul><li><code>struct</code> 是定義資料的集合，跟物件很像，也是把資料集合在一包。</li></ul><h3>定義</h3><ul><li><p><code>struct</code> 可以使用 <code>type</code> 關鍵字定義，開頭的大小寫跟函式一樣，會影響能見度；內部的成員名的定義也是一樣。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">yu := People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>&#125;</span><br><span class="line">fmt.Println(yu)       <span class="comment">// &#123;Yu 18&#125;</span></span><br><span class="line">fmt.Println(yu.name)  <span class="comment">// Yu</span></span><br><span class="line">fmt.Println(yu.age)   <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line">wang := People&#123;age: <span class="number">18</span>, name: <span class="string">`Wang`</span>&#125;</span><br><span class="line">fmt.Println(wang)        <span class="comment">// &#123;Wang 18&#125;</span></span><br><span class="line"></span><br><span class="line">part := People&#123;name: <span class="string">`Part`</span>&#125;</span><br><span class="line">fmt.Println(part)        <span class="comment">// &#123;Part &#125;</span></span><br><span class="line"></span><br><span class="line">empty := People&#123;&#125;</span><br><span class="line">fmt.Println(empty)       <span class="comment">// &#123; 0&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> empty2 People</span><br><span class="line">fmt.Println(empty2)      <span class="comment">// &#123; 0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>wang</code> 範例可以在指定值的時候改順序</p></li><li><p><code>part</code> 範例在指定部分值的時候，必須確定指明是哪個部分，比方說上例的 <code>name</code> ，即使順序一樣，沒有指明 <code>name</code> 的話一樣會出錯，比方說： <code>part := People{&quot;Part&quot;}</code> 這是不合法的範例</p></li><li><p><code>empty</code> 、 <code>empty2</code> 是零值範例</p></li><li><p>如果把一個結構指定給另一個結構時，它會使用複製：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">yu := People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>&#125;</span><br><span class="line"><span class="built_in">copy</span> := yu</span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>.name = <span class="string">`Copy`</span></span><br><span class="line"></span><br><span class="line">fmt.Println(yu) <span class="comment">//  &#123;Yu 18&#125;</span></span><br><span class="line">fmt.Println(<span class="built_in">copy</span>) <span class="comment">//   &#123;Copy 18&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>函數傳遞也是如此，如果需要傳址，可以直接用指標<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeName</span><span class="params">(people *People)</span></span> &#123;</span><br><span class="line">people.name = <span class="string">`Someone`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">yu := People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>&#125;</span><br><span class="line">fmt.Println(yu)  <span class="comment">//   &#123;Yu 18&#125;</span></span><br><span class="line"></span><br><span class="line">changeName(&amp;yu)</span><br><span class="line">fmt.Println(yu)  <span class="comment">//   &#123;Someone 18&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>使用 <code>new</code> 關鍵字的話，得到的會是指標：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeName</span><span class="params">(people *People)</span></span> &#123;</span><br><span class="line">people.name = <span class="string">`Someone`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">yu := <span class="built_in">new</span>(People)</span><br><span class="line">yu.name = <span class="string">`Yu`</span></span><br><span class="line">yu.age = <span class="number">18</span></span><br><span class="line">fmt.Println(yu)  <span class="comment">//   &amp;&#123;Yu 18&#125;</span></span><br><span class="line"></span><br><span class="line">changeName(yu)</span><br><span class="line">fmt.Println(yu)  <span class="comment">//   &amp;&#123;Someone 18&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>結構的成員也可以結構，雖然無法直接把自己包起來，但可以使用指標，如：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> People <span class="keyword">struct</span> &#123;</span><br><span class="line">name   <span class="keyword">string</span></span><br><span class="line">age    <span class="keyword">int</span></span><br><span class="line">friend *People</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">friend := <span class="built_in">new</span>(People)</span><br><span class="line">friend.name = <span class="string">`Friend`</span></span><br><span class="line"></span><br><span class="line">yu := People&#123;<span class="string">`Yu`</span>, <span class="number">18</span>, friend&#125;</span><br><span class="line">fmt.Println(yu)               <span class="comment">// &amp;&#123;Yu 18 0xc42000a060&#125;</span></span><br><span class="line">fmt.Println(yu.name)          <span class="comment">// Yu</span></span><br><span class="line">fmt.Println(yu.friend.name)   <span class="comment">// Friend</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> 指標 </tag>
            
            <tag> type </tag>
            
            <tag> new </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Anonymous Function</title>
      <link href="/repository/2019/12/03/GoLang-Anonymous-Function/"/>
      <url>/repository/2019/12/03/GoLang-Anonymous-Function/</url>
      
        <content type="html"><![CDATA[<h2>Anonymous Function</h2><h2>&lt;!--more--&gt;</h2><ul><li><p>匿名函式的使用方法<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">addFunc := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum := addFunc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum)    <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>若覺得還要存放一個變數太麻煩，這也可以省略<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum)    <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>想要從另一個函式取得匿名函式<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFunc</span><span class="params">()</span> <span class="title">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := getFunc()(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>組合技<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFunc</span><span class="params">()</span> <span class="title">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;(a, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := getFunc()(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum) <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>Closure</h3><ul><li><p>閉包是指，變數被關在某個區塊內<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFunc</span><span class="params">()</span> <span class="title">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base := <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> base + <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;(a, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := getFunc()(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum) <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFunc</span><span class="params">()</span> <span class="title">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base := <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> base + a + b</span><br><span class="line">&#125;(a, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := getFunc()(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum) <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>雖然匿名函式內容是封閉的，但 <code>base</code> 變數卻能被關進匿名函式裡，甚至是「匿名函式的匿名函式裡」，這就是閉包的特性。</p></li><li><p>因為 Go 有取址運算，我們能拿得到變數真正的位址。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getFunc</span><span class="params">()</span> <span class="title">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">base := <span class="number">10</span></span><br><span class="line">fmt.Printf(<span class="string">"In getFunc()   %p = %d\n"</span>, &amp;base, base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"In getFunc() closure   %p = %d\n"</span>, &amp;base, base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"In getFunc() closure's closure   %p = %d\n"</span>, &amp;base, base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> base + a + b</span><br><span class="line">&#125;(a, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &amp;是取位址</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := getFunc()(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum) <span class="comment">// 13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>最後輸出：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In getFunc()   <span class="number">0xc420010058</span> = <span class="number">10</span></span><br><span class="line">In getFunc() closure   <span class="number">0xc420010058</span> = <span class="number">10</span></span><br><span class="line">In getFunc() closure<span class="string">'s closure   0xc420010058 = 10</span></span><br><span class="line"><span class="string">13</span></span><br></pre></td></tr></table></figure></p></li><li><p>在三個地方的 <code>base</code> 變數位址都是 <code>0xc420010058</code> ，這是「變數被關在某個區塊內」所代表的意思。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> 取址 </tag>
            
            <tag> Closure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-First class function</title>
      <link href="/repository/2019/12/03/GoLang-First-class-function/"/>
      <url>/repository/2019/12/03/GoLang-First-class-function/</url>
      
        <content type="html"><![CDATA[<h2>First class function</h2><h2>&lt;!--more--&gt;</h2><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"reflect"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">add2 := add</span><br><span class="line"></span><br><span class="line">fmt.Println(add(<span class="number">1</span>, <span class="number">2</span>))               <span class="comment">// 3</span></span><br><span class="line">fmt.Println(add2(<span class="number">1</span>, <span class="number">2</span>))              <span class="comment">// 3</span></span><br><span class="line">fmt.Println(reflect.TypeOf(add))     <span class="comment">// func(int, int) int</span></span><br><span class="line">fmt.Println(reflect.TypeOf(add2))    <span class="comment">// func(int, int) int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>add</code> 函式也可以當作一個變數來操作，熟悉 Javascript 一定對這個寫法不陌生。</p></li><li><p>定義一個變數是函式型態（Function Type）：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"reflect"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> add2 <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line">fmt.Println(add2)          <span class="comment">// &lt;nil&gt;</span></span><br><span class="line"></span><br><span class="line">add2 = add</span><br><span class="line"></span><br><span class="line">fmt.Println(add(<span class="number">1</span>, <span class="number">2</span>))     <span class="comment">// 3</span></span><br><span class="line">fmt.Println(add2(<span class="number">1</span>, <span class="number">2</span>))    <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>因為是變數，所以也可成為其他函式的傳入值，就像 Javascript callback 一般：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cmd</span><span class="params">(a, b <span class="keyword">int</span>, callback <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>) <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> callback(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> add2 <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line">add2 = add</span><br><span class="line"></span><br><span class="line">fmt.Println(cmd(<span class="number">1</span>, <span class="number">2</span>, add))      <span class="comment">// 3</span></span><br><span class="line">fmt.Println(cmd(<span class="number">1</span>, <span class="number">2</span>, add2))     <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><ul><li><code>func(int, int) int</code> 會覺得很冗長，可以使用 <code>type</code> 來定義新的型態：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> addFunc <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cmd</span><span class="params">(a, b <span class="keyword">int</span>, callback addFunc)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> callback(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> add2 addFunc</span><br><span class="line"></span><br><span class="line">add2 = add</span><br><span class="line"></span><br><span class="line">fmt.Println(cmd(<span class="number">1</span>, <span class="number">2</span>, add))      <span class="comment">// 3</span></span><br><span class="line">fmt.Println(cmd(<span class="number">1</span>, <span class="number">2</span>, add2))     <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3>匿名函式</h3><ul><li>除了直接宣告函式傳入之外，也可以使用匿名函式：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> addFunc <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cmd</span><span class="params">(a, b <span class="keyword">int</span>, callback addFunc)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> callback(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> add2 addFunc</span><br><span class="line"></span><br><span class="line">add2 = <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(cmd(<span class="number">1</span>, <span class="number">2</span>, add2))     <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>或者直接 inline 會更簡潔：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> addFunc <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cmd</span><span class="params">(a, b <span class="keyword">int</span>, callback addFunc)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> callback(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">fmt.Println(cmd(<span class="number">1</span>, <span class="number">2</span>, <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> type </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Function declarations</title>
      <link href="/repository/2019/12/02/GoLang-Function-declarations/"/>
      <url>/repository/2019/12/02/GoLang-Function-declarations/</url>
      
        <content type="html"><![CDATA[<h2>Function declarations</h2><h2>&lt;!--more--&gt;</h2><h3>定義函式</h3><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> &lt;<span class="title">funcName</span>&gt;<span class="params">([param1 type1[, param2 type2 ...]])</span> <span class="params">([return1 type1[, return2 type2 ...]])</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [value1[, value2 ...]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p><code>funcName</code> 為 <code>function</code> 名稱，首字大寫為 <code>public</code> 是外部套件可以共用的，小寫為 <code>private</code> 只有套件內部可以看得到。</p></li><li><p><code>param</code> 為傳入值。</p></li><li><p><code>return</code> 為回傳值。 Go 可以定義多個回傳值，而且還能定義它的名稱。定義名稱時，回傳的用法會有點特別。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b, <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// add is a private function name</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum, ok := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum)    <span class="comment">// 3</span></span><br><span class="line">fmt.Println(ok)     <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>有點類似 <code>Map</code> 取值的用法</p></li><li><p>若有定義名稱的話， <code>return</code> 會把當下兩個變數的內容回傳出去。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">sum = a + b</span><br><span class="line">ok = <span class="literal">true</span> </span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum, ok := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum)    <span class="comment">// 3</span></span><br><span class="line">fmt.Println(ok)     <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>許多程式在一開始就定義 result ，在 return 的時候回傳出去。 Go 則是在規格上直接實作出來</p></li><li><p>傳回多個值時，必須照順序接值；若不需要回傳值，可以用 <code>_</code> 略過：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">sum = a + b</span><br><span class="line">ok = <span class="literal">true</span> </span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, ok := add(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(ok)     <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>傳回多值通常會用在錯誤處理，若使用不恰當的話，容易違反<strong>單一職責原則</strong>。</p></li><li><p>若傳入值是不定的，可以用 <code>...</code> 來表示<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(numbers ...<span class="keyword">int</span>)</span> <span class="params">(sum <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> numbers &#123;</span><br><span class="line">sum += num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// _為忽略index</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(sum)     <span class="comment">// 15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>裡面的 <code>numbers</code> 型態會是 Slice <code>[]int</code> ，所以可以用 <code>for range</code> 迭代。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> 單一職責原則 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Map Type</title>
      <link href="/repository/2019/12/02/GoLang-Map-Type/"/>
      <url>/repository/2019/12/02/GoLang-Map-Type/</url>
      
        <content type="html"><![CDATA[<h2>Map Type</h2><h2>&lt;!--more--&gt;</h2><ul><li>許多語言都提供 <code>key-value</code> 存放方法的 <code>map</code> 結構， Go 使用內建型態 <code>map</code> 實作。</li><li><code>map</code> 型態表示方法為： <code>map[keyType]valueType</code> ， <code>map</code> 是關鍵字， <code>keyType</code> 必須是可比較（Comparable）的型態，如 string 、 int 等， <code>valueType</code> 則是內容形態。</li></ul><h3>建立</h3><ul><li><p>建立 <code>Map</code> 資料型態也是用 <code>make</code> ，設定與取值的方法跟大部分的語言（如 PHP ）很像<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(score)  <span class="comment">// map[]</span></span><br><span class="line"></span><br><span class="line">score[<span class="string">"Yu"</span>] = <span class="number">80</span></span><br><span class="line">score[<span class="string">"Wang"</span>] = <span class="number">60</span></span><br><span class="line"></span><br><span class="line">fmt.Println(score)          <span class="comment">// map[Yu:80 Wang:60]</span></span><br><span class="line">fmt.Println(score[<span class="string">"Yu"</span>]) <span class="comment">// 80</span></span><br><span class="line">fmt.Println(score[<span class="string">"Wang"</span>])  <span class="comment">// 60</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>如果有初值的話，設定的方法很像 JSON<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"Yu"</span>: <span class="number">80</span>,</span><br><span class="line"><span class="string">"Wang"</span>: <span class="number">60</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(score)  <span class="comment">// map[]</span></span><br><span class="line"></span><br><span class="line">score[<span class="string">"Yu"</span>] = <span class="number">80</span></span><br><span class="line">score[<span class="string">"Wang"</span>] = <span class="number">60</span></span><br><span class="line"></span><br><span class="line">fmt.Println(score)          <span class="comment">// map[Yu:80 Wang:60]</span></span><br><span class="line">fmt.Println(score[<span class="string">"Yu"</span>]) <span class="comment">// 80</span></span><br><span class="line">fmt.Println(score[<span class="string">"Wang"</span>])  <span class="comment">// 60</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>宣告值最後一行 <code>&quot;Wang&quot;: 60,</code> 的逗號是必要要加的。</p></li><li><p>這個寫法如果不給初值的話，就會跟使用 <code>make</code> 方法結果一樣：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">score := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">score := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>map</code> 跟 <code>slice</code> 一樣是使用參考<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"Yu"</span>: <span class="number">80</span>,</span><br><span class="line"><span class="string">"Wang"</span>: <span class="number">60</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ref := score</span><br><span class="line"></span><br><span class="line">fmt.Println(score)          <span class="comment">// map[Yu:80 Wang:60]</span></span><br><span class="line">fmt.Println(ref)            <span class="comment">// map[Yu:80 Wang:60]</span></span><br><span class="line"></span><br><span class="line">score[<span class="string">"Someone"</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(score)          <span class="comment">// map[Wang:60 Someone:0 Yu:80]</span></span><br><span class="line">fmt.Println(ref)            <span class="comment">// map[Someone:0 Yu:80 Wang:60]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><blockquote><p>它的順序應該是不固定的。</p></blockquote><h3>操作</h3><ul><li><p>取值使用 <code>[]</code> 指定 <code>key</code></p></li><li><p>會回傳兩個值，如果 <code>key</code> 存在，會回傳值與 <code>true</code></p></li><li><p><code>key</code> 不存在則回傳零值與 <code>false</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"Yu"</span>: <span class="number">80</span>,</span><br><span class="line"><span class="string">"Wang"</span>: <span class="number">60</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ok <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">    value, ok = score[<span class="string">"Yu"</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(value)     <span class="comment">// 80</span></span><br><span class="line">fmt.Println(ok)        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    value, ok = score[<span class="string">"Nobody"</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(value)     <span class="comment">// 0</span></span><br><span class="line">fmt.Println(ok)        <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>移除 <code>key</code> 使用 <code>delete</code>函式：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">score := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"Yu"</span>: <span class="number">80</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> ok <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line">    value, ok = score[<span class="string">"Yu"</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(value)     <span class="comment">// 80</span></span><br><span class="line">fmt.Println(ok)        <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">delete</span>(score, <span class="string">"Yu"</span>)</span><br><span class="line">value, ok = score[<span class="string">"Yu"</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(value)     <span class="comment">// 0</span></span><br><span class="line">fmt.Println(ok)        <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Slice Type</title>
      <link href="/repository/2019/12/01/GoLang-Slice-Type/"/>
      <url>/repository/2019/12/01/GoLang-Slice-Type/</url>
      
        <content type="html"><![CDATA[<h2>Slice Type</h2><h2>&lt;!--more--&gt;</h2><ul><li><code>Slice</code> 跟陣列使用起來很像，最大的不同是，陣列是值， <code>Slice</code> 是參考到一個陣列。</li></ul><h3>建立</h3><ul><li><p>要建立一個全新的 <code>Slice</code>有兩種方法，一個是使用 <code>make</code>函式：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(slice)  <span class="comment">// [0 0 0 0 0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>另一個方法是<strong>指定初值</strong>，雖然用法跟陣列很像，但形態不一樣就不能拿來一起比較。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"reflect"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(slice)  <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(reflect.TypeOf(slice))  <span class="comment">// []int</span></span><br><span class="line">fmt.Println(reflect.TypeOf(arr))    <span class="comment">// [5]int</span></span><br><span class="line">fmt.Println(arr == slice)           <span class="comment">// invalid operation: arr == slice (mismatched types [5]int and []int)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>Slice 是參考到一個陣列<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">ref := slice</span><br><span class="line"></span><br><span class="line">fmt.Println(slice)  <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">fmt.Println(ref)    <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line">slice[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">fmt.Println(slice)  <span class="comment">// [100 2 3 4 5]</span></span><br><span class="line">fmt.Println(ref)    <span class="comment">// [100 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line">ref[<span class="number">4</span>] = <span class="number">500</span></span><br><span class="line"></span><br><span class="line">fmt.Println(slice)  <span class="comment">// [100 2 3 4 500]</span></span><br><span class="line">fmt.Println(ref)    <span class="comment">// [100 2 3 4 500]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>操作</h3><ul><li><p>對 <code>Slice</code> 做一些操作</p></li><li><p><code>len</code> 函式可以查長度</p></li><li><p><code>cap</code> 可以查參考的陣列有多少容量<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slice := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice))  <span class="comment">// 3</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice))  <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>append</code> 函式可以追加新元素在 Slice 最後面<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">slice1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(slice1)       <span class="comment">// [1 2 3]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice1))  <span class="comment">// 3</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice1))  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">slice2 := <span class="built_in">append</span>(slice1, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(slice2)       <span class="comment">// [1 2 3 10]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice2))  <span class="comment">// 4</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice2))  <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">slice3 := <span class="built_in">append</span>(slice2, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(slice3)       <span class="comment">// [1 2 3 10 20]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice3))  <span class="comment">// 5</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice3))  <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">slice3[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">fmt.Println(slice1)       <span class="comment">// [1 2 3]</span></span><br><span class="line">fmt.Println(slice2)       <span class="comment">// [100 2 3 10]</span></span><br><span class="line">fmt.Println(slice3)       <span class="comment">// [100 2 3 10 20]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>slice1</code> 加入新元素產生出 <code>slice2</code> 有發生長度與容量的變化（長度 + 1 ，容量 * 2），並且最後面 <code>slice1</code> 與 <code>slice2</code> 的值<strong>沒有</strong>參考到同個陣列。</p></li><li><p><code>slice2</code> 加入新元素產生出 <code>slice3</code> 只有長度 + 1 而已，最後面的值<strong>有</strong>參考到同個陣列。</p></li><li><p><code>Slice</code> 新增元素超過了容量的時候，它會產生新的陣列，且容量有兩倍，給新的 <code>Slice</code> 參考；而容量夠用的時候，則不會產生新陣列。</p></li><li><p><code>copy</code> 函式可以複製內容到另一個 <code>Slice</code> 裡<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">dst1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">dst2 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line">dst3 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(src)     <span class="comment">// [1 2 3]</span></span><br><span class="line">fmt.Println(dst1)    <span class="comment">// [0 0]</span></span><br><span class="line">fmt.Println(dst2)    <span class="comment">// [0 0 0]</span></span><br><span class="line">fmt.Println(dst3)    <span class="comment">// [0 0 0 0]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span>(dst1, src)</span><br><span class="line"><span class="built_in">copy</span>(dst2, src)</span><br><span class="line"><span class="built_in">copy</span>(dst3, src)</span><br><span class="line"></span><br><span class="line">fmt.Println(src)     <span class="comment">// [1 2 3]</span></span><br><span class="line">fmt.Println(dst1)    <span class="comment">// [1 2]</span></span><br><span class="line">fmt.Println(dst2)    <span class="comment">// [1 2 3]</span></span><br><span class="line">fmt.Println(dst3)    <span class="comment">// [1 2 3 0]</span></span><br><span class="line"></span><br><span class="line">src[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">fmt.Println(src)     <span class="comment">// [100 2 3]</span></span><br><span class="line">fmt.Println(dst1)    <span class="comment">// [1 2]</span></span><br><span class="line">fmt.Println(dst2)    <span class="comment">// [1 2 3]</span></span><br><span class="line">fmt.Println(dst3)    <span class="comment">// [1 2 3 0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>複製時，即使長度不一還是會執行成功，只是會沒有複製完全。</p></li></ul><h3>從陣列或 Slice 產生 Slice</h3><ul><li><p>除了從頭建一個新的 <code>Slice</code> 外，也可以從陣列或 <code>Slice</code> 上產生新的 <code>Slice</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125; <span class="comment">// array</span></span><br><span class="line"></span><br><span class="line">slice := arr[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(slice)        <span class="comment">// [2 3 4]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice))   <span class="comment">// 3</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice))   <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">slice2 := slice[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(slice2)       <span class="comment">// [3 4]</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(slice2))  <span class="comment">// 2</span></span><br><span class="line">fmt.Println(<span class="built_in">cap</span>(slice2))  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">slice2[<span class="number">0</span>] = <span class="number">300</span></span><br><span class="line"></span><br><span class="line">fmt.Println(arr)          <span class="comment">// [1 2 300 4 5]</span></span><br><span class="line">fmt.Println(slice)        <span class="comment">// [2 300 4]</span></span><br><span class="line">fmt.Println(slice2)       <span class="comment">// [300 4 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>[1:4]</code> 代表的意思是，從**「第 1 個元素開始，到第 4 個元素，不含第 4 個元素」**，因此取得 [2 3 4] 三個元素。而容量會從第 1 個元素開始，一直到結尾。</p></li><li><p><code>[1:3]</code> 會從 [2 3 4] 這個 <code>Slice</code> 取元素，所以取到的是 [3 4] ，容量是 3。</p></li><li><p>因為沒有使用 <code>append</code> 函式，所以都參考到第一個陣列。</p></li><li><p>另外也可以使用 <code>[:]</code> 來取得全部陣列的內容。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Slice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Array Type</title>
      <link href="/repository/2019/12/01/GoLang-Array-Type/"/>
      <url>/repository/2019/12/01/GoLang-Array-Type/</url>
      
        <content type="html"><![CDATA[<h2>Array Type</h2><h2>&lt;!--more--&gt;</h2><ul><li>在Go裡，陣列為固定長度，元素型態和長度都是陣列型態的一部份</li></ul><h3>宣告</h3><ul><li><p>使用 <code>[n]type</code>來宣告一個陣列，其中 <code>n</code>是數字，<code>type</code> 為型態<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">5</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">fmt.Println(arr)  <span class="comment">// [5 4 0 0 0]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>這裡宣告 arr 的型態是 <code>[5]int</code> ，因「元素型態與長度都是陣列型態的一部分」，所以 <code>[10]int</code> 與 <code>[5]int</code> 會是不同的型態。</p></li><li><p>因為後面三個元素並沒有指定新值，但可以看到它的初值是 0 ，也就是 zero value 。</p></li><li><p>宣告給值的話要使用 <code>:=</code> 指定，也可以使用不固定長度 <code>[...]</code> 來宣告，它會依後面給值的數量來決定陣列長度：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr1 := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">arr2 := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">arr3 := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(arr1)  <span class="comment">// [1 2 3]</span></span><br><span class="line">fmt.Println(arr2)  <span class="comment">// [1 2 3 0 0]</span></span><br><span class="line">fmt.Println(arr3)  <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>如果存取陣列超過範圍時，會出現 out of bounds 的編譯錯誤<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(arr[<span class="number">9</span>])  <span class="comment">// invalid array index 9 (out of bounds for 5-element array)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>複製</h3><ul><li><p>陣列的內容是值，所以也可以複製給另一個變數<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrCopy [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">arrCopy := arr</span><br><span class="line"></span><br><span class="line"> fmt.Println(arr)         <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">fmt.Println(arrCopy)     <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">fmt.Println(arr)         <span class="comment">// [10 2 3 4 5]</span></span><br><span class="line">fmt.Println(arrCopy)     <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrErr [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line">arrErr = arrCopy         <span class="comment">// cannot use arrCopy (type [5]int) as type [10]int in assignment</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>最後一行是型態不一致的錯，<strong>型態與長度相同</strong>，才有辦法複製值。</p></li></ul><h3>比較</h3><ul><li>陣列可以用 <code>==</code> 與 <code>!=</code> 來比較內容，一樣型態與長度相同才能比較。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">arrCopy := arr</span><br><span class="line"></span><br><span class="line"> fmt.Println(arr)             <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">fmt.Println(arrCopy)         <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">fmt.Println(arr == arrCopy)  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">fmt.Println(arr)             <span class="comment">// [10 2 3 4 5]</span></span><br><span class="line">fmt.Println(arrCopy)         <span class="comment">// [1 2 3 4 5]</span></span><br><span class="line">fmt.Println(arr == arrCopy)  <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3>巢狀陣列</h3><ul><li><p>當宣告陣列時， <code>int</code> 是一種型態，所以我們在前面加上 <code>[n]</code> 即成為 <code>int</code> 的陣列型態。</p></li><li><p><code>[n]int</code> 也是一種型態，在前面加上 <code>[m]</code> 就會成為 <code>[n]int</code> 的陣列型態。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">3</span>][<span class="number">2</span>]<span class="keyword">int</span></span><br><span class="line">fmt.Println(arr)    <span class="comment">// [[0 0] [0 0] [0 0]]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>以上，這是一個有 3 個 <code>[n]int</code> 元素的陣列。</p></li><li><p>巢狀陣列也可以宣告同時指定初值：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr1 := [<span class="number">3</span>][<span class="number">2</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;</span><br><span class="line">fmt.Println(arr1)    <span class="comment">// [[1 2] [3 4] [5 6]]</span></span><br><span class="line"></span><br><span class="line">arr2 := [...][<span class="number">2</span>]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;</span><br><span class="line">fmt.Println(arr2)    <span class="comment">// [[1 2] [3 4] [5 6]]</span></span><br><span class="line"></span><br><span class="line">arr3 := [...][...]<span class="keyword">int</span>&#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;&#125;  <span class="comment">// use of [...] array outside of array literal</span></span><br><span class="line">fmt.Println(arr3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>其中 arr3 不能這樣宣告的原因是：因為長度也是型態的一部分，宣告陣列時元素的型態必須是確定的</p></li><li><p>因此，<code>[2]int</code> 才能拿來做最外層陣列的元素型態， 而 <code>[...]int</code> 不行。</p></li></ul><h3>走訪 (我想翻譯成迭代？)</h3><ul><li>陣列除了可以用 <code>for + len()</code> 來走訪外，也可以使用 <code>for range</code> ：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> index, element := <span class="keyword">range</span> arr &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%d =&gt; %d\n"</span>, index, element)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> =&gt; <span class="number">1</span></span><br><span class="line"><span class="number">1</span> =&gt; <span class="number">2</span></span><br><span class="line"><span class="number">2</span> =&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang-Predeclared Type</title>
      <link href="/repository/2019/12/01/GoLang-Predeclared-Type/"/>
      <url>/repository/2019/12/01/GoLang-Predeclared-Type/</url>
      
        <content type="html"><![CDATA[<h2>Predeclared Type</h2><h2>&lt;!--more--&gt;</h2><ul><li>Go 的資料型別有 11 種，其中 Predeclared Type，他們是「有名稱的型態（Named Type）」。</li></ul><h3>Boolean types</h3><ul><li>最簡單的型別 <code>bool</code> ，只有兩個預定義的常數 <code>true</code> 和 <code>false</code> 。</li></ul><h3>Numeric types</h3><ul><li><p>numeric 型態包含了 <code>integer</code> （整數）、 <code>float</code>（浮點數）、 <code>complex</code>（複數）三種。</p></li><li><p>整數又分帶號 <code>int</code> 與不帶號 <code>uint</code> 兩類，也可以直接指定大小 <code>int8</code> 、 <code>int16</code> 、 <code>int32</code> 、 <code>int64</code> 或是不帶號的 <code>uint8</code> 、 <code>uint16</code> 、 <code>uint32</code> 、 <code>uint64</code> ，這些相信一看就知道佔了多少容量（bit</p></li><li><p>至於 <code>int</code> 和 <code>uint</code> 會使用哪一個要看平台實作決定，有可能是 32 bit 也有可能是 64 bit。</p></li><li><p>而另外還有兩個整數型態： <code>rune</code> 是 <code>int32</code> 的別名， <code>byte</code> 是 <code>int8</code> 的別名。</p></li><li><p><code>float</code> 有 <code>float32</code> 與 <code>float64</code> 兩種，但沒有 <code>float</code> 。</p></li><li><p>complex 則表示複數，以 RE + IMi 的方法表示，如：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>+<span class="number">5i</span></span><br></pre></td></tr></table></figure></p></li><li><p>大小則有分 <code>complex64</code> 與 <code>complex128</code> 兩種。</p></li><li><p>Go 內建的 <code>math</code> 套件提供常數取得各型態的最大值和最小值，除了解整數範圍外，也有助於實作上的判斷。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(math.MinInt8)</span><br><span class="line">fmt.Println(math.MaxInt8)</span><br><span class="line">fmt.Println(math.MinInt16)</span><br><span class="line">fmt.Println(math.MaxInt16)</span><br><span class="line">fmt.Println(math.MinInt32)</span><br><span class="line">fmt.Println(math.MaxInt32)</span><br><span class="line">fmt.Println(math.MinInt64)</span><br><span class="line">fmt.Println(math.MaxInt64)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Uint 最小值是 0</span></span><br><span class="line">fmt.Println(math.MaxUint8)</span><br><span class="line">fmt.Println(math.MaxUint16)</span><br><span class="line">fmt.Println(math.MaxUint32)</span><br><span class="line">fmt.Println(math.MaxUint64)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Float 的表示是最小非 0 浮點數</span></span><br><span class="line">fmt.Println(math.SmallestNonzeroFloat32)</span><br><span class="line">fmt.Println(math.MaxFloat32)</span><br><span class="line">fmt.Println(math.SmallestNonzeroFloat64)</span><br><span class="line">fmt.Println(math.MaxFloat64)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>注意，不同的數字型態，是不能直接摻在一起操作的。如 <code>int8</code> 不能跟 <code>uint8</code> 相加。</p></li><li><p><code>int</code> 有可能是 32 位元，但 <code>int</code> 也不能跟 int32 相加。</p></li></ul><h3>String types</h3><ul><li>Go 語言字串都是 UTF-8 字元集編碼，它可以正常的處理多國語言。字串可以使用雙引號 &quot; 或反引號 ` 定義，也可以相加</li></ul><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello 雙引號"</span>)</span><br><span class="line">fmt.Println(<span class="string">`Hello 反引號`</span>)</span><br><span class="line">fmt.Println(<span class="string">"雙引號"</span> + <span class="string">`反引號`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang-Variables &amp; Constants declarations</title>
      <link href="/repository/2019/12/01/Golang-Variables-Constants-declarations/"/>
      <url>/repository/2019/12/01/Golang-Variables-Constants-declarations/</url>
      
        <content type="html"><![CDATA[<h2>變數與常數的宣告</h2><h2>&lt;!--more--&gt;</h2><h3>變數宣告</h3><ul><li><p>宣告變數使用 <code>var</code>，以下宣告num 變數為int 型態，給予初始值 <code>10</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>int</code>可以省略<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span></span><br></pre></td></tr></table></figure></p></li><li><p>若不給初始值，預定義變數都會有預設值，Go語言稱之為零值(The zero value)， <code>int</code>的零值是0，所以下面兩行宣告是等價的<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> num <span class="keyword">int</span></span><br></pre></td></tr></table></figure></p></li><li><p>Go可以一次宣告多個變數，下面的型態分別會推斷為 <code>string</code>、<code>int</code>、<code>float64</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name, age, height = <span class="string">"Miles"</span>, <span class="number">18</span>, <span class="number">169.9</span></span><br></pre></td></tr></table></figure></p></li><li><p>也可分多行宣告<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">name = <span class="string">"Miles"</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">height = <span class="number">169.9</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></li><li><p>多行宣告並指定型態與指定初始值<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">name <span class="keyword">string</span> = <span class="string">"Miles"</span></span><br><span class="line">age <span class="keyword">uint</span> = <span class="number">18</span></span><br><span class="line">height <span class="keyword">float32</span> = <span class="number">169.9</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></li><li><p>多行宣告定指定型態不指定初始值<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">uint</span></span><br><span class="line">height <span class="keyword">float32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></li></ul><h3>短變數宣告</h3><ul><li>在func裡，若要宣告變數同時指定初值，可以使用<strong>短變數宣告</strong><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name := <span class="string">"Miles"</span></span><br><span class="line">age := <span class="number">18</span></span><br><span class="line">height := <span class="number">169.9</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>就如同 PHP 的 $name = 'Miles' 一樣，宣告變數同時給值</p></blockquote><ul><li>一樣可以寫成一行<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name, age, height := <span class="string">"Miles"</span>, <span class="number">18</span>, <span class="number">169.9</span></span><br></pre></td></tr></table></figure></li></ul><h3>常數宣告</h3><ul><li><p>宣告變數使用 const 關鍵字，下面宣告了 num 變數為 int 型態，並給值為 10：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num <span class="keyword">int</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure></p></li><li><p>num 會是不可變的常數，試圖指定新值會在編譯時報錯<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">num = <span class="number">20</span></span><br></pre></td></tr></table></figure></p></li><li><p>除了常數一定要給值，其他宣告的方法都跟變數一樣，如一次宣告多個常數<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name, age, height = <span class="string">"Miles"</span>, <span class="number">18</span>, <span class="number">169.9</span></span><br></pre></td></tr></table></figure></p></li><li><p>多行宣告<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">name = <span class="string">"Miles"</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">height = <span class="number">169.9</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></li><li><p>多行宣告並指定型態<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">name <span class="keyword">string</span> = <span class="string">"Miles"</span></span><br><span class="line">age <span class="keyword">uint</span> = <span class="number">18</span></span><br><span class="line">height <span class="keyword">float32</span> = <span class="number">169.9</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p></li><li><p>如果宣告了一個 num 變數沒使用， Go 會在編譯時期出錯：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.<span class="keyword">go</span>:<span class="number">8</span>:<span class="number">6</span>: num declared and not used</span><br></pre></td></tr></table></figure></p></li><li><p>常數則可以宣告但不使用。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About GoLang</title>
      <link href="/repository/2019/12/01/About-GoLang/"/>
      <url>/repository/2019/12/01/About-GoLang/</url>
      
        <content type="html"><![CDATA[<h2>Introduction</h2><p>&lt;!-- more --&gt;</p><hr><h3>語言本身的特性</h3><ul><li><strong>Go是為軟體工程服務而設計的語言</strong></li><li>現代程式語言最大特徵之一是混合了多種典範</li><li>在Go中，可以看到C的struct，Java的interface，函數式的典型特徵一級函式等特徵。</li><li>實際上，Go不是物件導向語言，沒有物件，沒有繼承，然而在精神的實現上，使用了struct作為資料與邏輯的聯結（就實現方式上，感覺又有點像Python了），以組合、has-a的關係來消弭程式碼重複的問題，就操作上，又滿像是物件導向語言了。</li><li>因應多核處理器普及，並行（Concurrency）程式設計的支援是現代語言的目標，Go就直接在語法上支援並行程式設計，只要在函式前放一個go關鍵字，就可以建立可與其他函式並行運作的goroutine，之間的通訊，則透過channel來實現。</li></ul><h3>慣例方面的特性</h3><ul><li>Workspaces開頭就提到，go工具一開始就是為了公開檔案庫（repositories）中的開放原始碼而設計，不管你是否發布程式碼，都得遵守它既定的環境設置規範，無從選擇。</li><li>原始碼必須放在 <code>src</code>目錄（依<code>package</code>放在各自子目錄），編譯出來的套件會放在<code>pkg</code>目錄，執行檔就放在<code>bin</code>中（也可以自定義<code>GOBIN</code>環境變數），對於相依套件，也可以透過<code>GOPATH</code>來管理。</li></ul><h3>工具與文件上的特性</h3><ul><li><p>談到工具，現代程式語言在工具的完備性上也有所重視，比方說最常見的是程式庫、套件等的管理，</p><ul><li>Ruby從1.9開始內建了RubyGems，</li><li>Python 3.4之後預設就有pip可以使用，</li><li>JavaScript，使用的是著名的npm套件管理器，</li><li>Go可以透過內建的go get指令，來下載套件，go get可以支援svn、hg、git、bzr等檔案庫的安裝，只要有安裝相對應的版本控制程式。</li></ul></li><li><p>多環境的版本控制</p><ul><li>Python中的virtualenv，從Python 3.4開始也開始內建，</li><li>GOPATH的存在，在Go也可達到這類目的，或者是安裝第三方的gvp與搭配gpm（類似Python的pip），至於Go語言本身多版本的並存需求，則可透過gvm（類似Ruby的rvm）。</li></ul></li><li><p>Go內建了測試機制，執行go test的話，會自動讀取套件目錄中的 <code>*_test.go</code>來編譯、運行測試；</p></li><li><p>在文件的支援上，有著godoc（或go doc）這樣的工具，可以直接查閱套件、函式等的文件說明，實際上，它們讀取了原始碼中的註解內容，概念上類似於Python的Docstring或者是Java的Javadoc，不過更為簡單，沒有特定的語言結構與標記，如同〈Godoc: documenting Go code〉談到的，目的是希望<strong>註解本身就是文件</strong>，即便在沒有godoc的情况下，也希望能從程式碼註解中直接獲得文件說明。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang - Constants</title>
      <link href="/repository/2019/11/30/GoLang-Constants/"/>
      <url>/repository/2019/11/30/GoLang-Constants/</url>
      
        <content type="html"><![CDATA[<h2>Constants</h2><p>&lt;!-- more --&gt;</p><hr><h3>Go 的常數類型</h3><ul><li>boolean constants ，布林常數。</li><li>rune constants ，表示字元的常數。</li><li>integer constants ，整數常數</li><li>floating-point constants ，浮點數常數</li><li>complex constants ，複數常數</li><li>string constants ，字串常數</li></ul><p>這些常數都可以用實字（literal）表示，實字又分成下面幾種：</p><ul><li><p>rune literal ， Rune 實字</p></li><li><p>integer literal ，整數實字</p></li><li><p>floating-point literal ，浮點數實字</p></li><li><p>imaginary literal ，虛數實字</p></li><li><p>string literal ，字串實字</p></li><li><p>常數有可能是已定義型態（typed）或是未定型態（untyped），實字常數、 <code>true</code> 、 <code>false</code> 、 <code>iota</code> 都屬於未定型態。</p></li><li><p>常數運算式裡的運算元都是未定型態時，運算完的結果也會是未定型態。example：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10        &#x2F;&#x2F; 10, Untyped integer constant.</span><br><span class="line">10 + 20   &#x2F;&#x2F; 30, Untyped integer constant.</span><br><span class="line">10 &#x2F; 20   &#x2F;&#x2F; 0,  Untyped integer constant.</span><br></pre></td></tr></table></figure></p></li><li><p>但如果有一個型態是確定的，那運算完的結果也會是確定的，如：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int32(10)           &#x2F;&#x2F; 10,  type int32</span><br><span class="line">int32(10) + 20      &#x2F;&#x2F; 30,  type int32</span><br><span class="line">float64(10) &#x2F; 20    &#x2F;&#x2F; 0.5, type float64</span><br></pre></td></tr></table></figure></p></li></ul><h3>Boolean constants</h3><ul><li>布林常數是內建的常數，就只有兩個： <code>true</code> 和 <code>false</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// true and false are the two untyped boolean values.</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line"><span class="literal">true</span>  = <span class="number">0</span> == <span class="number">0</span> <span class="comment">// Untyped bool.</span></span><br><span class="line"><span class="literal">false</span> = <span class="number">0</span> != <span class="number">0</span> <span class="comment">// Untyped bool.</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3>Rune constants</h3><ul><li>Rune 常數使用 Rune 實字（rune literal）來表示，它其實是代表一個 Unicode 的整數。可以使用單引號 <code>'</code> 括住 Unicode 字元，或是 byte 值來表示，如下面的範例是輸出 <code>a</code> 的三種方法，與輸出 <code>中</code> 的三種方法：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="string">'a'</span>))</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="string">'\141'</span>))</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="string">'\x61'</span>))</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="string">'中'</span>))</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="string">'\u4e2d'</span>))</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="string">'\U00004e2d'</span>))</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(<span class="string">'\n'</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>string() 函式為強制轉型字串</p></blockquote><ul><li><p>Byte 值的表示方法：</p><ul><li>直接給字元 <code>a</code></li><li><code>\</code> 開頭為八進制，後面必須是 3 個八進位的字元（<code>[0-9]{3}</code>）</li><li><code>\x</code> 開頭為十六進制表示，後面必須是 2 個十六進位的字元（<code>[0-9a-f]{2}</code>）</li></ul></li><li><p>Unicode 表示方法：</p><ul><li>直接給字元 <code>中</code></li><li><code>\u</code> 開頭，後面必須是 4 個十六進位的字元（<code>[0-9a-f]{4}</code>）</li><li><code>\U</code> 開頭，後面必須是 8 個十六進位的字元（<code>[0-9a-f]{8}</code>）</li><li>跳脫字元： <code>\</code> 後面接 <code>a</code> <code>b</code> <code>f</code> <code>n</code> <code>r</code> <code>t</code> <code>v</code> <code>\</code> <code>'</code> <code>&quot;</code> 。</li></ul></li></ul><h3>Integer constants</h3><ul><li>數字常數使用數字實字（integer literal）表示。數字實字有三種表示法：<ul><li>十進位，跟大部分的程式碼一樣，為非 <code>0</code> 開頭的連續數字（<code>[1-9][0-9]+</code>）</li><li>八進位， <code>0</code> 開頭，後面接八進位數字（<code>0[0-9]+</code>）</li><li>十六進位， <code>0</code> 開頭，後面接八進位數字（<code>0[x|X][0-9a-fA-F]+</code>）</li></ul></li></ul><h3>Floating-point constants</h3><ul><li>浮點數常數使用浮點數實字（floating-point literal）表示，浮點數使用的兩種表示法：小數點與科學符號：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 10.0</span></span><br><span class="line">fmt.Println(<span class="number">10.</span>)</span><br><span class="line">fmt.Println(<span class="number">10.0</span>)</span><br><span class="line">fmt.Println(<span class="number">010.0</span>)</span><br><span class="line">fmt.Println(<span class="number">10.e+0</span>)</span><br><span class="line">fmt.Println(<span class="number">1E1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.1</span></span><br><span class="line">fmt.Println(<span class="number">.1e+0</span>)</span><br><span class="line">fmt.Println(<span class="number">.1E0</span>)</span><br><span class="line">fmt.Println(<span class="number">.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10.1</span></span><br><span class="line">fmt.Println(<span class="number">10.1</span>)</span><br><span class="line">fmt.Println(<span class="number">1.01E1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3>Complex constants</h3><ul><li>複數常數為數字實字加虛數實字（imaginary literal）組合而成。</li><li>虛數實字的表示法為：<ul><li>十進位 + 小寫 <code>i</code> ，如 <code>10i</code></li><li>浮點數 + 小寫 <code>i</code> ，如 <code>1E1i</code><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="number">10</span> + <span class="number">10i</span>)</span><br><span class="line">fmt.Println(<span class="number">1E1</span> + <span class="number">1E1i</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3>String constants</h3><ul><li><p>字串常數使用字串實字（string literal）表示。如果是純字串，可以使用 ` 括要表示的字串，如：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">`\n`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>這樣就會輸出 <code>\n</code> 兩個字元</p></li><li><p>如果需要轉譯 rune 常數為字元的話，可以用雙引號 <code>&quot;</code> 括要表示的字串，如：<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"這是\u4e2d\u6587"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>這樣就會輸出 <code>這是中文</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoLang - Environment</title>
      <link href="/repository/2019/11/30/GoLang-Environment/"/>
      <url>/repository/2019/11/30/GoLang-Environment/</url>
      
        <content type="html"><![CDATA[<h2>安裝主程式</h2><p>&lt;!-- more --&gt;</p><hr><ul><li>主程式是指 go 指令，它能處理編譯、直譯、建置、格式化程式碼、測試、下載依賴等多種工具的組合。</li></ul><h3>MacOS</h3><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew install go</span><br><span class="line">$ go version</span><br><span class="line">go version go1.9.2 darwin&#x2F;amd64</span><br></pre></td></tr></table></figure></p><h3>環境變數設定</h3><ul><li>可下 <code>go env</code> 取得環境變數：</li></ul><p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ go env</span><br><span class="line">GO111MODULE&#x3D;&quot;&quot;</span><br><span class="line">GOARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOBIN&#x3D;&quot;&quot;</span><br><span class="line">GOCACHE&#x3D;&quot;&#x2F;Users&#x2F;pingjing&#x2F;Library&#x2F;Caches&#x2F;go-build&quot;</span><br><span class="line">GOENV&#x3D;&quot;&#x2F;Users&#x2F;pingjing&#x2F;Library&#x2F;Application Support&#x2F;go&#x2F;env&quot;</span><br><span class="line">GOEXE&#x3D;&quot;&quot;</span><br><span class="line">GOFLAGS&#x3D;&quot;&quot;</span><br><span class="line">GOHOSTARCH&#x3D;&quot;amd64&quot;</span><br><span class="line">GOHOSTOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GONOPROXY&#x3D;&quot;&quot;</span><br><span class="line">GONOSUMDB&#x3D;&quot;&quot;</span><br><span class="line">GOOS&#x3D;&quot;darwin&quot;</span><br><span class="line">GOPATH&#x3D;&quot;&#x2F;Users&#x2F;pingjing&#x2F;go&quot;</span><br><span class="line">GOPRIVATE&#x3D;&quot;&quot;</span><br><span class="line">GOPROXY&#x3D;&quot;https:&#x2F;&#x2F;proxy.golang.org,direct&quot;</span><br><span class="line">GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;go&#x2F;1.13.4&#x2F;libexec&quot;</span><br><span class="line">GOSUMDB&#x3D;&quot;sum.golang.org&quot;</span><br><span class="line">GOTMPDIR&#x3D;&quot;&quot;</span><br><span class="line">GOTOOLDIR&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;go&#x2F;1.13.4&#x2F;libexec&#x2F;pkg&#x2F;tool&#x2F;darwin_amd64&quot;</span><br><span class="line">GCCGO&#x3D;&quot;gccgo&quot;</span><br><span class="line">AR&#x3D;&quot;ar&quot;</span><br><span class="line">CC&#x3D;&quot;clang&quot;</span><br><span class="line">CXX&#x3D;&quot;clang++&quot;</span><br><span class="line">CGO_ENABLED&#x3D;&quot;1&quot;</span><br><span class="line">GOMOD&#x3D;&quot;&quot;</span><br><span class="line">CGO_CFLAGS&#x3D;&quot;-g -O2&quot;</span><br><span class="line">CGO_CPPFLAGS&#x3D;&quot;&quot;</span><br><span class="line">CGO_CXXFLAGS&#x3D;&quot;-g -O2&quot;</span><br><span class="line">CGO_FFLAGS&#x3D;&quot;-g -O2&quot;</span><br><span class="line">CGO_LDFLAGS&#x3D;&quot;-g -O2&quot;</span><br><span class="line">PKG_CONFIG&#x3D;&quot;pkg-config&quot;</span><br><span class="line">GOGCCFLAGS&#x3D;&quot;-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length&#x3D;0 -fdebug-prefix-map&#x3D;&#x2F;var&#x2F;folders&#x2F;2l&#x2F;n_g57dsd76n0xvwjmnx5xf6h0000gn&#x2F;T&#x2F;go-build181465848&#x3D;&#x2F;tmp&#x2F;go-build -gno-record-gcc-switches -fno-common&quot;</span><br></pre></td></tr></table></figure></p><ul><li><p>其中 <code>GOPATH</code> ，是需要設定的環境變數。</p></li><li><p>它代表著 go 程式的工作空間（workspace）， Windows 預設會設定在 <code>~\Go</code> ， Unix-like 則沒有預設，官方建議設定在 <code>~/go</code> 。</p></li><li><p><code>Workspace</code> 裡，劃分成三個主要目錄：</p><ul><li>src - 原始碼</li><li>pkg - go package</li><li>bin - 編譯好的執行檔，有需要也可以加入 PATH 環境變數</li></ul></li><li><p>接著使用 go 的第一個指令 <code>go get</code> ，它會把目標下載回來放在 <code>src</code> 裡，如：<code>go get github.com/MilesChou/book-start-golang-30-days</code></p></li><li><p>這樣會把上面這個 repo ，使用 HTTPS 協定 clone 到硬碟裡。</p></li><li><p>當編譯需要第三方的原始碼時，即可使用 go get 下載，同時這也可以用來下載自己或是第三方的原始碼。把所有原始碼集中成一個大大的 workspace ，這就是 go 管理原始碼的概念。</p></li></ul><h3>Hello World</h3><p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, 世界"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>讓程式在建好的環境執行，先建個目錄，檔案名叫 <code>main.go</code>，切換到目錄後，將以上的內容輸入到檔案內，接著 <code>go run main.go</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p &#x2F;path&#x2F;to&#x2F;helloworld</span><br><span class="line">$ cd &#x2F;path&#x2F;to&#x2F;helloworld</span><br><span class="line"># 輸入程式碼</span><br><span class="line">$ vim main.go</span><br><span class="line"># 執行程式碼</span><br><span class="line">$ go run main.go</span><br><span class="line">Hello, 世界</span><br></pre></td></tr></table></figure></li></ul><h3>解釋</h3><p><strong>go run</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">Hello, 世界</span><br></pre></td></tr></table></figure></p><ul><li><code>go run</code> 所做的事正是直譯，也就是直接拿原始碼編譯，同時執行。</li></ul><p><strong>package</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br></pre></td></tr></table></figure></p><ul><li><p><code>package</code> 指的是定義套件名稱。</p></li><li><p>每個 <code>.go</code> 原始碼開頭都必須要宣告 <code>package</code> 。</p></li><li><p><code>main</code> 套件是有特殊意義的套件名，它是程式的起始點。執行程式的時候，將會從 <code>main</code> 套件開始。</p></li><li><p>若把 <code>main</code> 名字換成其他名字，再執行一次，將會出現錯誤訊息：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">go run: cannot run non-main package</span><br></pre></td></tr></table></figure></p></li><li><p>不能跑非 <code>main</code> 的套件。這個概念與大多數 PHP 框架的 <code>index.php</code> 類似，是所有 <code>request</code> 的起始點。</p></li></ul><p><strong>import</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &quot;fmt&quot;</span><br></pre></td></tr></table></figure></p><ul><li><code>import</code> 表示要引用套件，而 <code>fmt</code> 套件是 <code>Go</code> 內建的處理格式化輸入輸出函式庫。</li><li><code>Hello World</code> 的目的是要輸出文字，所以需要這個函式庫。</li></ul><p><strong>func</strong></p><ul><li><p>這是定義函式，也就是要寫流程了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">fmt.Println(&quot;Hello, 世界&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>func</code> 定義了程式流程，供其他函式呼叫使用。</p></li><li><p>程式碼可以看到兩個函式，一個是現正定義的 <code>main</code> ，另一個則是 <code>fmt</code> 套件所提供的 <code>Println</code>函式，把後面帶入的文字印出來，然後再另外加一個換行。</p></li><li><p>Go 語言有套件庫的概念，同時的函式也有能見度的規範。</p></li><li><p>Go 採用比較特別的方法：開頭<strong>大寫</strong>的函式是 <code>public</code> ，不同的套件庫可以呼叫 <code>public func</code> ；開頭<strong>小寫</strong>的則是 <code>private</code> ，只限套件庫內部使用。</p></li><li><p><code>Println</code> 是屬於 <code>fmt</code> 套件的 <code>public func</code> ，因此雖然套件庫不同（main 與 fmt），仍然可以正常呼叫。</p></li><li><p><code>func main</code> 比較特別，它會搭配 <code>package main</code> 一起使用。</p></li><li><p><code>package main</code> 是所有程式的進入點</p></li><li><p><code>go run</code> 會把 <code>package main</code> 的 <code>func main</code> 拿出來呼叫。</p></li><li><p><code>go run main.go</code> 實際上就是執行 <code>fmt.Println(&quot;Hello, 世界&quot;)</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> GoLang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoLang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database ERModel</title>
      <link href="/repository/2019/11/26/Database-ERModel/"/>
      <url>/repository/2019/11/26/Database-ERModel/</url>
      
        <content type="html"><![CDATA[<h2>Database 實體關聯模型(E-R model)</h2><p>&lt;!--more--&gt;</p><hr><h3>實體 (Entity)</h3><ul><li>將真實世界的人、事、物等實體，以一個方框圖來表示，如果實體必須依附其他實體而存在，則為弱實體，使用雙方v框圖表示。</li><li>例如選課系統中的學生與課程兩個實體:<ul><li>學生的緊急聯絡人則為弱實體</li><li>因為學生轉學，則該學生的緊急連絡人資料便不需要被紀錄</li></ul></li><li>下圖是學生選課系統中的實體：<img src="http://database.klab.tw/teach/img/t4_2_01.png" class="" width="300" height="150" title="vi-vim-cheat-sheet"></li></ul><h3>屬性 (Attribute)</h3><ul><li><p>實體擁有的特性稱為屬性(Attribute)，以橢圓形來表示屬性，</p></li><li><p>當屬性具有多重值時，則以雙橢圓形來表示，</p></li><li><p>屬性為主鍵，則屬性名稱底下畫一條底線區別，</p></li><li><p>複合屬性(Composite attribute)則為屬性再分割，</p></li><li><p>衍生屬性(Derived attribute)則以虛橢圓形來表示，</p></li><li><p>例如選課系統中的學生實體擁有學號、姓名、性別、地址、年齡和電話等屬性，可以如下所示：<img src="http://database.klab.tw/teach/img/t4_2_02.png" class="" width="400" height="350" title="vi-vim-cheat-sheet"></p></li><li><p>課程實體其屬性如下圖所示：<img src="http://database.klab.tw/teach/img/t4_2_03.png" class="" width="200" height="150" title="vi-vim-cheat-sheet"></p></li><li><p>緊急聯絡人是弱實體，必須依附著學生實體，其主鍵若設定為學生學號，則此處不必繪出，如下圖所示：<img src="http://database.klab.tw/teach/img/t4_2_04.png" class="" width="150" height="100" title="vi-vim-cheat-sheet"></p></li></ul><h3>實體關係 (Relationship)</h3><ul><li><p>說明各實體之間相互關聯(relationship)的限制(constraints)，是指實體與實體之間如果有關聯，則將此關聯以菱形連結兩實體，並寫出對應的基數。</p></li><li><p>例如：每一個學生可以選修許多課程，一門課程可以被許多學生所選；每位學生皆有一位緊急聯絡人，每位聯絡人也只對應到一位學生。<img src="http://database.klab.tw/teach/img/t4_2_05.png" class="" width="300" height="200" title="vi-vim-cheat-sheet"></p></li><li><p>當實體間的關聯為多對多時，並需將此關聯改為一個實體，如下圖所示：<img src="http://database.klab.tw/teach/img/t4_2_06.png" class="" width="400" height="200" title="vi-vim-cheat-sheet"></p></li></ul><h3>E-R關聯圖 (E-R Diagram)</h3><ul><li>第4步驟則畫出完整之E-R關聯圖(E-R Diagram)。例如學生選課的ER model如下：<img src="http://database.klab.tw/teach/img/t4_2_07.png" class="" width="500" height="450" title="vi-vim-cheat-sheet"></li></ul><h3>外來鍵參考圖 (relational model schema)</h3><ol><li>實體轉成一個資料表</li><li>多值屬性轉成一個資料表</li><li>複合屬性可以轉成一個資料表，也可以只記錄複合不分拆成不同欄位。</li><li>衍生屬性記錄為計算值，並增加適當的欄位</li><li>一般屬性轉成資料表的欄位</li><li>多對多關聯轉成一個資料表</li><li>1對多關聯必須多一個外來鍵置於多的那一個資料表，已便關聯到另一個資料表的主鍵。</li><li>1對1關聯時，如果其中一個實體只有單一屬性，則可併入另一個資料表中，否則獨立為一個資料表，則仍須多一個外來鍵置已便關聯到另一個資料表的主鍵。</li></ol><ul><li><p>例如學生選課資料表之ER model轉成綱要如下：<img src="http://database.klab.tw/teach/img/t4_2_08.png" class="" width="500" height="450" title="vi-vim-cheat-sheet"></p></li><li><p>外來鍵參考圖(relational model schema)如下：<img src="http://database.klab.tw/teach/img/t4_2_09.png" class="" width="500" height="450" title="vi-vim-cheat-sheet"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
          <category> Other </category>
          
          <category> ERModel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> ERModel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel service container</title>
      <link href="/repository/2019/11/24/Laravel-service-container/"/>
      <url>/repository/2019/11/24/Laravel-service-container/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python 命名空間與範圍</title>
      <link href="/repository/2019/11/22/python-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%96%93%E8%88%87%E7%AF%84%E5%9C%8D/"/>
      <url>/repository/2019/11/22/python-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%96%93%E8%88%87%E7%AF%84%E5%9C%8D/</url>
      
        <content type="html"><![CDATA[<h2>Python 命名空間與範圍</h2><p>&lt;!--more--&gt;</p><hr><ul><li>一個名稱可以參考不同的東西，取決於在哪裡使用它</li><li>Python有各種的<strong>命名空間</strong></li><li>要存取全域變數，而不是函式內的區域變數，必須明確的使用 <code>global</code>關鍵字<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>animal = <span class="string">'bat'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">change_and_print_global</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> animal</span><br><span class="line">        animal = <span class="string">'wombat'</span></span><br><span class="line">        print(<span class="string">'Inside change_and_print_global:'</span>, animal)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animal</span><br><span class="line"><span class="string">'bat'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>change_and_print_global: wombat</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animal</span><br><span class="line"><span class="string">'wombat'</span></span><br></pre></td></tr></table></figure></li><li>若在函式內不使用 <code>global</code>，Python會使用區域的命名空間，會在函式結束時消失</li><li>Python提供兩個函式來存取命名空間的內容：</li></ul><ol><li><code>locals()</code> 會回傳區域命名空間的字典內容</li><li><code>globals()</code> 會回傳全域命名空間的字典內容<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>animal = <span class="string">'bat'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">change_local</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> animal</span><br><span class="line">        animal = <span class="string">'wombat'</span> <span class="comment"># local variable</span></span><br><span class="line">        print(<span class="string">'locals:'</span>, locals())</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animal</span><br><span class="line"><span class="string">'bat'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>change_local()</span><br><span class="line">locals: &#123;<span class="string">'animal'</span>: <span class="string">'bat'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'globals:'</span>, globals())  <span class="comment"># reformatted a little for presentation</span></span><br><span class="line">globals: &#123;<span class="string">'animal'</span>: <span class="string">'bat'</span>&#125;...,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>animal</span><br><span class="line"><span class="string">'bat'</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><code>change_local()</code> 內的區域命名空間只有區域變數，全域命名空間裡有另一個全域變數與一些其他東西</li></ul><h4>在名稱中使用_與__</h4><ul><li>在Python中，名稱開頭與結尾使用兩個底線是被保留的做法，所以不能在自己的變數中使用他們</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 命名空間 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 裝飾器</title>
      <link href="/repository/2019/11/21/python-%E8%A3%9D%E9%A3%BE%E5%99%A8/"/>
      <url>/repository/2019/11/21/python-%E8%A3%9D%E9%A3%BE%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2>Python 裝飾器</h2><p>&lt;!--more--&gt;</p><hr><ul><li>有時會修改既有的函式，不想更改原始程式碼，常見的例子，就是加入一個除錯的陳述式，來查看有哪些引數被傳入</li><li><strong>裝飾器</strong>decorator 是一種函式，他會接收一個函式，並回傳另一個函式</li></ul><ol><li><code>*args</code> &amp; <code>**kwargs</code></li><li>內部函式</li><li>當成引數的函式</li></ol><ul><li><code>document_it()</code> 函式會定義一個裝飾器，他會做以下的工作：</li></ul><ol><li>印出函式的名稱，與引數的值</li><li>用引數來執行函式</li><li>印出結果</li><li>回傳修改後的函式，以供使用</li></ol><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">document_it</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">new_function</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'Running function:'</span>, func.__name__)</span><br><span class="line">            print(<span class="string">'Positional arguments:'</span>, args)</span><br><span class="line">            print(<span class="string">'Keyword arguments:'</span>, kwargs)</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            print(<span class="string">'Result:'</span>, result)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">return</span> new_function</span><br></pre></td></tr></table></figure></p><ul><li><p>無論將什麼 <code>func</code>傳給 <code>document_it()</code>，都可以得到一個新的函式，裡面有 <code>document_it()</code>加入的陳述式</p></li><li><p>裝飾器不一定要執行任何 <code>func</code>的程式，但 <code>document_it()</code>會在過程中呼叫 <code>func</code>，讓你可以取得 <code>func</code>的結果及所有額外的東西<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add_ints</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_ints(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cooler_add_ints = document_it(add_ints) <span class="comment">#manual decorator assignment</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cooler_add_ints(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">Running function: add_ints</span><br><span class="line">Positional arguments: (<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">Keyword arguments: &#123;&#125;</span><br><span class="line">Result: <span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p></li><li><p>也可以在想要裝飾器的函式前添加 <strong>@decorator_name</strong>，來取代上述的手動指派裝飾器<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@document_it</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_ints</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_ints(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">Running function add_ints</span><br><span class="line">Positional arguments: (<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">Keyword arguments: &#123;&#125;</span><br><span class="line">Result: <span class="number">8</span></span><br><span class="line"><span class="number">8</span></span><br></pre></td></tr></table></figure></p></li><li><p>同一個函式可以有兩個以上的裝飾器<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">square_it</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">new_function</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> result * result</span><br><span class="line">        <span class="keyword">return</span> new_function</span><br></pre></td></tr></table></figure></p></li><li><p>最靠近函式的裝飾器，(在def正上方)，會先執行，無論順序為何，最終的結果都一樣的，但過程中有不同的步驟<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@document_it</span><br><span class="line"><span class="meta">    @square_it</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_ints</span><span class="params">(a, b)</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">a</span> + <span class="title">b</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&gt;&gt;&gt; <span class="title">add_ints</span><span class="params">(<span class="number">3</span>, <span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">Running</span> <span class="title">function</span> <span class="title">new_function</span></span></span><br><span class="line"><span class="function"><span class="title">Positional</span> <span class="title">arguments</span>:</span> (<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">Keyword arguments: &#123;&#125;</span><br><span class="line">Result: <span class="number">64</span></span><br><span class="line"><span class="number">64</span></span><br></pre></td></tr></table></figure></p></li><li><p>改變裝飾器的順序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>@square_it</span><br><span class="line"><span class="meta">    @document_it    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_ints</span><span class="params">(a, b)</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">a</span> + <span class="title">b</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&gt;&gt;&gt; <span class="title">add_ints</span><span class="params">(<span class="number">3</span>, <span class="number">5</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">Running</span> <span class="title">function</span> <span class="title">new_function</span></span></span><br><span class="line"><span class="function"><span class="title">Positional</span> <span class="title">arguments</span>:</span> (<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">Keyword arguments: &#123;&#125;</span><br><span class="line">Result: <span class="number">8</span></span><br><span class="line"><span class="number">64</span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 裝飾器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 產生器</title>
      <link href="/repository/2019/11/21/python-%E7%94%A2%E7%94%9F%E5%99%A8/"/>
      <url>/repository/2019/11/21/python-%E7%94%A2%E7%94%9F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2>Python 產生器</h2><p>&lt;!--more--&gt;</p><hr><ul><li><p>產生器generator是一種Python序列建立物件</p></li><li><p>可以迭代很大的序列，而不需要在記憶體中一次建立或儲存整個序列</p></li><li><p>ex: <code>range()</code></p></li><li><p>每次迭代產生器時，都會記得上一次被呼叫時的所在的位置，並回傳下一個值</p></li><li><p>一般函式不會記得之前的呼叫，且永遠會從他的第一行，以相同的狀態開始</p></li><li><p>若想建立一個可能會很大的序列，且程式很大，無法使用產生器生成式，可以編寫<strong>產生器函式</strong>，他是一種一般的函式，但會用 <code>yield</code>陳述式來回傳值，而不是 <code>return</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">my_range</span><span class="params">(first=<span class="number">0</span>, last=<span class="number">10</span>, step=<span class="number">1</span>)</span>:</span></span><br><span class="line">        number = first</span><br><span class="line">        <span class="keyword">while</span> number &lt; last:</span><br><span class="line">        <span class="keyword">yield</span> number</span><br><span class="line">        number += step</span><br><span class="line">// 是一個普通的函式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_range</span><br><span class="line">&lt;function my_range at <span class="number">0x10193e268</span>&gt;</span><br><span class="line"></span><br><span class="line">// 回傳一個產生器物件</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ranger = my_range(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ranger</span><br><span class="line">&lt;generator object my_range at <span class="number">0x10193e168</span>&gt;</span><br><span class="line"></span><br><span class="line">// 迭代這個產生器物件</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> x <span class="keyword">in</span> ranger:</span><br><span class="line">        print(x)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 產生器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 函式</title>
      <link href="/repository/2019/11/17/python-%E5%87%BD%E5%BC%8F/"/>
      <url>/repository/2019/11/17/python-%E5%87%BD%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2>Python 函式</h2><p>&lt;!--more--&gt;</p><hr><h3>函式</h3><ul><li>要重複使用程式，第一個步驟是<strong>函式</strong>，他是一種有名稱且獨立的程式片段</li><li>函式可以取用任何數量與類型的輸入參數，並回傳任何數量與類型的輸出結果</li><li>可以對函式做兩件事：</li></ul><ol><li><strong>定義</strong>它</li><li><strong>呼叫</strong>它</li></ol><ul><li><p>要定義Python函式，要輸入 <code>def</code>，函式名稱、用括號來框住函式的輸入參數，最後加上一個冒號(：)</p></li><li><p>函式名稱的命名規則與變數名稱一樣(他們必須以字母或_開頭，裡面只能使用字母、數字、或_)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p></li><li><p>要呼叫函式，只要輸入他的名稱與括號即可<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>do_nothing()</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>定義並呼叫一個沒有參數，但會印出一個單字的函式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">make_a_sound</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'quack'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>make_a_sound()</span><br><span class="line">quack</span><br></pre></td></tr></table></figure></p></li><li><p>定義函式 <code>echo()</code>函式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">echo</span><span class="params">(anything)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> anything <span class="string">''</span> anything</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>echo(<span class="string">'Rumplestiltskin'</span>)</span><br><span class="line"><span class="string">'Rumplestiltskin Rumplestiltskin'</span></span><br></pre></td></tr></table></figure></p></li><li><p>呼叫函式時，傳給他的值稱為 <strong>引數</strong>，若在呼叫時有使用引數，則這些引數的值都會被複製到函式裡面的對應<strong>參數</strong></p></li></ul><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">commentary</span><span class="params">(color)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> color == <span class="string">'red'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"It's a tomato."</span></span><br><span class="line">        <span class="keyword">elif</span> color == <span class="string">'green'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"It's a green pepper."</span></span><br><span class="line">        <span class="keyword">elif</span> color == <span class="string">'bee purple'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"I don't know what it is, but only bees can see it."</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"I've never heard of the color"</span> color <span class="string">"."</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>comment = commentary(<span class="string">'blue'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(comment)</span><br><span class="line">I<span class="string">'ve never heard of the color blue.</span></span><br></pre></td></tr></table></figure></p><ul><li>函式可以取用任何數量、任何類型的輸入引數(包括零)</li><li>他可以回傳任何數量、任何類型的輸出結果(也包括零)</li><li>如果函式沒有明確的呼叫 <code>return</code>，呼叫方會得到 <code>None</code>這個結果<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(do_nothing())</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure></li></ul><h4>None 很好用</h4><ul><li><p><code>None</code> 是一個特殊的Python值，他會在沒有東西可說時，保留一個位置</p></li><li><p>他與boolean值 <code>False</code>不一樣，雖然將他當成布林值計算時，它會被視為<code>false</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>thing = <span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> thing:</span><br><span class="line">        print(<span class="string">"It's something"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"It's nothing"</span>)</span><br><span class="line">It<span class="string">'s nothing</span></span><br></pre></td></tr></table></figure></p></li><li><p>要區分 <code>None</code> 與 布林值<code>False</code>，可以使用Python <code>is</code>運算子：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> thing <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">"It's nothing"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"It's something"</span>)</span><br><span class="line">It<span class="string">'s nothing</span></span><br></pre></td></tr></table></figure></p></li><li><p>看起來差異不大，但在Python中非常重要，需要用 <code>None</code> 來區分 &quot;遺漏值(missing value)&quot;與 &quot;空值(empty value)&quot;</p></li><li><p>零值的整數或浮點數、空字串('')、串列([])、tuple((,))、字典({})與集合(set())都是<code>false</code>，但他們不等於 <code>None</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">is_none</span><span class="params">(thing)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> thing <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            print(<span class="string">"It's None"</span>)</span><br><span class="line">        <span class="keyword">elif</span> thing:</span><br><span class="line">            print(<span class="string">"It's True"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"It's False"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>is_none(<span class="literal">None</span>)</span><br><span class="line">It<span class="string">'s None</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; is_none(True)</span></span><br><span class="line"><span class="string">It'</span>s <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>is_none(<span class="literal">False</span>)</span><br><span class="line">It<span class="string">'s False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; is_none(0)</span></span><br><span class="line"><span class="string">It'</span>s <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>is_none(<span class="number">0.0</span>)</span><br><span class="line">It<span class="string">'s False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; is_none(())</span></span><br><span class="line"><span class="string">It'</span>s <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>is_none([])</span><br><span class="line">It<span class="string">'s False</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; is_none(&#123;&#125;)</span></span><br><span class="line"><span class="string">It'</span>s <span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>is_none(set())</span><br><span class="line">It<span class="string">'s False</span></span><br></pre></td></tr></table></figure></p></li></ul><h4>位置引數</h4><ul><li>他們的值會被依序複製到對應的參數</li><li>以下範例會用他的位置引數建立一個字典並將他回傳<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(wine, entree, dessert)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'wine'</span>: wine, <span class="string">'entree'</span>: entree, <span class="string">'dessert'</span>: dessert&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>menu(<span class="string">'chardonnay'</span>, <span class="string">'chicken'</span>, <span class="string">'cake'</span>)</span><br><span class="line">&#123;<span class="string">'dessert'</span>: <span class="string">'cake'</span>, <span class="string">'wine'</span>: <span class="string">'chardonnay'</span>, <span class="string">'entree'</span>: <span class="string">'chicken'</span>&#125;</span><br></pre></td></tr></table></figure></li><li>位置引數的缺點是必須記得每一個位置的意思</li></ul><h4>關鍵字引數</h4><ul><li>為了避免發生搞不清楚引數的問題，可以用引數的對應參數名稱還指定引數，即使與函式定義中的順序不一樣也不會產生問題<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span> menu(wine=<span class="string">'bordeaux'</span>, entree=<span class="string">'beef, dessert='</span>bagel<span class="string">')</span></span><br><span class="line"><span class="string">&#123;wine='</span>bordeaux<span class="string">', entree='</span>beef, dessert=<span class="string">'bagel'</span>&#125;</span><br></pre></td></tr></table></figure></li><li>可以混合使用位置與關鍵字引數</li><li>若是在呼叫函式時要同時使用位置與關鍵字引數，位置引數必須放在前面<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span> menu(<span class="string">'frontenac'</span>, entree=<span class="string">'fish, dessert='</span>flan<span class="string">')</span></span><br><span class="line"><span class="string">&#123;wine='</span>frontenac<span class="string">', entree='</span>fish, dessert=<span class="string">'flan'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4>指定預測參數值</h4><ul><li>在呼叫方沒有提供對應的引數時使用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(wine, entree, dessert=<span class="string">'pudding'</span>)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">'wine'</span>: wine, <span class="string">'entree'</span>: entree, <span class="string">'dessert'</span>: dessert)</span><br></pre></td></tr></table></figure></li><li>這次在呼叫 <code>menu()</code>時不使用 <code>dessert</code>引數：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>menu(<span class="string">'chardonnay'</span>, <span class="string">'chicken'</span>)</span><br><span class="line">&#123;<span class="string">'dessert'</span>: <span class="string">'pudding'</span>, <span class="string">'wine'</span>: <span class="string">'chardonnay'</span>, <span class="string">'entree'</span>: <span class="string">'chicken'</span>&#125;</span><br></pre></td></tr></table></figure></li><li>若提供引數的話，韓式就會使用它，而不是預設值：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>menu(<span class="string">'dunkelfelder'</span>, <span class="string">'duck'</span>, <span class="string">'doughnut'</span>)</span><br><span class="line">&#123;<span class="string">'dessert'</span>: <span class="string">'doughnut'</span>, <span class="string">'wine'</span>: <span class="string">'dunkelfelder'</span>, <span class="string">'entree'</span>: <span class="string">'duck'</span>&#125;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">&gt; 預設的引數值會在函式**被定義**的時候計算，而不是在執行的時候</span><br><span class="line">新手常出現的錯誤，就是使用可變的資料類型，例如：串列或字典，來做為預設引數</span><br><span class="line"></span><br><span class="line">* 預期 `buggy()`函式在每次執行時，都會使用一個全新的空字串 `result`，並對他加入 `arg`引數，在印出一個單一項目的串列，但這裡有一個bug：這個串列只有在第一次呼叫函式時是空的，第二次呼叫時， `result`仍然存有之前呼叫時留下來的項目：</span><br><span class="line">```python=</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">buggy</span><span class="params">(arg, result=[])</span>:</span></span><br><span class="line">        result.append(arg)</span><br><span class="line">        print(result)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buggy(<span class="string">'a'</span>)</span><br><span class="line">[<span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>buggy(<span class="string">'b'</span>) <span class="comment">#應該是['b']</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br></pre></td></tr></table></figure></li><li>如果將它寫成如下，就可以正常運作<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">works</span><span class="params">(arg)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line">        result.append(arg)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>works(<span class="string">'a'</span>)</span><br><span class="line">[<span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>works(<span class="string">'b'</span>)</span><br><span class="line">[<span class="string">'b'</span>]</span><br></pre></td></tr></table></figure></li><li>以下的修正方式，是傳入其他的東西來說明函式是否第一次被呼叫：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">nonbuggy</span><span class="params">(arg, result=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        result = []</span><br><span class="line">    result.append(arg)</span><br><span class="line">    print(result)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nonbuggy(<span class="string">'a'</span>)</span><br><span class="line">[<span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nonbuggy(<span class="string">'b'</span>)</span><br><span class="line">[<span class="string">'b'</span>]</span><br></pre></td></tr></table></figure></li></ul><h4>用 * 來收集位置引數</h4><ul><li>當在函式的參數使用星號，星號會將可變數量的潛在引數群組化，變成一個參數值的tuple</li><li><code>args</code> 是個參數tuple，他是被傳入 <code>print_args()</code>函式的引數所產生的：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_args</span><span class="params">(*args)</span>:</span></span><br><span class="line">        print(<span class="string">'Positional argument tuple:'</span>, args)</span><br></pre></td></tr></table></figure></li><li>當在呼叫時不傳入引數，* args裡面就不會有任何東西<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_args()</span><br><span class="line">Positional argument tuple:()</span><br></pre></td></tr></table></figure></li><li>若提供引數，他會被印成 <code>args tuple</code>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_args(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'wait!'</span>, <span class="string">'uh...'</span>)</span><br><span class="line">Positional argument tuple:(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="string">'wait!'</span>, <span class="string">'uh...'</span>)</span><br></pre></td></tr></table></figure></li><li>當在編寫 <code>print()</code>這類會接收任意數量的引數函式時，若你的函式也需要用到位置引數，就把 <code>*args</code>放在最後，抓取剩下的引數：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_more</span><span class="params">(required1, required2, *args)</span>:</span></span><br><span class="line">    print(<span class="string">'Need this one:'</span>, required1)</span><br><span class="line">    print(<span class="string">'Need this one too:'</span>, required2)</span><br><span class="line">    print(<span class="string">'All the rest:'</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_more(<span class="string">'cap'</span>, <span class="string">'gloves'</span>, <span class="string">'scarf'</span>, <span class="string">'monocle'</span>, <span class="string">'mustache wax'</span>)</span><br><span class="line">Need this one: cap</span><br><span class="line">Need this one too: gloves</span><br><span class="line">All the rest:(<span class="string">'scarf'</span>, <span class="string">'monocle'</span>, <span class="string">'mustache wax'</span>)</span><br></pre></td></tr></table></figure></li><li>使用* 時，並不需要呼叫tuple參數args，這種作法只是python的慣例</li></ul><h4>用 ** 來收集關鍵字引數</h4><ul><li>使用兩個星號(** )將關鍵字引數群組化，變成一個字典</li><li>其中引數名稱是鍵，他們的值是對應的字典值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">print_kwargs</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'Keyword arguments:'</span>, kwargs)</span><br></pre></td></tr></table></figure></li><li>呼叫他時，使用一些關鍵引數<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print_kwargs(wine=<span class="string">'merlot'</span>, entree=<span class="string">'mutton'</span>, dessert=<span class="string">'macaroon'</span>)</span><br><span class="line">Keyword arguments: &#123;<span class="string">'dessert'</span>: <span class="string">'macaroon'</span>, <span class="string">'wine'</span>: <span class="string">'merlot'</span>, <span class="string">'entree'</span>: <span class="string">'mutton'</span>&#125;</span><br></pre></td></tr></table></figure></li><li>在函式內，kwargs是個字典</li><li>混合使用位置參數與* args &amp; ** kwargs，就必須按照這個順序來排列他們，如同args，其實不需要呼叫關鍵字參數kwargs，這只是一種慣例</li></ul><h4>函式是第一級公民</h4><ul><li>Python的魔咒：<strong>所有東西都是物件</strong>，包括數字、字串、tuple、串列、字典</li><li>函式也是，可以將他們指派給變數，把他們當引數傳給其他函式，以及在函式中將他們回傳<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">answer</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="number">42</span>)</span><br><span class="line">// 執行時</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>answer()</span><br><span class="line"><span class="number">42</span></span><br><span class="line">// 定義另一函式</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">run_something</span><span class="params">(func)</span>:</span></span><br><span class="line">        func()</span><br><span class="line">// 將answer放入</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>run_something(answer)</span><br><span class="line"><span class="number">42</span></span><br></pre></td></tr></table></figure></li><li>傳入的是<strong>answer</strong> 不是<strong>answer()</strong></li><li>在Python中，這些括號代表<strong>呼叫這些函式</strong></li><li>不使用括號的話，Python會將函式視為其他物件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(run_something)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">function</span>'&gt;</span></span><br></pre></td></tr></table></figure></li><li>可以將函式當成串列、tuple、集合及字典元素使用，函式是不可變的，所以也可以當成字典鍵使用</li></ul><h4>內部函式</h4><ul><li><p>可以在其他函式裡面定義函式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(a, b)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(c, d)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> c + d</span><br><span class="line">        <span class="keyword">return</span> inner(a, b)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>outer(<span class="number">4</span>, <span class="number">7</span>)</span><br><span class="line"><span class="number">11</span></span><br></pre></td></tr></table></figure></p></li><li><p>若想要在某個函式裡執行多次複雜的工作，內部函式非常實用，可以避免編寫重複的迴圈或程式碼<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">knights</span><span class="params">(saying)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(quote)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"We are the knights who says: '%s'"</span> % quote</span><br><span class="line">        <span class="keyword">return</span> inner(saying)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>knights(<span class="string">'Ni!'</span>)</span><br><span class="line"><span class="string">"We are the knights who says: 'Ni!'"</span></span><br></pre></td></tr></table></figure></p></li></ul><h4>Closure</h4><ul><li><p>內部函式可以扮演closure的角色</p></li><li><p>這是一種由其他韓式動態生成的函式，可以更改或記得函式之外的程式所以建立的變數的值</p></li><li><p>將 <code>inner()</code>轉換成一個叫 <code>inner2()</code>的closure<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">knights2</span><span class="params">(saying)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner2</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"We are the knights who says: '%s'"</span> % saying</span><br><span class="line">        <span class="keyword">return</span> inner2</span><br></pre></td></tr></table></figure></p></li><li><p><code>inner2()</code>函式知道被傳入的 <code>saying</code>得值，並會記得他</p></li><li><p>return inner2此行會回傳一個專用的inner2函式複本(而不會呼叫他)</p></li><li><p>這是一個closure：一個被動態建立出來，會記得自己來自哪裡的函式</p></li><li><p>來呼叫<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = knights2(<span class="string">'Duck'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = knights2(<span class="string">'Hasenpfeffer'</span>)</span><br><span class="line"></span><br><span class="line">// a &amp; b 分別是什麼</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">function</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">type</span><span class="params">(b)</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">function</span>'&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//它們是函式，也是<span class="title">closure</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">knights2</span>.&lt;<span class="title">locals</span>&gt;.<span class="title">inner2</span> <span class="title">at</span> 0<span class="title">x10193e158</span>&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">b</span></span></span><br><span class="line"><span class="class">&lt;<span class="title">function</span> <span class="title">knights2</span>.&lt;<span class="title">locals</span>&gt;.<span class="title">inner2</span> <span class="title">at</span> 0<span class="title">x10193e158</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">// 若呼叫他們，他們會記得當自己被建立時所使用的<span class="title">saying</span></span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">a</span><span class="params">()</span></span></span><br><span class="line"><span class="class">"<span class="title">We</span> <span class="title">are</span> <span class="title">the</span> <span class="title">knights</span> <span class="title">who</span> <span class="title">says</span>:</span> <span class="string">'Duck'</span><span class="string">"</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; b()</span></span><br><span class="line"><span class="string">"</span>We are the knights who says: <span class="string">'Hasenpfeffer'</span><span class="string">"</span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 函式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 生成式</title>
      <link href="/repository/2019/11/17/python-%E7%94%9F%E6%88%90%E5%BC%8F/"/>
      <url>/repository/2019/11/17/python-%E7%94%9F%E6%88%90%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2>Python 生成式</h2><p>&lt;!--more--&gt;</p><hr><h3>串列生成式</h3><ul><li><p>你可以建立一個從整數1到5的串列，一次建立一個項目<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list.append(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list.append(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list.append(<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list.append(<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list.append(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>你也可以使用迭代器與 <code>range()</code>函式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        number_list.append(number)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>你也可以直接將 <code>range()</code>的輸出轉成串列：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list = list(range(<span class="number">1</span>, <span class="number">6</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>以上所有方法都是有效的Python程式，也都會產生相同的結果，但要建立較符合Python風格的方式，就是使用<strong>串列生成式</strong>，最簡單的串列生成式形式是：</p></li></ul><blockquote><p>[運算式 for 項目 in 可迭代項目]</p></blockquote><ul><li><p>以下是用串列生成式建構整數串列的方式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list = [number <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>如上，第一個number變數來產生串列的值，將迴圈的結果放入number_list</p></li><li><p>第二個 number是 for迴圈的一部份，為了說明第一個number是個運算式，範例如下：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list = [number<span class="number">-1</span> <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>number_list</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>串列生成式可以容納條件運算式</p></li></ul><blockquote><p>[運算式 for 項目 in 可迭代項目 if 條件式]</p></blockquote><ul><li><p>製作一個新的生成式，用來建立一個裡面只有1到5的奇數的串列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list = [number <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>) <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>傳統的<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">        <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            a_list.append(number)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>最後，也可以在對應的生成式中使用二組以上的for子句</p></li><li><p>舊式的嵌套迴圈<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows = range(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cols = range(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> cols:</span><br><span class="line">        print(row, col)</span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p></li><li><p>再來，使用生成式，並將他指派給變數cells，製作一串(row, col)tuple：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>rows = range(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cols = range(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cells = [(row, col) <span class="keyword">for</span> row <span class="keyword">in</span> rows <span class="keyword">for</span> col <span class="keyword">in</span> cols]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> cell <span class="keyword">in</span> cells</span><br><span class="line">        print(cell)</span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 生成式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 串列、Tuple、字典與集合(四)-集合</title>
      <link href="/repository/2019/11/17/python-%E4%B8%B2%E5%88%97%E3%80%81Tuple%E3%80%81%E5%AD%97%E5%85%B8%E8%88%87%E9%9B%86%E5%90%88-%E5%9B%9B-%E9%9B%86%E5%90%88/"/>
      <url>/repository/2019/11/17/python-%E4%B8%B2%E5%88%97%E3%80%81Tuple%E3%80%81%E5%AD%97%E5%85%B8%E8%88%87%E9%9B%86%E5%90%88-%E5%9B%9B-%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2>Python 集合</h2><p>&lt;!--more--&gt;</p><hr><h3>集合(Set)</h3><ul><li>集合就像是被移除值，只留下鍵的字典，與字典一樣，每個鍵都是獨一無二的</li><li>當只想要知道某個東西是否存在，其他都無所謂時，就是使用集合的時機</li><li>若是想要將某些資訊指派給鍵作為它的值，就使用字典</li></ul><h4>以<code>set()</code>來建立</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_set = set()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_set</span><br><span class="line">set()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>even_numbers = &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>even_numbers</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odd_numbers = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>odd_numbers</span><br><span class="line">&#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure></p><ul><li>與字典一樣，集合是無序的</li></ul><blockquote><p>因為[]建立一個空串列，或許認為{}也會建立一個空集合其實，{}會建立一個空字典，這就是解譯器將空集合印成set()，而不是{}的原因因為在Python中，字典可優先取用大括號</p></blockquote><h4>用 <code>set()</code>轉換成其他類型</h4><ul><li><p>你可能會用串列、字串、tuple或字典來建立集合，並丟棄任何重複的值</p></li><li><p>一個字串裡面可能有重複的字母：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set(<span class="string">'letters'</span>)</span><br><span class="line">&#123;<span class="string">'l'</span>, <span class="string">'e'</span>, <span class="string">'t'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>這個集合裡面只有一個'e'和't'</p></li><li><p>接著將串列變成集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set([<span class="string">'Dasher'</span>, <span class="string">'Dancer'</span>, <span class="string">'Prancer'</span>, <span class="string">'Mason-Dixon'</span>])</span><br><span class="line">&#123;<span class="string">'Dancer'</span>, <span class="string">'Dasher'</span>, <span class="string">'Prancer'</span>, <span class="string">'Mason-Dixon'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>tuple 變集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set((<span class="string">'Ummagumma'</span>, <span class="string">'Echoes'</span>, <span class="string">'Atom Heart Mother'</span>))</span><br><span class="line">&#123;<span class="string">'Ummagumma'</span>, <span class="string">'Atom Heart Mother'</span>, <span class="string">'Echoes'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>字典丟給 <code>set()</code>，他只會用到鍵<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set(&#123;<span class="string">'apple'</span>: <span class="string">'red'</span>, <span class="string">'orange'</span>: <span class="string">'orange'</span>, <span class="string">'cherry'</span>: <span class="string">'red'</span>&#125;)</span><br><span class="line">&#123;<span class="string">'apple'</span>, <span class="string">'cherry, '</span>orange<span class="string">'&#125;</span></span><br></pre></td></tr></table></figure></p></li></ul><h4>使用 <code>in</code>來測試值</h4><ul><li>這是集合最常用到的地方，先建立一個稱為drinks 的字典，其中，每一個鍵都是一種混合飲料的名稱，他對應的值是他的材料集合：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>drinks = &#123;</span><br><span class="line"><span class="string">'martini'</span>: &#123;<span class="string">'vodka'</span>, <span class="string">'vermouth'</span>&#125;, </span><br><span class="line"><span class="string">'black russian'</span>: &#123;<span class="string">'vodka'</span>, <span class="string">'kahlua'</span>&#125;,</span><br><span class="line"><span class="string">'white russian'</span>: &#123;<span class="string">'cream'</span>, <span class="string">'kahlua'</span>, <span class="string">'vodka'</span>&#125;,</span><br><span class="line"><span class="string">'manhattan'</span>: &#123;<span class="string">'rye'</span>, <span class="string">'vermouth'</span>, <span class="string">'bitters'</span>&#125;,</span><br><span class="line"><span class="string">'screwdriver'</span>: &#123;<span class="string">'orange juice'</span>, <span class="string">'vodka'</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>集合都是用大括號包起來的，但他們只是一系列的值，字典是一或多個<strong>鍵：值</strong>對</li><li>哪些飲料有vodka？<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, contents <span class="keyword">in</span> drinks.items():</span><br><span class="line"><span class="keyword">if</span> <span class="string">'vodka'</span> <span class="keyword">in</span> contents:</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line">screwdriver</span><br><span class="line">martini</span><br><span class="line">black russian</span><br><span class="line">white russian</span><br></pre></td></tr></table></figure></li><li>想喝有vodka的飲料，但有乳糖不耐症，且覺得vermouth喝起來像煤油：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, contents <span class="keyword">in</span> drinks.items():</span><br><span class="line"><span class="keyword">if</span> <span class="string">'vodka'</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="keyword">not</span> (<span class="string">'vermouth'</span> <span class="keyword">in</span> contents <span class="keyword">or</span> <span class="string">'cream'</span> <span class="keyword">in</span> contents):</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line">screwdriver</span><br><span class="line">black russian</span><br></pre></td></tr></table></figure></li></ul><h4>結合與運算子</h4><ul><li><p>使用<strong>集合交集運算子</strong>，也就是 &amp; 符號<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, contents <span class="keyword">in</span> drinks.items():</span><br><span class="line"><span class="keyword">if</span> contents &amp; &#123;<span class="string">'vermouth'</span>, <span class="string">'orange juice'</span>&#125;:</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line">screwdriver</span><br><span class="line">martini</span><br><span class="line">manhattan</span><br></pre></td></tr></table></figure></p></li><li><p>&amp; 運算子會產生一個集合，裡面存有你所比較的兩個串列內都有的項目，如果contents裡面沒有任何那些材料，&amp;會回傳一個空集合，他會被視為false</p></li><li><p>接著來改寫上面的範例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, contents <span class="keyword">in</span> drinks.items():</span><br><span class="line"><span class="keyword">if</span> <span class="string">'vodka'</span> <span class="keyword">in</span> contents <span class="keyword">and</span> <span class="keyword">not</span> contents &amp; &#123;<span class="string">'vermouth'</span>, <span class="string">'cream'</span>&#125;:</span><br><span class="line">print(name)</span><br><span class="line"></span><br><span class="line">screwdriver</span><br><span class="line">black russian</span><br></pre></td></tr></table></figure></p></li><li><p>將這兩個飲料的材料集合存在變數內，節省之後範例的打字次數<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bruss = drinks[<span class="string">'black russian'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wruss = drinks[<span class="string">'white russian'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>以下是使用集合運算子的範例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = &#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>用&amp;符號或集合的 <code>intersection()</code>來取得<strong>交集</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b</span><br><span class="line">&#123;<span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.intersection(b)</span><br><span class="line">&#123;<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bruss &amp; wruss</span><br><span class="line">&#123;<span class="string">'kahlua'</span>, <span class="string">'vodka'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>使用 | 或 <code>union()</code>集合函式來取得<strong>聯集</strong>(兩組集合的成員)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.union(b)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>bruss | wruss</span><br><span class="line">&#123;<span class="string">'cream'</span>, <span class="string">'kahlua'</span>, <span class="string">'vodka'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>差集(屬於第一個集合，但不屬於第二個集合的成員)的取得方式，是使用 <code>-</code>字元，或 <code>difference()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.difference(b)</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bruss - wruss</span><br><span class="line">set()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wruss - bruss</span><br><span class="line">&#123;<span class="string">'cream'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><strong>互斥或</strong>(只屬於其中一個集合的項目)使用 ^ 或 <code>symmetric_difference()</code>：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.symmetric_difference(b)</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bruss ^ wruss</span><br><span class="line">&#123;<span class="string">'cream'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>≤</code>或 <code>issubset()</code>檢查某個集合是否為另一個集合的<strong>子集合</strong>(第一個集合的所有成員都屬於第二個集合)：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ≤ b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.issubset(b)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bruss ≤ wruss</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ≤ a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.issubset(a)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p></li><li><p>要讓**真子集(proper subset)**成立，第二個集合必須擁有第一個集合的所有成員，此外還要有其他的成員<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &lt; a</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bruss &lt; wruss</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p></li><li><p>**超集合(superset)**是子集合的相反(第二個集合的所有成員都是第一個集合的成員)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ≥ b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.issuperset(b)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wruss ≥ bruss</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p></li><li><p>所有集合都是自己的集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ≥ a</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.issuperset(a)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p></li><li><p>使用 <code>&gt;</code> 來找出<strong>真超集合(proper superset)</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt; b</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wruss &gt; bruss</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p></li><li><p>集合無法成為自己的真超集合：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &gt; a</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></p></li></ul><h4>比較資料結構</h4><ul><li>使用方括號[]製作串列</li><li>用逗號製作tuple</li><li>用大括號製作字典{}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_list = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_tuple = <span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_dict = &#123;<span class="string">'Groucho'</span>: <span class="string">'banjo'</span>, <span class="string">'Chico'</span>: <span class="string">'piano'</span>, <span class="string">'Harpo'</span>: <span class="string">'harp'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_list[<span class="number">2</span>]</span><br><span class="line"><span class="string">'Harpo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_tuple[<span class="number">2</span>]</span><br><span class="line"><span class="string">'Harpo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_dict[<span class="string">'Harpo'</span>]</span><br><span class="line"><span class="string">'harp'</span></span><br></pre></td></tr></table></figure></li><li>對串列與tuple，方括號內的值是整數位移值</li><li>對字典而言，它是鍵</li></ul><h4>製作更大的資料結構</h4><ul><li><p>從三個不同的串列開始：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons = [<span class="string">'Chapman'</span>, <span class="string">'Cleese'</span>, <span class="string">'Gilliam'</span>, <span class="string">'Jones'</span>, <span class="string">'Palin'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>stooges = [<span class="string">'Moe'</span>, <span class="string">'Curly'</span>, <span class="string">'Larry'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>製作一個tuple，將每個串列當成元素：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_of_lists = marxes, pythons, stooges</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple_of_lists</span><br><span class="line">([<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>], [<span class="string">'Chapman'</span>, <span class="string">'Cleese'</span>, <span class="string">'Gilliam'</span>, <span class="string">'Jones'</span>, <span class="string">'Palin'</span>], [<span class="string">'Moe'</span>, <span class="string">'Curly'</span>, <span class="string">'Larry'</span>])</span><br></pre></td></tr></table></figure></p></li><li><p>也可製作一個含有這三個串列的串列：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_of_lists = [marxes, pythons, stooges]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list_of_lists</span><br><span class="line">[[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>], [<span class="string">'Chapman'</span>, <span class="string">'Cleese'</span>, <span class="string">'Gilliam'</span>, <span class="string">'Jones'</span>, <span class="string">'Palin'</span>], [<span class="string">'Moe'</span>, <span class="string">'Curly'</span>, <span class="string">'Larry'</span>]]</span><br></pre></td></tr></table></figure></p></li><li><p>製作字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_of_lists = &#123;<span class="string">'Marxes'</span>: marxes, <span class="string">'Pythons'</span>: pythons, <span class="string">'Stooges'</span>: stooges&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict_of_lists</span><br><span class="line">&#123;<span class="string">'Stooges'</span>: [<span class="string">'Moe'</span>, <span class="string">'Curly'</span>, <span class="string">'Larry'</span>], <span class="string">'Marxes'</span>: [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>], <span class="string">'Pythons'</span>: [<span class="string">'Chapman'</span>, <span class="string">'Cleese'</span>, <span class="string">'Gilliam'</span>, <span class="string">'Jones'</span>, <span class="string">'Palin'</span>]&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>唯一的限制就是這些資料類型本身，如：字典鍵是不可變的，所以不能將串列、字典或集合當成其他字典的鍵，但是tuple可以，例如：可以用GPS座標來指引位置：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>houses = &#123;(<span class="number">44.79</span>, <span class="number">-93.14</span>, <span class="number">285</span>): <span class="string">'My House'</span>, (<span class="number">38.89</span>, <span class="number">-77.03</span>, <span class="number">13</span>): <span class="string">'The White House'</span>&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 串列、Tuple、字典與集合(三)-字典</title>
      <link href="/repository/2019/11/17/python-%E4%B8%B2%E5%88%97%E3%80%81Tuple%E3%80%81%E5%AD%97%E5%85%B8%E8%88%87%E9%9B%86%E5%90%88-%E4%B8%89-%E5%AD%97%E5%85%B8/"/>
      <url>/repository/2019/11/17/python-%E4%B8%B2%E5%88%97%E3%80%81Tuple%E3%80%81%E5%AD%97%E5%85%B8%E8%88%87%E9%9B%86%E5%90%88-%E4%B8%89-%E5%AD%97%E5%85%B8/</url>
      
        <content type="html"><![CDATA[<h2>Python 字典</h2><p>&lt;!--more--&gt;</p><hr><h3>字典(Dictionary)</h3><ul><li>字典與串列很像，但他不在乎項目的順序，且不會用0或1等位移值還選擇項目</li><li>必須為每一個值指定一個獨一無二的<strong>鍵</strong></li><li>這個鍵通常是個字串，但其實可以用任何一種不可變的Python類型：布林、整數、浮點數、tuple、字串...</li><li>字典通常是可變的，可以添加、刪除、改變他們的 &quot;鍵/值&quot;元素</li></ul><blockquote><p>其他語言可能會將字典稱為<strong>關聯陣列(associative array)、雜湊(Hash)或 hashmap</strong>，在Python，字典也可稱為dict還減少字母數</p></blockquote><h4>用 <code>{}</code>來建立</h4><ul><li>要建立字典，要用大括號包住以逗號分隔的<strong>鍵</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_dict = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_dict</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4>用<code>dict()</code>來轉換</h4><ul><li>可以使用<code>dict()</code>，將雙值序列轉換到字典裡面，每一個序列的第一個項目都會被當成鍵，第二個項目會被當成值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lol = [[<span class="string">'a'</span>, <span class="string">'b'</span>], [<span class="string">'c'</span>, <span class="string">'d'</span>], [<span class="string">'e'</span>, <span class="string">'f'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(lol)</span><br><span class="line">&#123;<span class="string">'c'</span>: <span class="string">'d'</span>, <span class="string">'a'</span>: <span class="string">'b'</span>, <span class="string">'e'</span> :<span class="string">'f'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>字典裡的鍵的順序都是任意排列的</p></blockquote><ul><li>可以使用任何存放雙項目序列的序列</li></ul><ol><li><p>一個含有雙項目tuple的串列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lot = [(<span class="string">'a'</span>, <span class="string">'b'</span>), (<span class="string">'c'</span>, <span class="string">'d'</span>), (<span class="string">'e'</span>, <span class="string">'f'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(lot)</span><br><span class="line">&#123;<span class="string">'c'</span>: <span class="string">'d'</span>, <span class="string">'a'</span>: <span class="string">'b'</span>, <span class="string">'e'</span> :<span class="string">'f'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>一個含有雙項目串列的tuple<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tol = ([<span class="string">'a'</span>, <span class="string">'b'</span>], [<span class="string">'c'</span>, <span class="string">'d'</span>], [<span class="string">'e'</span>, <span class="string">'f'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(tol)</span><br><span class="line">&#123;<span class="string">'c'</span>: <span class="string">'d'</span>, <span class="string">'a'</span>: <span class="string">'b'</span>, <span class="string">'e'</span> :<span class="string">'f'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>一個含有雙字元字串的串列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>los = [<span class="string">'ab'</span>, <span class="string">'cd'</span>, <span class="string">'ef'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(los)</span><br><span class="line">&#123;<span class="string">'c'</span>: <span class="string">'d'</span>, <span class="string">'a'</span>: <span class="string">'b'</span>, <span class="string">'e'</span> :<span class="string">'f'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>一個含有雙字元字串的tuple<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tos = (<span class="string">'ab'</span>, <span class="string">'cd'</span>, <span class="string">'ef'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dict(tos)</span><br><span class="line">&#123;<span class="string">'c'</span>: <span class="string">'d'</span>, <span class="string">'a'</span>: <span class="string">'b'</span>, <span class="string">'e'</span> :<span class="string">'f'</span>&#125;</span><br></pre></td></tr></table></figure></p></li></ol><h4>用[鍵]來添加或變更項目</h4><ul><li><p>用項目的鍵來參考並指派值，就可以將一個項目加到字典</p></li><li><p>若字典裡已經有此鍵，則既有的值就會被換成新的值</p></li><li><p>若鍵是新的，則會與值一起被加到字典裡</p></li><li><p>製作一個字典，且姓為鍵，名為值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons = &#123;</span><br><span class="line"><span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>,</span><br><span class="line"><span class="string">'Cleese'</span>: <span class="string">'John'</span>,</span><br><span class="line"><span class="string">'Idle'</span>: <span class="string">'Eric'</span>,</span><br><span class="line"><span class="string">'Jones'</span>: <span class="string">'Terry'</span>,</span><br><span class="line"><span class="string">'Palin'</span>: <span class="string">'Michael'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;<span class="string">'Cleese'</span>: <span class="string">'John'</span>, <span class="string">'Jones'</span>: <span class="string">'Terry'</span>, <span class="string">'Palin'</span>: <span class="string">'Michael'</span>, <span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>, <span class="string">'Idle'</span>: <span class="string">'Eric'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>少加入一位成員<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons[<span class="string">'Gilliam'</span>] = <span class="string">'Gerry'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;<span class="string">'Cleese'</span>: <span class="string">'John'</span>, <span class="string">'Gilliam'</span>: <span class="string">'Gerry'</span>, <span class="string">'Jones'</span>: <span class="string">'Terry'</span>, <span class="string">'Palin'</span>: <span class="string">'Michael'</span>, <span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>, <span class="string">'Idle'</span>: <span class="string">'Eric'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>但是打錯名字了，藉由使用同一個鍵，去修正<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons[<span class="string">'Gilliam'</span>] = <span class="string">'Terry'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;<span class="string">'Cleese'</span>: <span class="string">'John'</span>, <span class="string">'Gilliam'</span>: <span class="string">'Terry'</span>, <span class="string">'Jones'</span>: <span class="string">'Terry'</span>, <span class="string">'Palin'</span>: <span class="string">'Michael'</span>, <span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>, <span class="string">'Idle'</span>: <span class="string">'Eric'</span>&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>用 <code>update()</code>來合併字典</h4><ul><li><p>使用 <code>update()</code>將一個字典的鍵與值複製到另一個<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons = &#123;</span><br><span class="line"><span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>,</span><br><span class="line"><span class="string">'Cleese'</span>: <span class="string">'John'</span>,</span><br><span class="line"><span class="string">'Gilliam'</span>: <span class="string">'Terry'</span></span><br><span class="line"><span class="string">'Idle'</span>: <span class="string">'Eric'</span>,</span><br><span class="line"><span class="string">'Jones'</span>: <span class="string">'Terry'</span>,</span><br><span class="line"><span class="string">'Palin'</span>: <span class="string">'Michael'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;<span class="string">'Cleese'</span>: <span class="string">'John'</span>, <span class="string">'Gilliam'</span>: <span class="string">'Terry'</span>, <span class="string">'Jones'</span>: <span class="string">'Terry'</span>, <span class="string">'Palin'</span>: <span class="string">'Michael'</span>, <span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>, <span class="string">'Idle'</span>: <span class="string">'Eric'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>others = &#123;<span class="string">'Marx'</span>: <span class="string">'Groucho'</span>, <span class="string">'Howard'</span>: <span class="string">'Moe'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons.update(others)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;<span class="string">'Cleese'</span>: <span class="string">'John'</span>, <span class="string">'Howard'</span>: <span class="string">'Moe'</span>, <span class="string">'Gilliam'</span>: <span class="string">'Terry'</span>, <span class="string">'Jones'</span>: <span class="string">'Terry'</span>, <span class="string">'Palin'</span>: <span class="string">'Michael'</span>, <span class="string">'Marx'</span>: <span class="string">'Groucho'</span>, <span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>, <span class="string">'Idle'</span>: <span class="string">'Eric'</span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>若第二個字典與要合併的字典有相同的鍵時，第二個字典的值會勝出<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>first = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>second = &#123;<span class="string">'b'</span>: <span class="string">'platypus'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>first.update(second)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>first</span><br><span class="line">&#123;<span class="string">'b'</span>: <span class="string">'platpyus'</span>, <span class="string">'a'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>用 <code>del</code>與鍵來刪除項目</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> pythons[<span class="string">'Marx'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;<span class="string">'Cleese'</span>: <span class="string">'John'</span>, <span class="string">'Howard'</span>: <span class="string">'Moe'</span>, <span class="string">'Gilliam'</span>: <span class="string">'Terry'</span>, <span class="string">'Jones'</span>: <span class="string">'Terry'</span>, <span class="string">'Palin'</span>: <span class="string">'Michael'</span>, <span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>, <span class="string">'Idle'</span>: <span class="string">'Eric'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> pythons[<span class="string">'Howard'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;<span class="string">'Cleese'</span>: <span class="string">'John'</span>, <span class="string">'Gilliam'</span>: <span class="string">'Terry'</span>, <span class="string">'Jones'</span>: <span class="string">'Terry'</span>, <span class="string">'Palin'</span>: <span class="string">'Michael'</span>, <span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>, <span class="string">'Idle'</span>: <span class="string">'Eric'</span>&#125;</span><br></pre></td></tr></table></figure></p><h4>用 <code>clear()</code>來刪除所有項目</h4><ul><li>可以使用 <code>clear()</code>或重新指派一個空的字典{}<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons.clear()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h4>用 <code>in</code>來測試鍵</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons = &#123;</span><br><span class="line"><span class="string">'Chapmon'</span>: <span class="string">'Graham'</span>,</span><br><span class="line"><span class="string">'Cleese'</span>: <span class="string">'John'</span>,</span><br><span class="line"><span class="string">'Jones'</span>: <span class="string">'Terry'</span>,</span><br><span class="line"><span class="string">'Palin'</span>: <span class="string">'Michael'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Chapman'</span> <span class="keyword">in</span> pythons</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Palin'</span> <span class="keyword">in</span> pythons</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Gilliam'</span> <span class="keyword">in</span> pythons</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h4>用[鍵]來取得一個項目</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons[<span class="string">'Cleese'</span>]</span><br><span class="line">John</span><br></pre></td></tr></table></figure></p><ul><li><p>若不存在於字典，則會得到例外<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons[<span class="string">'Marx'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"stdin"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'Marx'</span></span><br></pre></td></tr></table></figure></p></li><li><p>避免這件事的兩種方式，一是使用 <code>in</code>測試鍵<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Marx'</span> n pythons</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></p></li><li><p>二是使用特殊的字典函式 <code>get()</code>，要提供字典、鍵、及一個選用的值，若鍵存在，則可以取得他的值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>python.get(<span class="string">'Cleese'</span>)</span><br><span class="line"><span class="string">'John'</span></span><br></pre></td></tr></table></figure></p></li><li><p>若不存在，則會取得選用的值(若有指定的話)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons.get(<span class="string">'Marx'</span>, <span class="string">'Not a python'</span>)</span><br><span class="line"><span class="string">'Not a python'</span></span><br></pre></td></tr></table></figure></p></li><li><p>否則會得到None<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pythons.get(<span class="string">'Marx'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p></li></ul><h4>使用 <code>keys()</code>來取得所有的鍵</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>signals = &#123;</span><br><span class="line"><span class="string">'green'</span>: <span class="string">'go'</span>,</span><br><span class="line"><span class="string">'yellow'</span>: <span class="string">'go faster'</span>,</span><br><span class="line"><span class="string">'red'</span>: <span class="string">'smile for the camera'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>signals.keys()</span><br><span class="line">dict_keys([<span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'yellow'</span>])</span><br></pre></td></tr></table></figure></p><blockquote><p>在Python 2 <code>keys()</code>會回傳一個串列，Python 3 會回傳 <code>dict_keys()</code>，他是可迭代得鍵資料，適合用在大型的字典，不會浪費時間與記憶體來建立及儲存可能用不到的串列，但通常你其實<strong>想要</strong>一個串列在Python 3 ，必須呼叫 <code>list()</code>來將<code>dict_keys()</code>物件轉換成串列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(signals.keys())</span><br><span class="line">[<span class="string">'green'</span>, <span class="string">'red'</span>, <span class="string">'yellow'</span>]</span><br></pre></td></tr></table></figure>在Python 3 ，也需要使用 <code>list()</code>函式來將 <code>values()</code>與 <code>items()</code>的結果轉成一般的Python串列</p></blockquote><h4>用 <code>values()</code>來取得所有的值</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(signals.values())</span><br><span class="line">[<span class="string">'go'</span>, <span class="string">'go faster'</span>, <span class="string">'smile for the camera'</span>]</span><br></pre></td></tr></table></figure></p><h4>用 <code>items()</code>來取得所有的鍵/值對</h4><ul><li>每一個鍵與值都會以tuple的形式回傳<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(signals.items())</span><br><span class="line">[(<span class="string">'green'</span>, <span class="string">'go'</span>), (<span class="string">'red'</span>, <span class="string">'go faster'</span>), (<span class="string">'yellow'</span>, <span class="string">'smile for the camera'</span>)]</span><br></pre></td></tr></table></figure></li></ul><h4>用 <code>=</code>來指派，用 <code>copy()</code>來複製</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>signals = &#123;</span><br><span class="line"><span class="string">'green'</span>: <span class="string">'go'</span>,</span><br><span class="line"><span class="string">'yellow'</span>: <span class="string">'go faster'</span>,</span><br><span class="line"><span class="string">'red'</span>: <span class="string">'smile for the camera'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>save_signals = signals</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>signals[<span class="string">'blue'</span>] = <span class="string">'confuse everyone'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>save_signals</span><br><span class="line">&#123;<span class="string">'blue'</span>: <span class="string">'confuse everyone'</span>, <span class="string">'green'</span>: <span class="string">'go'</span>, <span class="string">'yellow'</span>: <span class="string">'go faster'</span>, <span class="string">'red'</span>: <span class="string">'smile for the camera'</span>&#125;</span><br></pre></td></tr></table></figure></p><ul><li>要將某個字典內的鍵與值複製到其他字典來避免這種情形，使用 <code>copy()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>signals = &#123;</span><br><span class="line"><span class="string">'green'</span>: <span class="string">'go'</span>,</span><br><span class="line"><span class="string">'yellow'</span>: <span class="string">'go faster'</span>,</span><br><span class="line"><span class="string">'red'</span>: <span class="string">'smile for the camera'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_signals = signals.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>signals[<span class="string">'blue'</span>] = <span class="string">'confuse everyone'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>save_signals</span><br><span class="line">&#123;<span class="string">'blue'</span>: <span class="string">'confuse everyone'</span>, <span class="string">'green'</span>: <span class="string">'go'</span>, <span class="string">'yellow'</span>: <span class="string">'go faster'</span>, <span class="string">'red'</span>: <span class="string">'smile for the camera'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>original_signals</span><br><span class="line">&#123;<span class="string">'green'</span>: <span class="string">'go'</span>, <span class="string">'yellow'</span>: <span class="string">'go faster'</span>, <span class="string">'red'</span>: <span class="string">'smile for the camera'</span>&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 字典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 串列、Tuple、字典與集合(二)-Tuple</title>
      <link href="/repository/2019/11/17/python-%E4%B8%B2%E5%88%97%E3%80%81Tuple%E3%80%81%E5%AD%97%E5%85%B8%E8%88%87%E9%9B%86%E5%90%88-%E4%BA%8C-Tuple/"/>
      <url>/repository/2019/11/17/python-%E4%B8%B2%E5%88%97%E3%80%81Tuple%E3%80%81%E5%AD%97%E5%85%B8%E8%88%87%E9%9B%86%E5%90%88-%E4%BA%8C-Tuple/</url>
      
        <content type="html"><![CDATA[<h2>Python 串列與tuple</h2><p>&lt;!--more--&gt;</p><hr><h3>Tuple</h3><ul><li>Tuple與串列很像，都是一系列的任意項目，但與串列不同的事，tuple是<strong>不可變</strong>的，也就是說定義tuple後，就無法添加、刪除，或更改他的項目了，因此tuple很像常數串列</li></ul><h4>用 <code>()</code> 建立Tuple</h4><ul><li><p>先用 <code>()</code>製作一個空的tuple：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_tuple = ()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_tuple</span><br><span class="line">()</span><br></pre></td></tr></table></figure></p></li><li><p>讓tuple有一或多個元素，在每個元素後面加上一個逗號<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>one_marx = <span class="string">'Groucho'</span>,</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>one_marx</span><br><span class="line">(<span class="string">'Groucho'</span>,)</span><br></pre></td></tr></table></figure></p></li><li><p>若有多個元素，請依序列舉，除了最後一個元素之外，都要加上一個逗號<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_table = <span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_table</span><br><span class="line">(<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>)</span><br></pre></td></tr></table></figure></p></li><li><p>Python 在印出tuple時，會加上括號</p></li><li><p>真正定義tuple的是元素後的逗號，但使用括號不會有任何不良的影響，用括號把值包起來，讓tuple看起來更清楚<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_tuple = (<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_tuple</span><br><span class="line">(<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>)</span><br></pre></td></tr></table></figure></p></li><li><p>tuple 可以被一次指派給多個變數</p></li><li><p>有時這稱為<strong>tuple開箱(unpacking)</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_tuple = (<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = marx_tuple</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a </span><br><span class="line"><span class="string">'Groucho'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="string">'Chico'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line"><span class="string">'Harpo'</span></span><br></pre></td></tr></table></figure></p></li><li><p>可以在一個陳述式中，使用tuple來交換值，不需要用到暫時性的變數<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>password = <span class="string">'swordfish'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>icecream = <span class="string">'tuttifrutti'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password, icecream = icecream, password</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>password</span><br><span class="line"><span class="string">'tuttifrutti'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>icecream</span><br><span class="line"><span class="string">'swordfish'</span></span><br></pre></td></tr></table></figure></p></li><li><p><code>tuple()</code>轉換函式可將其他的東西做成tuple<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marx_list = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tuple(marx_list)</span><br><span class="line">(<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>)</span><br></pre></td></tr></table></figure></p></li></ul><hr><h3>Tuple vs 串列</h3><ul><li>Tuple通常可以用來取代串列，但他們的功能比較少，沒有 <code>append()</code>、<code>insert()</code>，為什麼不使用串列來取代所有的tuple就好？</li></ul><ol><li>tuples佔用的空間較少</li><li>不會不小心破壞tuple的項目</li><li>可以將tuple當成字典鍵</li><li>可以將**具名tuple(Named tuple)**當成物件的簡化替代品</li><li>函式引數是以tuple的形式傳入的</li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Tuple </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 串列、Tuple、字典與集合(一)-串列</title>
      <link href="/repository/2019/11/16/python-%E4%B8%B2%E5%88%97%E3%80%81Tuple%E3%80%81%E5%AD%97%E5%85%B8%E8%88%87%E9%9B%86%E5%90%88/"/>
      <url>/repository/2019/11/16/python-%E4%B8%B2%E5%88%97%E3%80%81Tuple%E3%80%81%E5%AD%97%E5%85%B8%E8%88%87%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2>Python 串列與tuple</h2><p>&lt;!--more--&gt;</p><hr><ul><li>Python有兩種序列結構：<strong>tuple</strong> 與 <strong>串列(list)</strong></li><li>他們都有零個或多個元素，與字串不同的是，可以用不同類型的元素</li><li>每一個元素都可以是<strong>任何Python</strong>物件，因此可以任意地創造有深度且複雜的結構</li></ul><h4>Tuple vs 串列</h4><ul><li>Tuple是不可變的，當指派一個元素給tuple後，他就再也不能更改了</li><li>串列是可變的，可以盡情地插入與刪除元素</li></ul><hr><h3>串列</h3><ul><li>串列適合用來追蹤東西的順序，特別是順序與內容可能會改變的時候</li><li>在串列中，同一個值可能會出現一次以上</li></ul><h4>用 [] 或 list() 建立</h4><ul><li>串列由0或多個元素組成的，以逗號分隔<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>empty_list = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>weekdays = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>big_birds = [<span class="string">'emu'</span>, <span class="string">'ostrich'</span>, <span class="string">'cassowary'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>first_names = [<span class="string">'Graham'</span>, <span class="string">'John'</span>, <span class="string">'Terry'</span>, <span class="string">'Michael'</span>]</span><br></pre></td></tr></table></figure></li><li>也可以用 <code>list()</code>函式製作一個空串列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_empty_list = list()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>another_empty_list</span><br><span class="line">[]</span><br></pre></td></tr></table></figure></li></ul><h4>用list()來將其它的資料類型轉換成串列</h4><ul><li><p>example<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(<span class="string">'cat'</span>)</span><br><span class="line">[<span class="string">'c'</span>, <span class="string">'a'</span>, <span class="string">'t'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>範例：將一個 <code>tuple</code>轉換成一個串列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a_tuple = (<span class="string">'ready'</span>, <span class="string">'fire'</span>, <span class="string">'aim'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(a_tuple)</span><br><span class="line">[<span class="string">'ready'</span>, <span class="string">'fire'</span>, <span class="string">'aim'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>用 <code>spilt()</code>來分割<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>birthday = <span class="string">'1/6/1952'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>birthday.split(<span class="string">'/'</span>)</span><br><span class="line">[<span class="string">'1'</span>, <span class="string">'6'</span>, <span class="string">'1952'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>如上，若有連續兩個以上的分隔字串，則會得到一個空字串的串列項目：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitme = <span class="string">'a/b//c/d///e'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitme.split(<span class="string">'/'</span>)</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">''</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'e'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>若改用雙字元分隔字串 //<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitme = <span class="string">'a/b//c/d///e'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>splitme.split(<span class="string">'//'</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="string">'a/b'</span>, <span class="string">'c/d'</span>, <span class="string">'/e'</span>]</span><br></pre></td></tr></table></figure></p></li></ul><h4>使用[位移值]來取得一個項目</h4><ul><li>如同字串，可以藉由指定串列內的某個值的位移值來取出<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[<span class="number">0</span>]</span><br><span class="line"><span class="string">'Groucho'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[<span class="number">1</span>]</span><br><span class="line"><span class="string">'Chico'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[<span class="number">2</span>]</span><br><span class="line"><span class="string">'Harpo'</span></span><br></pre></td></tr></table></figure></li></ul><h4>使用[位移值]來更改一個項目</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[<span class="number">2</span>] = <span class="string">'Wanda'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Wanda'</span>]</span><br></pre></td></tr></table></figure></p><h4>用一個範圍的位移值來以<code>slice</code> 取出項目</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>]</span><br></pre></td></tr></table></figure></p><ul><li>串列的<code>slice</code>仍然是一個串列</li><li>以下有一些範例</li></ul><ol><li>以2的間隔值往右移動<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[::<span class="number">2</span>]</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Harpo'</span>]</span><br></pre></td></tr></table></figure></li><li>以2的間隔值往左移動<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[::<span class="number">-2</span>]</span><br><span class="line">[<span class="string">'Harpo'</span>, <span class="string">'Groucho'</span>]</span><br></pre></td></tr></table></figure></li><li>將串列反過來的技巧<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[::<span class="number">-1</span>]</span><br><span class="line">[<span class="string">'Harpo'</span>, <span class="string">'Chico'</span>, <span class="string">'Groucho'</span>]</span><br></pre></td></tr></table></figure></li></ol><h4>用 <code>append()</code>將項目附加到結尾</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.append(<span class="string">'Zeppo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>]</span><br></pre></td></tr></table></figure></p><h4>用 <code>extend()</code>或 += 來結合串列</h4><ul><li><p>使用 <code>extend()</code>將一個串列合併到另一個串列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>others = [<span class="string">'Gummo'</span>, <span class="string">'Karl'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.extend(others)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>, <span class="string">'Gummo'</span>, <span class="string">'Karl'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>使用 <code>append()</code>，others會被加成一個串列項目，而不是合併裡面的項目<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>others = [<span class="string">'Gummo'</span>, <span class="string">'Karl'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.append(others)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>, [<span class="string">'Gummo'</span>, <span class="string">'Karl'</span>]]</span><br></pre></td></tr></table></figure></p></li></ul><h4>用 <code>insert()</code> 與位移值來加入一個項目</h4><ul><li><code>append()</code>只能將項目加到串列的結尾，當欲將一個項目加到串列任何一個位移值之前時，可以使用<code>insert()</code></li><li>超出串列結尾的位移值就會將項目加至結尾<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.insert(<span class="number">3</span>, <span class="string">'Gummo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Gummo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.insert(<span class="number">10</span>, <span class="string">'Karl'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Gummo'</span>, <span class="string">'Zeppo'</span>, <span class="string">'Karl'</span>]</span><br></pre></td></tr></table></figure></li></ul><h4>用 <code>del</code>與位移值來刪除一個項目</h4><ul><li><p>使用串列位置來刪除一筆項目，他後面的項目會往前遞補到被刪除的項目的位置，且串列長度減一<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> marxes[<span class="number">-1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Gummo'</span>, <span class="string">'Zeppo'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>刪除最後一個marxes串列版本的'Harpo'<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Gummo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[<span class="number">2</span>]</span><br><span class="line"><span class="string">'Harpo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> marxes[<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Gummo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes[<span class="number">2</span>]</span><br><span class="line"><span class="string">'Gummo'</span></span><br></pre></td></tr></table></figure></p></li></ul><blockquote><p>del 是 Python 陳述式，不是串列方法，就是不能說 marxes[-2].del()．他是一種賦值(=)的反向動作：他會將Python物件與名稱分離，而且如果那個名稱是最後一個參考物件的名稱，也會釋出物件的記憶體</p></blockquote><h4>用 <code>remove()</code>與值來刪除項目</h4><ul><li>若是不確定或不在乎某個項目在串列中的哪個位置，使用 <code>remove()</code> 與他的值來刪除它<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Gummo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.remove(<span class="string">'Gummo'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>]</span><br></pre></td></tr></table></figure></li></ul><h4>用 <code>pop()</code>與位移值來取的一個項目，並刪除他</h4><ul><li>如果呼叫 <code>pop()</code>並使用一個位移值，他會回傳該位移值項目，如果未使用引數，他會使用-1</li><li><code>pop(0)</code>會回傳串列的開頭，<code>pop()</code>與 <code>pop(-1)</code>會回傳結尾<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.pop()</span><br><span class="line"><span class="string">'Zeppo'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.pop(<span class="number">1</span>)</span><br><span class="line"><span class="string">'Chico'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes</span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Harpo'</span>]</span><br></pre></td></tr></table></figure></li></ul><h4>用 <code>index()</code> 與值來尋找某個項目的位移值</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.index(<span class="string">'Chico'</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><h4>用 <code>in</code>來測試值</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>, <span class="string">'Zeppo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Groucho'</span> <span class="keyword">in</span> marxes</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Bob'</span> <span class="keyword">in</span> marxes</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>words = [<span class="string">'a'</span>, <span class="string">'deer'</span>, <span class="string">'a'</span>, <span class="string">'female'</span>, <span class="string">'deer'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'deer'</span> <span class="keyword">in</span> words</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p><blockquote><p>若經常檢查串列中某些值是否存在，且不在乎項目的順序，Python <strong>集合</strong> 更適合用來儲存及查看獨一無二的值</p></blockquote><h4>用 <code>count()</code> 來算出某個值的出現次數</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.count(<span class="string">'Harpo'</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.count(<span class="string">'Bob'</span>)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>snl_skit = [<span class="string">'cheeseburger'</span>, <span class="string">'cheeseburger'</span>, <span class="string">'cheeseburger'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>snl_skit.count(<span class="string">'cheeseburger'</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><h4>用 <code>join()</code>來轉換字串</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">', '</span>.join(marxes)</span><br><span class="line"><span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span></span><br></pre></td></tr></table></figure></p><ul><li><code>join()</code>是一種字串方法，不是串列方法，不能使用 <code>marxes.join(, )</code></li><li><code>join()</code>的引數是一個字串，或任何可迭代的字串序列，他輸出是一個字串，如果 <code>join()</code> 只是一個串列方法，你就不能將它用在其他可迭代物件，ex: tuple 或字串</li><li><code>join()</code> 是 <code>split()</code>的相反<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>friends = [<span class="string">'Harry'</span>, <span class="string">'Hermione'</span>, <span class="string">'Ron'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>separator = <span class="string">' * '</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>joined = separator.join(friends)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>joined</span><br><span class="line"><span class="string">'Harry * Hermione * Ron'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>separated = joined.split(separator)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>separated</span><br><span class="line">[<span class="string">'Harry'</span>, <span class="string">'Hermione'</span>, <span class="string">'Ron'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>separated == friends</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h4>用 <code>sort()</code>來排序項目</h4><ul><li><p><code>Python</code> 提供兩種函式：</p><ul><li>串列函式 <code>sort()</code> 會<strong>就地</strong>排序串列本身</li><li>通用函式 <code>sorted()</code>會排序串列，之後回傳<strong>複本</strong></li></ul></li><li><p>如果串列項目是數字，在預設情況下，<code>Python</code>會昇冪排列數字，若是字串，<code>Python</code>會按照字母順序來排列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_marxes = sorted(marxes)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted_marxes</span><br><span class="line">[<span class="string">'Chico'</span>, <span class="string">'Groucho'</span>, <span class="string">'Harpo'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p><code>sorted_marxes</code>是一個複本，建立他並不會改變原本的串列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes </span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br></pre></td></tr></table></figure></p></li><li><p>但對 <code>marxes</code>串列呼叫串列函式 <code>sort()</code>，會改變 <code>marxes</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes </span><br><span class="line">[<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4.0</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers </span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4.0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">4.0</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>numbers </span><br><span class="line">[<span class="number">4.0</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p></li></ul><h4>使用 <code>len()</code>來取得長度</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>marxes = [<span class="string">'Groucho'</span>, <span class="string">'Chico'</span>, <span class="string">'Harpo'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(marxes)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><h4>用 <code>=</code>來指派，用<code>copy()</code>來複製</h4><p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="string">'surprise'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'surprise'</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">'surprise'</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">'surprise'</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">0</span>] = <span class="string">'I hate surprises'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="string">'I hate surprises'</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a </span><br><span class="line">[<span class="string">'I hate surprises'</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><ul><li>可以使用以下方法，將串列的值<strong>複製</strong>到一個獨立、全新的串列：</li></ul><ol><li>串列的 <code>copy()</code> 函式</li><li><code>list()</code>轉換函式</li><li>串列 <code>slice[:]</code></li></ol><ul><li>原始串列仍然是a，用串列 <code>copy()</code>函式來製作b，用 <code>list()</code>轉換函式來製作c，用串列 <code>slice</code>來製作d<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.copy() </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = list(a)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d = a[:]</span><br></pre></td></tr></table></figure></li><li>b, c, d都是a的<strong>複本</strong>：他們都是新的物件，擁有自己的值，且與a所參考的原始串列物件[1, 2, 3]沒有關聯，改變 a<strong>不會</strong>影響b, c, d的複本：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>] = <span class="string">'integer lists are boring'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'integer lists are boring'</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 串列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>What is Kubernetes?</title>
      <link href="/repository/2019/11/11/What-is-Kubernetes/"/>
      <url>/repository/2019/11/11/What-is-Kubernetes/</url>
      
        <content type="html"><![CDATA[<h3>Kubernetes</h3><p>&lt;!--more--&gt;</p><hr><ul><li>容器的全自動管理/調度平台，誕生自Google Borg</li><li>不限制application類型，只要能容器化都吃</li><li>具有各種抽象化的資源類型<ul><li>web/database</li><li>task runner</li><li>auto scaler</li><li>Ingress</li></ul></li></ul><h3>Why is Container</h3><ul><li>一致性的執行環境</li><li>方便的應用部署，有利於CI/CD</li><li>清楚的分離Dev與Ops，有利於分工</li><li>以應用為中心的管理方式</li></ul><h3>Docker</h3><hr><h4>Docker生命週期</h4><ol><li>Code your app</li><li>Write Dockerfile</li><li>Create images. Defined at Dockerfiles</li><li>Define services at writing</li><li>Run containers / Compose app</li><li>Test your app or microservices</li><li>Push or continue developing</li></ol><ul><li>寫好的dockerfile，build 成image後只是存在你build 好的那台機器上面，所以若是要share給別人使用的話，就是要放到第三方的地方，所以image會放在registry的地方<img src="https://docs.microsoft.com/zh-tw/dotnet/architecture/microservices/docker-application-development-process/media/image1.png" class="" width="1000" height="400" title="vi-vim-cheat-sheet"></li></ul><h4>Docker Registry</h4><ul><li>維護方式跟 github 機制有87%像，但只是拿來放docker image</li><li>DockerHub ，目前最大的public registry</li><li>private registry<ul><li>VMware Harbor</li><li>gitlab registry<ul><li>在900之後，有一個內建的registry，gitlab.com上面就有提供一個免費的registry，可以build 自己的code，丟到gitlab registry</li></ul></li><li>Cloud: AWS/GCP/Azure...</li></ul></li></ul><h3>Kubernetes 資源介紹</h3><hr><h4>Kubernetes Nodes</h4><ul><li>Node (就是實體機，分成以下兩個)<ol><li>Worker Node<ul><li>負責 Resource 的執行</li><li>監控 Resource 的健康狀態</li></ul></li><li>Master Node<ul><li>管理與監控 Node</li><li>負責調度所有的 Resource</li><li>儲存整個 Cluster 的運作狀態</li></ul></li></ol></li><li>架設方式<ul><li>自架：minikube/kubeadm/Rancher 2.x(不建議自己架，因為會有很多雷)</li><li>直接用 Cloud AWS/GCP/Azure/DigitalOcean</li></ul></li></ul><h4>Kubernetes 抽象資源</h4><ol><li>Namespace</li></ol><ul><li>一組資源的集合</li><li>隔離不同 namespace 之間的資源 (persistant volume除外)</li><li>預設有 kube-system/kube-public/default<img src="http://www.mundodocker.com.br/wp-content/uploads/2017/06/namespaces.png" class="" width="600" height="300" title="vi-vim-cheat-sheet"></li></ul><ol start="2"><li>Pod</li></ol><ul><li>Kubernetes中最小執行單位</li><li>一個完整的 application 部署封裝，可能有一個以上的container</li><li>共享儲存空間/網路<img src="http://i0.wp.com/foxutech.com/wp-content/uploads/2018/02/Kubernetes-Pod.jpg" class="" width="800" height="300" title="vi-vim-cheat-sheet"></li></ul><ol start="3"><li>ReplicaSet</li></ol><ul><li>保證Pod數量跟設定中要求的一樣ex: 譬如今天保證要有3台在運作，那麼就可以把replica設成3，假設今天把一台pod刪掉，那麼他今天就會再幫你生一台新的出來，那如果有多的話，就會把最舊的那台砍掉</li><li>少了就補齊，多了就砍掉，絕對不多不少</li><li>支援動態縮放<img src="https://prod-edxapp.edx-cdn.org/assets/courseware/v1/bfc5b38f02fcd9cd9c290750ecbc70a1/asset-v1:LinuxFoundationX+LFS158x+2T2017+type@asset+block/replicaset-1.png" class="" width="500" height="300" title="vi-vim-cheat-sheet"></li></ul><ol start="4"><li>Deployment</li></ol><ul><li><p>管理 Pod 與 ReplicaSet</p></li><li><p>聲明式更新</p></li><li><p>支援Rolling Update</p></li><li><p><strong>Rolling Update</strong></p></li><li><p>此image版本為1.0，若此時想換成2.0時<img src="https://codelabs.developers.google.com/codelabs/k8s-kickstart/img/6a62a850f2be0c9b.png" class="" width="600" height="400" title="vi-vim-cheat-sheet"></p></li><li><p>此時deployment會去開一個新的replicaSet，這個replicaSet會去開一個新的Pod，而這個Pod會去用2.0的image，此時2.0開了新的一台，而就的那邊就會關掉一台，且不會斷掉，以此類推，最後就會把舊的1.0的都關掉，變成2.0的Pod(先開新的，確定能夠使用，才把1.0關掉)<img src="https://codelabs.developers.google.com/codelabs/k8s-kickstart/img/8d107e36763fd5c1.png" class="" width="800" height="400" title="vi-vim-cheat-sheet"></p></li></ul><ol start="5"><li>Job (與deployment不同的是，deployment是提供一個持續性的服務，不會斷掉)</li></ol><ul><li>啟動Pod並且執行指定次數 (譬如像是migration，就是在上版的那一次要跑而已，run完即結束)</li><li>Pod 如果執行錯誤，會重新開啟直到完成(重新開啟的次數是可以設定的)</li></ul><ol start="6"><li>Services</li></ol><ul><li>用來存取Pod的資源(因為Pod 不會讓外面的Cluster直接存取到，所以中間會經過Services)</li><li>可透過 Kubernetes內部的 DNS來對應</li><li>有提供各種的 Service Types：<ul><li>ClusterIP</li><li>Node Port</li><li>LoadBalancer</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Environment </category>
          
          <category> Kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 PHPUnit + Mockery 開發 API</title>
      <link href="/repository/2019/11/03/%E5%88%A9%E7%94%A8-PHPUnit-Mockery-%E9%96%8B%E7%99%BC-API/"/>
      <url>/repository/2019/11/03/%E5%88%A9%E7%94%A8-PHPUnit-Mockery-%E9%96%8B%E7%99%BC-API/</url>
      
        <content type="html"><![CDATA[<h2>Mockery</h2><p>&lt;!---more--&gt;</p><hr><h3>先建立一個服務</h3><ul><li>先於 <code>app</code>底下建立一個 <code>Services</code>資料夾</li></ul><h3>建立測試資料</h3><ul><li>於 <code>Tests\Unit</code> 底下建立一個 <code>Services</code>資料夾，在建立一個 <code>ClientTest.php</code>的檔案</li><li>建立一個 <code>test_query()</code>的function</li><li>function 內建立連線且設定需送出與回傳的值<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$guzzleClient-&gt;shouldReceive(<span class="string">'request'</span>)-&gt;andReturn(</span><br><span class="line">        <span class="keyword">new</span> Response(<span class="number">200</span>, [], file_get_contents(<span class="keyword">__DIR__</span>.<span class="string">'/result.txt'</span>))</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">$client = <span class="keyword">new</span> Client($guzzleClient, $log, $key);</span><br></pre></td></tr></table></figure></li><li>確認建立連線後，檢視所需得到的資料格式，在建立 <code>ClientTest.php</code>的檔案同層建立 <code>result.txt</code>假資料</li><li>而後於檔案上方引入，並使用<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Mockery</span> <span class="title">as</span> <span class="title">m</span>;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$guzzleClient = m::mock(GuzzleClient::class);</span><br></pre></td></tr></table></figure></li><li>最後放入測試資料的格式驗證<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;assertArraySubset([</span><br><span class="line">    <span class="string">'price'</span> =&gt; <span class="number">9165.74788036</span>,</span><br><span class="line">    <span class="string">'volume_24h'</span> =&gt; <span class="number">15782991288.054</span>,</span><br><span class="line">    <span class="string">'percent_change_1h'</span> =&gt; <span class="number">-0.537992</span>,</span><br><span class="line">    <span class="string">'percent_change_24h'</span> =&gt; <span class="number">-1.19578</span>,</span><br><span class="line">    <span class="string">'percent_change_7d'</span> =&gt; <span class="number">16.4927</span>,</span><br><span class="line">    <span class="string">'market_cap'</span> =&gt; <span class="number">162835578819.6922</span>,</span><br><span class="line">    <span class="string">'last_updated'</span> =&gt; <span class="string">'2019-06-18T12:14:22.000Z'</span>,</span><br><span class="line">], $client-&gt;query(<span class="string">'btC'</span>));</span><br></pre></td></tr></table></figure></li></ul><h3>回到服務資料夾內建立連線檔案</h3><ul><li>建立連線的 <code>Client</code> 檔案，使用GuzzleHttp連線，並於建構子中依賴注入</li><li>建立 <code>query()</code>透過key去發出 <code>request</code> ，並將取回的資料進行 <code>json_decode()</code>，於最後透過laravel collection的方法，filter 出符合的值<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(GuzzleClient $client)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;client = $client;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">($symbol = <span class="string">'BTC'</span>)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line">    $response = $this-&gt;client-&gt;request('GET','https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest', [</span><br><span class="line">        <span class="string">'headers'</span> =&gt; [</span><br><span class="line">            <span class="string">'X-CMC_PRO_API_KEY'</span> =&gt; <span class="string">'xxxxxxx'</span>,</span><br><span class="line">        ],</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    $results = json_decode($response-&gt;getBody()-&gt;getContents(), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Arr::get(collect($results[<span class="string">'data'</span>])-&gt;filter(<span class="function"><span class="keyword">function</span> <span class="params">($item)</span> <span class="title">use</span> <span class="params">($symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> $item[<span class="string">'symbol'</span>] === trim(strtoupper($symbol));</span><br><span class="line">    &#125;)-&gt;first(), <span class="string">'quote.USD'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3>想要紀錄呼叫api次數</h3><ul><li><p>由於紀錄log是呼出去，因此需使用 <code>spy</code>去監測紀錄</p></li><li><p>於服務資料夾下建立 <code>Log.php</code>檔案，並建立 <code>info()</code>function<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">info</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>在測試檔案中加上log , 也於連線方法上引入<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$log = m::spy(Log::class);</span><br><span class="line">$client = <span class="keyword">new</span> Client($guzzleClient, $log);</span><br></pre></td></tr></table></figure></p></li><li><p>需在驗證連線上加上 <code>once()</code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$guzzleClient-&gt;shouldReceive(<span class="string">'request'</span>)-&gt;andReturn(</span><br><span class="line">    <span class="keyword">new</span> Response(<span class="number">200</span>, [], file_get_contents(<span class="keyword">__DIR__</span>.<span class="string">'/result.txt'</span>))</span><br><span class="line">)-&gt;once();</span><br></pre></td></tr></table></figure></p></li><li><p>於測試程式最後加上<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$log-&gt;shouldHaveReceived(<span class="string">'info'</span>)-&gt;with(<span class="string">'xxxxxxxx'</span>)-&gt;once();</span><br></pre></td></tr></table></figure></p></li><li><p>最後需在此方法之上加入 <code>teardown()</code> function</p></li><li><p>此意思是代表 在每個測試後執行，另外也可以只在整個測試類別執行一次的<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">tearDown</span><span class="params">()</span>:<span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">parent</span>::tearDown();</span><br><span class="line">    m::close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>最後在連線的建構子上加上<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(GuzzleClient $client, Log $log)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;client = $client;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;log = $log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>query()加上<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;log-&gt;info(<span class="string">'xxxxxxxx'</span>);</span><br></pre></td></tr></table></figure></p></li></ul><h3>加上環境檔的key，使用依賴注入</h3><ul><li><p>於 <code>Providers</code>資料夾內的 <code>AppServiceProvider</code>加上<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;app-&gt;singleton(Client::class, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Client(<span class="keyword">new</span> GuzzleClient, <span class="keyword">new</span> Log(), env(<span class="string">'CMC_API_KEY'</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>連線檔案的建構子加上key依賴注入<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(GuzzleClient $client, Log $log, $key = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;client = $client;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;log = $log;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;key = $key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>query()內也更改key的引入<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;log-&gt;info(<span class="keyword">$this</span>-&gt;key);</span><br><span class="line"></span><br><span class="line">$response = <span class="keyword">$this</span>-&gt;client-&gt;request(<span class="string">'GET'</span>,<span class="string">'https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest'</span>, [</span><br><span class="line">    <span class="string">'headers'</span> =&gt; [</span><br><span class="line">        <span class="string">'X-CMC_PRO_API_KEY'</span> =&gt; <span class="keyword">$this</span>-&gt;key,</span><br><span class="line">    ],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p></li><li><p>測試檔案key的更改<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_query</span><span class="params">()</span> //<span class="title">this</span> <span class="title">test</span> <span class="title">failed</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $key = <span class="string">'xxx'</span>;</span><br><span class="line">    $guzzleClient = m::mock(GuzzleClient::class);</span><br><span class="line">    $guzzleClient-&gt;shouldReceive(<span class="string">'request'</span>)-&gt;andReturn(</span><br><span class="line">        <span class="keyword">new</span> Response(<span class="number">200</span>, [], file_get_contents(<span class="keyword">__DIR__</span>.<span class="string">'/result.txt'</span>))</span><br><span class="line">    )-&gt;once();</span><br><span class="line"></span><br><span class="line">    $log = m::spy(Log::class);</span><br><span class="line">    $client = <span class="keyword">new</span> Client($guzzleClient, $log, $key); </span><br><span class="line">    <span class="comment">// assertions</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;assertArraySubset([</span><br><span class="line">        <span class="string">'price'</span> =&gt; <span class="number">9165.74788036</span>,</span><br><span class="line">        <span class="string">'volume_24h'</span> =&gt; <span class="number">15782991288.054</span>,</span><br><span class="line">        <span class="string">'percent_change_1h'</span> =&gt; <span class="number">-0.537992</span>,</span><br><span class="line">        <span class="string">'percent_change_24h'</span> =&gt; <span class="number">-1.19578</span>,</span><br><span class="line">        <span class="string">'percent_change_7d'</span> =&gt; <span class="number">16.4927</span>,</span><br><span class="line">        <span class="string">'market_cap'</span> =&gt; <span class="number">162835578819.6922</span>,</span><br><span class="line">        <span class="string">'last_updated'</span> =&gt; <span class="string">'2019-06-18T12:14:22.000Z'</span>,</span><br><span class="line">    ], $client-&gt;query(<span class="string">'btC'</span>)); </span><br><span class="line"></span><br><span class="line">    $log-&gt;shouldHaveReceived(<span class="string">'info'</span>)-&gt;with($key)-&gt;once();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>為何要使用測試</h3><ul><li>寫測試不是為了驗證結果，而是為了驗證過程</li><li>要用什麼測試，假資料或是等等等，須自行摸索</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> phpunit </tag>
            
            <tag> mockery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 良好習慣- 資料庫</title>
      <link href="/repository/2019/11/03/PHP-%E8%89%AF%E5%A5%BD%E7%BF%92%E6%85%A3-%E8%B3%87%E6%96%99%E5%BA%AB/"/>
      <url>/repository/2019/11/03/PHP-%E8%89%AF%E5%A5%BD%E7%BF%92%E6%85%A3-%E8%B3%87%E6%96%99%E5%BA%AB/</url>
      
        <content type="html"><![CDATA[<h2>Database</h2><p>&lt;!--more--&gt;</p><hr><h3>PDO 擴充</h3><ul><li><p>PHP 提供了原生的PDO擴充，PDO(PHP data objects)是一組PHP類別，可以用單一使用者介面和許多不同的SQL資料庫溝通，讓資料庫的實作方式被抽象化出來，無論使用哪種資料庫系統，都可以用單一的介面撰寫和執行資料庫查詢</p></li><li><p>PDO 建構子<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">$pdo = <span class="keyword">new</span> PDO(</span><br><span class="line"><span class="string">'mysql:host=127.0.0.1;dbname=books;port=3306;charset=utf8'</span>,</span><br><span class="line"><span class="string">'USERNAME'</span>,</span><br><span class="line"><span class="string">'PASSWORD'</span></span><br><span class="line">);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line"><span class="comment">// 資料庫連線失敗</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Database connection failed"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 良好習慣- 消毒、驗證和逃脫</title>
      <link href="/repository/2019/11/03/PHP-%E8%89%AF%E5%A5%BD%E7%BF%92%E6%85%A3-%E6%B6%88%E6%AF%92%E3%80%81%E9%A9%97%E8%AD%89%E5%92%8C%E9%80%83%E8%84%AB/"/>
      <url>/repository/2019/11/03/PHP-%E8%89%AF%E5%A5%BD%E7%BF%92%E6%85%A3-%E6%B6%88%E6%AF%92%E3%80%81%E9%A9%97%E8%AD%89%E5%92%8C%E9%80%83%E8%84%AB/</url>
      
        <content type="html"><![CDATA[<h2>消毒</h2><p>&lt;!--more--&gt;</p><hr><h3>別相信任何人</h3><ul><li>$_GET</li><li>$_POST</li><li>$_REQUEST</li><li>$_COOKIE</li><li>$argv</li><li>php://stdin</li><li>php://input</li><li>file_get_contents()</li><li>遠端資料庫</li><li>遠端API</li><li>來自客戶端的資料</li></ul><p>suggestions: <strong>消毒</strong>使用者輸入, <strong>驗證</strong>資料, <strong>逃脫</strong>使用者輸出</p><h3>消毒使用者輸入</h3><ul><li>消除不安全的字元，在資料到達應用程式存儲層<strong>之前</strong>就消毒</li><li>假設你的網頁允許用HTML下評論，原始設定中，沒有任何東西會阻止使用者在評論中使用不合理的 <code>&lt;script&gt;</code>標籤</li><li>會遭遇到以下幾種類別的輸入資料：HTML、SQL查詢、使用者個人資料</li></ul><h4>HTML</h4><ul><li>利用 <code>htmlentities()</code>函式，將HTML的特殊字元消毒成對應的HTML代表字元</li></ul><h4>SQL查詢</h4><ul><li>有些情況會以使用者輸入的資料來建立SQL查詢，有時這些資料由HTTP請求的查詢字串而來(例如 <code>?user = 1</code>)，有時由HTTP請求的URI片段而來(ex: <code>/user/1</code>)</li></ul><h4>使用個人資料</h4><ul><li>PHP提供 <code>filter_var()</code>和 <code>filter_input()</code>函式</li><li>這兩個函式接受不同的旗標來消毒不同形式的使用者輸入：電子郵件、URL編碼字串、整數、浮點數、HTML字元、URL和指定的ASCII字元範圍</li></ul><h3>驗證資料</h3><ul><li>驗證與消毒不同，驗證並沒有把輸入資料中的資訊去除，驗證只有確認輸入資料有達到你的預期，如果你預期一個電子郵件位址，確認這個輸入資料真的是個電子郵件位址</li></ul><h3>逃脫使用者輸出</h3><ul><li>當要把資料輸出到網頁或是API回應時，逃脫你的輸出是重要的，這讓應用程式多增加了一層防護，防止惡意程式被輸出或是被使用者執行</li></ul><h3>密碼雜湊API</h3><ul><li>使用者註冊腳本<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 驗證電子郵件</span></span><br><span class="line">$email = filter_input(INPUT_POST, <span class="string">'email'</span>, FILTER_VALIDATE_EMAIL);</span><br><span class="line"><span class="keyword">if</span> (! $email) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Invalid email'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 驗證密碼</span></span><br><span class="line">$password = filter_input(INPUT_POST, <span class="string">'password'</span>);</span><br><span class="line"><span class="keyword">if</span> (! $password || mb_strlen($password) &lt; <span class="number">8</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Password must contain 8+ characters'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立密碼雜湊值</span></span><br><span class="line">$passwordHash = password_hash(</span><br><span class="line">$password,</span><br><span class="line">PASSWORD_DEFAULT,</span><br><span class="line">[<span class="string">'cost'</span> =&gt; <span class="number">12</span>]</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span> ($passwordHash === <span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'Password hash failed'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立使用者帳戶（這是虛擬碼）</span></span><br><span class="line">$user = <span class="keyword">new</span> User();</span><br><span class="line">$user-&gt;email = $email;</span><br><span class="line">$user-&gt;password_hash = $passwordHash;</span><br><span class="line">$user-&gt;save();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新導向到登入頁面</span></span><br><span class="line">header(<span class="string">'HTTP/1.1 302 Bad Redirect'</span>);</span><br><span class="line">header(<span class="string">'Location: /login.php'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">Exception</span> $e) &#123;</span><br><span class="line"><span class="comment">// 回報錯誤</span></span><br><span class="line">header(<span class="string">'HTTP/1.1 400 Bad request'</span>);</span><br><span class="line"><span class="keyword">echo</span> $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 特點- 閉包</title>
      <link href="/repository/2019/11/03/PHP-%E7%89%B9%E9%BB%9E-%E9%96%89%E5%8C%85/"/>
      <url>/repository/2019/11/03/PHP-%E7%89%B9%E9%BB%9E-%E9%96%89%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2>閉包</h2><p>&lt;!--more--&gt;</p><hr><ul><li>閉包是在創造時就封裝了內部狀態的函式，即使原有的環境已經消失了這個被封裝的狀態會中被寶存在閉包中</li><li>Example <code>array_map</code>閉包<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$numbersPlusOne = array_map(<span class="function"><span class="keyword">function</span> <span class="params">($number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> $number + <span class="number">1</span>;</span><br><span class="line">&#125;, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">print_r($numbersPlusOne);</span><br><span class="line"><span class="comment">//輸出 --&gt; [2,3,4]</span></span><br></pre></td></tr></table></figure></li><li>PHP閉包是一種物件，每一閉包實體都有其內部狀態，就跟其他PHP物件一樣可以用 <code>$this</code> 關鍵字存取</li></ul><h4>繫結狀態</h4><ul><li>Example 利用 <code>use</code>關鍵字繫結狀態到閉包<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enclosePerson</span><span class="params">($name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($doCommand)</span> <span class="title">use</span> <span class="params">($name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sprintf(<span class="string">'%s, %s'</span>, $name, $doCommand);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將"Clay"關閉在閉包中</span></span><br><span class="line">$clay = enclosePerson(<span class="string">'Clay'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指令呼叫閉包</span></span><br><span class="line"><span class="keyword">echo</span> $clay(<span class="string">'get me sweet tea!'</span>);</span><br><span class="line"><span class="comment">// 輸出 --&gt; "Clay, get me sweet tea!"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> closure </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 特點- 特徵機制</title>
      <link href="/repository/2019/11/03/PHP-%E7%89%B9%E9%BB%9E-%E7%89%B9%E5%BE%B5%E6%A9%9F%E5%88%B6/"/>
      <url>/repository/2019/11/03/PHP-%E7%89%B9%E9%BB%9E-%E7%89%B9%E5%BE%B5%E6%A9%9F%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2>特徵機制 Traits</h2><p>&lt;!--more--&gt;</p><hr><ul><li>一個特徵機制是一個局部的類別實作（像是常數、屬性和方法），他可以被<strong>混入</strong>一個以上的現存PHP類別，特徵機制有雙重用途：他用來形容一個類別可以做什麼（如同介面），她也提供一個模組化的實作（如同類別）</li></ul><h4>為何使用特徵機制</h4><p>PHP會使用類別繼承模式，但倘若想要兩個不相關的PHP類別有相似的行為呢？特徵機制就是讓模組化實作方式可以被插入到不相關的類別中，同樣促使程式碼重用</p><h4>舉例兩個不相關的類別需使用同樣程式碼</h4><ul><li>一個PHP類別 <code>RetailStore</code>和另一個PHP類別Car是相差很大的類別，並且在繼承階層中沒有共享相同的母類別，但兩個類別都應當可以被地理編碼成經緯度以顯示在地圖上</li></ul><ol><li><p>第一個解法（不良的）建立一個共同的副類別 <code>Geocodable</code>同時讓 <code>RetailStore</code> 和 <code>Car</code>繼承，不良的方式是因為他強迫兩個不相關的類別共享相同的祖先，但這並不是原生屬於它們的繼承階層</p></li><li><p>第二個解法（較好的）建立一個 <code>Geocodable</code>介面定義了地理編碼所需要的行為方法，而 <code>RetailStore</code>和 <code>Car</code>類別可以同時實作 <code>Geocodable</code>介面，這是個好方法，因為允許每個類別保有原本的繼承階層，但是這需要我們在每個類別中重複撰寫相同的地理編碼行為，這並不是 DRY 原則的解法</p></li></ol><blockquote><p>DRY 是 <code>Do not repeat youself</code>，他被認為是個良好習慣，不要再多個位置重複相同的程式碼，應當不需要因為改變一處的程式碼而改變另一處</p></blockquote><ol start="3"><li>第三個解法（最好的）建立一個 <code>Geocodable</code>特徵機制定義<strong>並且</strong>時做了地理編碼的行為，可以在 <code>RetailStore</code>和 <code>Car</code>類別中都混入 <code>Geocodable</code>特徵機制，而沒有污染原先的繼承階層架構</li></ol><h3>如何建立一個特徵機制</h3><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> MyTrait &#123;</span><br><span class="line"><span class="comment">//此處是特徵機制實作內容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>Geocodable</code>特徵機制定義<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">trait</span> Geocodable &#123;</span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> string */</span></span><br><span class="line"><span class="keyword">protected</span> $address;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> \Geocoder\Geocoder */</span></span><br><span class="line"><span class="keyword">protected</span> $geocoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@var</span> \Geocoder\Result\Geocoded */</span></span><br><span class="line"><span class="keyword">protected</span> $geocoderResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setGeocoder</span><span class="params">(\Geocoder\GeocoderInterface $geocoder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;geocoder = $geocoder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAddress</span><span class="params">($address)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;address = $address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLatitude</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;geocoderResult) === <span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;geocoderAddress();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;geocoderResult-&gt;getLatitude();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLongitude</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;geocoderResult) === <span class="keyword">false</span>) &#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;geocoderAddress();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;geocoderResult-&gt;getLongitude();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">geocoderAddress</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;geocoderResult = <span class="keyword">$this</span>-&gt;geocoder-&gt;geocode(<span class="keyword">$this</span>-&gt;address);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Traits </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 特點- 名稱空間&amp;介面</title>
      <link href="/repository/2019/11/03/PHP-%E7%89%B9%E9%BB%9E-%E5%90%8D%E7%A8%B1%E7%A9%BA%E9%96%93-%E4%BB%8B%E9%9D%A2/"/>
      <url>/repository/2019/11/03/PHP-%E7%89%B9%E9%BB%9E-%E5%90%8D%E7%A8%B1%E7%A9%BA%E9%96%93-%E4%BB%8B%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h2>名稱空間 Namespaces</h2><p>&lt;!--more--&gt;</p><hr><ul><li>現代PHP特點之一</li><li>創造出程式碼並獨立運作於其他開發者的程式</li><li>缺乏Namespace，若發生名稱的重複會導致PHP運作失敗</li></ul><h2>程式碼作為介面</h2><ul><li>介面是一個介於兩個PHP物件之間的合約，讓一個物件了解另一個物件<strong>可以做什麼</strong>，而非另一個物件<strong>是什麼</strong></li><li>Example:一個PHP類別為 <code>DocumentStore</code> ，他用來搜集來自不同來源的文字<strong>DocumentStore類別定義</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DocumentStore</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addDocument</span><span class="params">(Documentable $document)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$key = $document-&gt;getId();</span><br><span class="line">$value = $document-&gt;getContent();</span><br><span class="line"><span class="keyword">$this</span>-&gt;data[$key] = $value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDocuments</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>如果addDocument()方法只接受 <code>Documentable</code> 類別的實例，那這段程式碼要如何運作？但 <code>Documentable</code> 並不是一個類別而是一個介面，如下：<strong>Documentable介面定義</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Documentable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>這個介面定義說明了任何實作 <code>Documentable</code> 介面的物件都必須提供一個公開(public)的 <code>getId()</code> 方法和一個公開(public)的 <code>getContent()</code> 方法</li></ul><ol><li>以下示範一個<strong>從遠端URL用curl擷取HTML的實作方式</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTMLDocument</span> <span class="keyword">implements</span> <span class="title">Documentable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $url;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;url = $url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$ch = curl_init();</span><br><span class="line">curl_setopt($ch, CURLOPT_URL, <span class="keyword">$this</span>-&gt;url);</span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, <span class="number">3</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_FOLLOWLOCATION, <span class="number">1</span>);</span><br><span class="line">curl_setopt($ch, CURLOPT_MAXREDIRS, <span class="number">3</span>);</span><br><span class="line">$html = curl_exec($ch);</span><br><span class="line">curl_close($ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>擷取終端機指令的結果<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandOutputDocument</span> <span class="keyword">implements</span> <span class="title">Documentable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">protected</span> $command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($command)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;command = $command;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getId</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;command;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> shell_exec(<span class="keyword">$this</span>-&gt;command);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以下示範如何用 <code>DocumentStore</code> 類別配合上述文件收集實作方式<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$documentStore = <span class="keyword">new</span> DocumentStore;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入HTML文件</span></span><br><span class="line">$htmlDoc = <span class="keyword">new</span> HTMLDocument(<span class="string">'http://php.net'</span>);</span><br><span class="line">$documentStore-&gt;addDocument($htmlDoc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入終端機指令文件</span></span><br><span class="line">$cmdDoc = <span class="keyword">new</span> CommandOutputDocument(<span class="string">'cat /etc/hosts'</span>);</span><br><span class="line">$documentStore-&gt;addDocument($cmdDoc);</span><br><span class="line"></span><br><span class="line">print_r($documentStore-&gt;getDocuments());</span><br></pre></td></tr></table></figure></li></ol><ul><li>介面創造了更多彈性的程式碼，讓其他人可以專注在實作的細節考量上．</li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Interface </tag>
            
            <tag> PHP </tag>
            
            <tag> Namespaces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eloquent</title>
      <link href="/repository/2019/10/27/Eloquent/"/>
      <url>/repository/2019/10/27/Eloquent/</url>
      
        <content type="html"><![CDATA[<h2>What is Eloquent?</h2><p>&lt;!-- more --&gt;</p><hr><ul><li>Eloquent是一個ORM，Object Relational Mapping，翻譯為“對象關係映射”。</li><li>所謂“對象”，就是“模型(Model)”</li><li>對象關係映射，即為模型間關係。</li></ul><h2>一對一關係</h2><ul><li><p>這描述的是兩個模型之間一對一的關係。</p></li><li><p>假如我們有兩個模型：User 和Account，分別對應user和消費者，他們是一對一的關係，那麼如果我們要使用Eloquent 提供的一對一關係方法，表格結構應該是這樣的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user: id ... ... account_id</span><br><span class="line"></span><br><span class="line">account: id ... ... user_id</span><br></pre></td></tr></table></figure></p></li><li><p>假設我們需要在User模型中查詢對應的Account表的信息，那麼應該是這樣的。</p></li><li><p><code>/app/models/User.php</code>:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Eloquent</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $table = <span class="string">'users'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasOneAccount</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(<span class="string">'Account'</span>, <span class="string">'user_id'</span>, <span class="string">'id'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>當我們需要用到這種關係的時候<code>$account = User::find(10)-&gt;hasOneAccount;</code></p></li><li><p>此時得到的<code>$account</code> 即為<code>Account</code> 類的一個實例。</p></li><li><p>這裡最難的地方在於後面的兩個foreign_key 和local_key 的設置，</p></li><li><p>在User 類中，無論hasOne 誰，第二個參數都是<code>user_id</code>，第三個參數一般都是<code>id</code>。由於前面的<code>find(10)</code> 已經鎖定了id = 10，所以這段函數對應的SQL 為： <code>select * from account where user_id=10</code>。</p></li><li><p>使用Eloquent 時候的建議：</p><ol><li>每一個Model 中都指定表名</li><li>has one account 這樣的關係寫成<code>hasOneAccount()</code> 而不是簡單的<code>account()</code></li><li>每次使用模型間關係的時候都寫全參數，不要省略</li></ol></li></ul><h4>belongsTo()</h4><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> <span class="keyword">extends</span> <span class="title">Eloquent</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $table = <span class="string">'accounts'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">belongsToUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'User'</span>, <span class="string">'user_id'</span>, <span class="string">'id'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>一對多關係</h3><ul><li>我們引入一個新的Model：Pay，付款記錄。表結構應該是這樣的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user: id ... ...</span><br><span class="line"></span><br><span class="line">pay: id ... ... user_id</span><br></pre></td></tr></table></figure></li><li>User 和Pay 具有一對多關係，換句話說就是一個User 可以有多個Pay，這樣的話，只在Pay 表中存在一個<code>user_id</code> 字段即可。</li><li><code>/app/models/User.php</code>:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Eloquent</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $table = <span class="string">'users'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasManyPays</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'Pay'</span>, <span class="string">'user_id'</span>, <span class="string">'id'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>需要用到這種關係的時候<code>$accounts = User::find(10)-&gt;hasManyPays()-&gt;get();</code></li><li>此時得到的<code>$accounts</code> 即為<code>Illuminate\Database\Eloquent\Collection</code> 類的一個實例。</li><li>這裡不是簡單的<code>-&gt; hasOneAccount</code> 而是<code>-&gt;hasManyPays()-&gt;get()</code>，因為這裡是<code>hasMany</code>，操作的是一個對象集合。</li></ul><h4>相應的belongsTo() 的用法跟上面一對一關係一樣：</h4><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pay</span> <span class="keyword">extends</span> <span class="title">Eloquent</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $table = <span class="string">'pays'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">belongsToUser</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(<span class="string">'User'</span>, <span class="string">'user_id'</span>, <span class="string">'id'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3>多對多關係</h3><ul><li><p>多對多關係和之前的關係完全不一樣，因為多對多關係可能出現很多冗餘數據，用之前自帶的表存不下了。</p></li><li><p>我們定義兩個模型：Article 和Tag，分別表示文章和標籤，他們是多對多的關係。表格結構應該是這樣的：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">article: id ... ...</span><br><span class="line"></span><br><span class="line">tag: id ... ...</span><br><span class="line"></span><br><span class="line">article_tag: article_id tag_id</span><br></pre></td></tr></table></figure></p></li><li><p>在Model 中使用：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span> <span class="keyword">extends</span> <span class="title">Eloquent</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> $table = <span class="string">'tags'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">belongsToManyArticle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(<span class="string">'Article'</span>, <span class="string">'article_tag'</span>, <span class="string">'tag_id'</span>, <span class="string">'article_id'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>需要注意的是，第三個參數是本類的id，第四個參數是第一個參數那個類的id。</p></li><li><p>使用跟hasMany 一樣：<code>$tagsWithArticles = Tag::take(10)-&gt;get()-&gt;belongsToManyArticle()-&gt;get();</code></p></li><li><p>這裡會得到一個非常複雜的對象，可以自行<code>var_dump()</code>。跟大家說一個訣竅，<code>var_dump()</code> 以後，用Chrome 右鍵“查看原始代碼”，就可以看到非常整齊的對象/數組展開了。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parent_video</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(<span class="keyword">$this</span>, <span class="string">'video_hierarchy'</span>, <span class="string">'video_id'</span>, <span class="string">'video_parent_id'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">children_video</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(<span class="keyword">$this</span>, <span class="string">'video_hierarchy'</span>, <span class="string">'video_parent_id'</span>, <span class="string">'video_id'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>可以belongsToMany 自己</p></li></ul><h4>其他關係</h4><ul><li>Eloquent 還提供“遠層一對多關聯”、“多態關聯” 和“多態的多對多關聯” 這另外三種用法，經過上面的學習，我們已經掌握了Eloquent 模型間關係的基本概念和使用方法，剩下的幾種不常用的方法就留到我們用到的時候再自己探索吧。</li></ul><h3>重要技巧：關係預載入</h3><ul><li>在一對一關係中，需要一次性查詢出10個User並帶上對應的Account的話，需要給數據庫打1 + 10條SQL，這樣性能是很差的。<code>$users = User::with('hasOneAccount')-&gt;take(10)-&gt;get()</code></li><li>這樣生成的SQL 就是這個樣子的：<code>select * from account where id in (1, 2, 3, ... ...)</code></li><li>這樣1 + 10 條SQL 就變成了1 + 1 條，性能大增。</li></ul>]]></content>
      
      
      <categories>
          
          <category> DataBase </category>
          
          <category> Other </category>
          
          <category> Eloquent </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eloquent </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Operators</title>
      <link href="/repository/2019/10/27/PHP-Operators/"/>
      <url>/repository/2019/10/27/PHP-Operators/</url>
      
        <content type="html"><![CDATA[<h2>PHP Operators</h2><p>&lt;!--more--&gt;</p><hr><ul><li><p>Return true if $a is not TRUE.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>.<span class="string">'- Not -'</span>.<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">var_dump(! <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(! <span class="keyword">false</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(! <span class="keyword">null</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(! <span class="string">''</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(! []); <span class="comment">// true</span></span><br><span class="line">var_dump(! <span class="keyword">new</span> stdClass); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p></li><li><p>Return true if $a is not FALSE.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>.<span class="string">'- Is -'</span>.<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">var_dump(!! <span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(!! <span class="keyword">false</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(!! <span class="keyword">null</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(!! <span class="string">''</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(!! []); <span class="comment">// false</span></span><br><span class="line">var_dump(!! <span class="keyword">new</span> stdClass); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p></li></ul><ul><li><p>Return true if either $a or $b is TRUE.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>.<span class="string">'- Or -'</span>.<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">0</span> || <span class="string">'value'</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(<span class="keyword">false</span> || <span class="string">'value'</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(<span class="keyword">null</span> || <span class="string">'value'</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(<span class="string">''</span> || <span class="string">'value'</span>); <span class="comment">// true</span></span><br><span class="line">var_dump([] || <span class="string">'value'</span>); <span class="comment">// true</span></span><br><span class="line">var_dump(<span class="keyword">new</span> stdClass || <span class="string">'value'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p></li><li><p>Return true if both $a and $b are TRUE.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>.<span class="string">'- And -'</span>.<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">0</span> &amp;&amp; <span class="string">'value'</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(<span class="keyword">false</span> &amp;&amp; <span class="string">'value'</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(<span class="keyword">null</span> &amp;&amp; <span class="string">'value'</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(<span class="string">''</span> &amp;&amp; <span class="string">'value'</span>); <span class="comment">// false</span></span><br><span class="line">var_dump([] &amp;&amp; <span class="string">'value'</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(<span class="keyword">new</span> stdClass &amp;&amp; <span class="string">'value'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p></li><li><p>Return $a if $a is not FALSE.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>.<span class="string">'- Ternary -'</span>.<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">0</span> ?: <span class="string">'value'</span>); <span class="comment">// "value"</span></span><br><span class="line">var_dump(<span class="keyword">false</span> ?: <span class="string">'value'</span>); <span class="comment">// "value"</span></span><br><span class="line">var_dump(<span class="keyword">null</span> ?: <span class="string">'value'</span>); <span class="comment">// "value"</span></span><br><span class="line">var_dump(<span class="string">''</span> ?: <span class="string">'value'</span>); <span class="comment">// "value"</span></span><br><span class="line">var_dump([] ?: <span class="string">'value'</span>); <span class="comment">// "value"</span></span><br><span class="line">var_dump(<span class="keyword">new</span> stdClass ?: <span class="string">'value'</span>); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>Return $a if $a exists and is not NULL.<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"\n"</span>.<span class="string">'- Null Coalescing -'</span>.<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">var_dump(<span class="number">0</span> ?? <span class="string">'value'</span>); <span class="comment">// 0</span></span><br><span class="line">var_dump(<span class="keyword">false</span> ?? <span class="string">'value'</span>); <span class="comment">// false</span></span><br><span class="line">var_dump(<span class="keyword">null</span> ?? <span class="string">'value'</span>); <span class="comment">// "value"</span></span><br><span class="line">var_dump(<span class="string">''</span> ?? <span class="string">'value'</span>); <span class="comment">// ''</span></span><br><span class="line">var_dump([] ?? <span class="string">'value'</span>);  <span class="comment">// []</span></span><br><span class="line">var_dump(<span class="keyword">new</span> stdClass ?? <span class="string">'value'</span>); <span class="comment">// &#123;&#125;</span></span><br><span class="line">var_dump($foo ?? $bar ?? <span class="string">'value'</span>); <span class="comment">// "value"</span></span><br></pre></td></tr></table></figure></p></li></ul><p><code>die();</code></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Setter and Getter</title>
      <link href="/repository/2019/10/27/PHP-Setter-and-Getter/"/>
      <url>/repository/2019/10/27/PHP-Setter-and-Getter/</url>
      
        <content type="html"><![CDATA[<h2>Setter and Getter</h2><p>&lt;!--more--&gt;</p><hr><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">T</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> $A;</span><br><span class="line"><span class="keyword">protected</span> $B;</span><br><span class="line"><span class="keyword">private</span> $C;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;A = A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">setB</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getA</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;A = A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getB</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>應用在讓程式可視性更高，不直接在變數定義，而是在setter去定義，再透過getter去拿取</li></ul><p>function的部分</p><table><thead><tr><th></th><th>外部</th><th>繼承</th></tr></thead><tbody><tr><td>public</td><td>Yes</td><td>Yes</td></tr><tr><td>protected</td><td>No</td><td>Yes</td></tr><tr><td>private</td><td>No</td><td>No</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Middleware</title>
      <link href="/repository/2019/10/27/Laravel-Middleware/"/>
      <url>/repository/2019/10/27/Laravel-Middleware/</url>
      
        <content type="html"><![CDATA[<h2>Middleware</h2><p>&lt;!--more--&gt;</p><hr><ul><li>Middleware提供了一種方便的機制來過濾進入應用程序的 HTTP 請求。</li><li>最簡單的使用方法就是比對使用者的請求資料是不是符合我們的要求，如果符合，就繼續下一個個程序；如果不符合，可以導向另外一個頁面 or 回傳一個錯誤訊息。</li><li>假設我們有&lt;font color=&quot;red&quot;&gt;重複要驗證&lt;/font&gt;的資料，我們可以寫在 Middleware，不用每次在 Controller 中各 function 執行的時候都要重複寫。</li></ul><h2>Start using middleware</h2><p><code>php artisan make:middleware filename</code></p><ul><li>Laravel 預設和新創建的 middleware 都存放在 app/Http/Middleware 裡.</li></ul><h2>Before Middleware</h2><ul><li>Before Middleware 我翻譯成「前行中介層」，就是先執行中介層內容，再丟給下一個接收的人處理。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeforeMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Perform action       //先執行任務  </span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'before'</span>.<span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> $next($request); <span class="comment">//這裡才處理 request</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2>After Middleware</h2><ul><li>為「後行中介層」，就是先請下一個接收 request 的人先執行，執行完在回頭執行中介層內容。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AfterMiddleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $response = $next($request); <span class="comment">//先處理 request （next 本身是閉包，會先處理 request)</span></span><br><span class="line">        <span class="comment">// Perform action //這裡才執行任務</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;/br&gt;'</span>.<span class="string">'after'</span>;</span><br><span class="line">        <span class="keyword">return</span> $response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2>Registering Middleware</h2><h3>全域使用(Global Middleware)</h3><ul><li><p>希望在對應用程序的每個 HTTP request 期間運行中介層，請在<code>app/Http/Kernel.php</code> class的<code>middleware</code>屬性中列出中介層類。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">Kernel</span> <span class="title">as</span> <span class="title">HttpKernel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">extends</span> <span class="title">HttpKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $middleware = [</span><br><span class="line">        \App\Http\Middleware\CheckForMaintenanceMode::class,</span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,</span><br><span class="line">        \App\Http\Middleware\TrimStrings::class,</span><br><span class="line">        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,</span><br><span class="line">        \App\Http\Middleware\TrustProxies::class,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//這裡可以把我們新建立的 BeforeMiddleware 加入</span></span><br><span class="line">        \App\Http\Middleware\BeforeMiddleware::class,</span><br><span class="line"></span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>請注意，一但設定為全域使用，那麼任何請求進來一定都要先經過這個中介層處理，所以使用上要特別小心，否則萬一中介層出現 bug，你又忘記自己設定了全域中介層，那...這個 bug 就有得找了！</p></li></ul><h3>為 Route 指派 Middleware</h3><ul><li>如果要分配中介層給特定的 route，可以在 <code>app/Http/Kernel.php</code> 中的 <code>$routeMiddleware</code> 屬性，自定義中介層的 key name<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Http</span>\<span class="title">Kernel</span> <span class="title">as</span> <span class="title">HttpKernel</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">extends</span> <span class="title">HttpKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">        <span class="string">'auth'</span> =&gt; \Illuminate\Auth\Middleware\Authenticate::class,</span><br><span class="line">        <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">        <span class="string">'bindings'</span> =&gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">        <span class="string">'can'</span> =&gt; \Illuminate\Auth\Middleware\Authorize::class,</span><br><span class="line">        <span class="string">'guest'</span> =&gt; \App\Http\Middleware\RedirectIfAuthenticated::class,</span><br><span class="line">        <span class="string">'throttle'</span> =&gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4>使用方法：</h4><p>一旦定義了中介層的 key name，在 route 中就可以使用以下方法直接調用</p><h5>一個中介層：</h5><ul><li>方法一：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::get(<span class="string">'admin/profile'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;middleware(<span class="string">'auth'</span>);</span><br></pre></td></tr></table></figure></li><li>方法二：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware(<span class="string">'auth'</span>)-&gt;get(<span class="string">'admin/profile'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>方法二比較符合 Laravel 的執行流程，因為流程是先經過中介層，再進到 Route 裡的 function。</li><li>方法三：你也可以使用完整 class namePS：完整的意思就是要列出「路徑 + class name」<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>\<span class="title">CheckAge</span>; <span class="comment">//路徑，最終停在一個 CheckAge.php 的檔案</span></span><br><span class="line"></span><br><span class="line">Route::get(<span class="string">'admin/profile'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;middleware(CheckAge::class); <span class="comment">// CheckAge.php 中有一個 CheckAge 的 class name</span></span><br></pre></td></tr></table></figure></li></ul><h5>多個中介層：</h5><p>也可以同時調用好幾個 middleware (當然要先定義好 key 值)<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware(<span class="string">'first'</span>, <span class="string">'second'</span>)-&gt;get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3>Middleware 群組化</h3><ul><li>有時候為了方便重複調用多個中介層，就可以把好幾個中介層，群組在一個 key name 之中，只要定義在 <code>app/Http/Kernel.php</code> 中的 <code>$middlewareGroups</code> 屬性</li><li>Ex:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The application's route middleware groups.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $middlewareGroups = [</span><br><span class="line">    <span class="string">'web'</span> =&gt; [</span><br><span class="line">        \App\Http\Middleware\EncryptCookies::class,</span><br><span class="line">        \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,</span><br><span class="line">        \Illuminate\Session\Middleware\StartSession::class,</span><br><span class="line">        \Illuminate\View\Middleware\ShareErrorsFromSession::class,</span><br><span class="line">        \App\Http\Middleware\VerifyCsrfToken::class,</span><br><span class="line">        \Illuminate\Routing\Middleware\SubstituteBindings::class,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">'api'</span> =&gt; [</span><br><span class="line">        <span class="string">'throttle:60,1'</span>,</span><br><span class="line">        <span class="string">'auth:api'</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li>可以使用與使用「單一中介層」類似的方法將 middleware group 分配給 route 和 controller。</li><li>Ex:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一：</span></span><br><span class="line">Route::get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;middleware(<span class="string">'web'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二：</span></span><br><span class="line">Route::group([<span class="string">'middleware'</span> =&gt; [<span class="string">'web'</span>]], <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4>官方文件小重點：</h4><blockquote><p>Out of the box, the web middleware group is automatically applied to your routes/web.php file by the RouteServiceProvider.官方文件這句話就是如果我們使用 web.php 來設定 route 的話，那 Laravel 內建就會調用 'web' 這個 middleware group!</p></blockquote><h3>Middleware Parameters</h3><ul><li><p>中介層是可以接受額外的變數。加入的方法就是在中介層裡面的 handle 方法中加入第三個參數。</p></li><li><p>也就是在 $next 參數之後，額外新增一個參數。</p></li><li><p>Ex:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Middleware</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckRole</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle the incoming request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Http\Request  $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Closure  $next</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $role</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next, $role)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! $request-&gt;user()-&gt;hasRole($role)) &#123;</span><br><span class="line">            <span class="comment">// Redirect...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $next($request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>使用方法：可以在定義 route 時，透過 : 分隔 middleware name 和 middleware parameters</p></li><li><p>Ex:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Route::put(<span class="string">'post/&#123;id&#125;'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;middleware(<span class="string">'role:editor'</span>);  <span class="comment">//role 就是 middleware key name，</span></span><br><span class="line"> <span class="comment">//editor 就是 middleware parameter</span></span><br></pre></td></tr></table></figure></p></li><li><p>ps:如果有多個參數，就以「,」分隔<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//middleware 設定</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">($request, Closure $next, $greet, $name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> $greet.<span class="string">', '</span>;</span><br><span class="line">        <span class="keyword">echo</span> $name.<span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> $next($request);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>PS:記得要去 <code>app/Http/Kernel.php</code> 定義中介層的 key name。我的範例是取名為 'before'<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//route 設定</span></span><br><span class="line">    Route::middleware(<span class="string">'before:Hello,Kao'</span>)-&gt;get(<span class="string">'/before'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p></li><li><p>如此一來before 為中介層的 key nameHello 為中介層中 handle 中的參數 $greetKao 為 handle 中的參數 $name</p></li></ul><h3>Before Middleware VS After Middleware</h3><ol><li><p>我們延用上面的 Before Middleware 和 After Middleware 的範例程式。</p></li><li><p><code>app/Http/Kernel.php</code> 也定義了中介層的 key name<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">       <span class="string">'before'</span> =&gt; \App\Http\Middleware\BeforeMiddleware::class,</span><br><span class="line">       <span class="string">'after'</span> =&gt; \App\Http\Middleware\AfterMiddleware::class,</span><br><span class="line">   ];</span><br></pre></td></tr></table></figure></p></li><li><p>接著我們 route 設定如下<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Route::middleware(<span class="string">'before'</span>)-&gt;get(<span class="string">'/before'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'in Route'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Route::middleware(<span class="string">'after'</span>)-&gt;get(<span class="string">'/after'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'in Route'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></li></ol><ul><li><p>實際跑跑看</p></li><li><p>這裡就可以看到差別，因為我們故意將 route 設定成只執行印出 in Route 的動作，所以我們可以得知 Before Middleware 先執行自己的內容，在執行 route 的內容，而反過來的 After Middleware 則是先執行 route 的內容，才回去執行自己的內容。</p></li><li><p>這裡的關鍵就是 $next 這個參數是在'前'還是'後'，由於 $next 本身是一個 closure 所以會執行一個動作就是把 $request 當成參數交給下一個程式執行，而那一位「下一個程式」這裡先不探討是誰，我只知道它都會執行 route 裡的 function!最終，等「下一個程式」也跑完了，程序就會回到 $next 調用之後，接著執行 $next 之後的程式。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel CSRF</title>
      <link href="/repository/2019/10/27/Laravel-CSRF/"/>
      <url>/repository/2019/10/27/Laravel-CSRF/</url>
      
        <content type="html"><![CDATA[<h2>CSRF</h2><p>&lt;!--more--&gt;</p><hr><ul><li>跨站請求偽造（英語：Cross-site request forgery），也被稱為 one-click attack 或者 session riding，通常縮寫為 CSRF 或者 XSRF，是一種挾制用戶在當前已登錄的Web應用程式上執行非本意的操作的攻擊方法。</li><li>跟跨網站指令碼（XSS）相比，XSS 利用的是用戶對指定網站的信任，CSRF 利用的是網站對用戶網頁瀏覽器的信任。</li></ul><h2>Laravel 內建 CSRF token</h2><ul><li>Laravel 透過應用程式自動產生一個 CSRF「token」來管理每個活躍的使用者 session。這個 token 用於驗證已認證使用者是否實際向應用程式發出請求。</li></ul><ol><li><p><code>vender/laravel/framework/src/Illuminate/Session/Store.php</code> 這支檔案，可以知道每次進入 laravel 專案的時候，都會檢查 session 中 <code>_token</code> 是否存在，如果不存在就會呼叫 <code>regenerateToken</code> 重新生成一個 token<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;loadSession();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (! <span class="keyword">$this</span>-&gt;has(<span class="string">'_token'</span>)) &#123;</span><br><span class="line">          <span class="keyword">$this</span>-&gt;regenerateToken();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;started = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>regenerateToken</code> 實作內容，即隨機產生亂數字元。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">regenerateToken</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;put(<span class="string">'_token'</span>, Str::random(<span class="number">40</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>實際用 POSTMAN 看看伺服器是不是真的有回傳 token<img src="https://i.imgur.com/T6PLbma.png" alt=""></p></li><li><p>確實有一個名為 XSRF-TOKEN 的 token。</p></li></ol><h2>添加校驗 token</h2>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel Database</title>
      <link href="/repository/2019/10/27/Laravel-Database/"/>
      <url>/repository/2019/10/27/Laravel-Database/</url>
      
        <content type="html"><![CDATA[<p>Laravel 將Model分成三個部分</p><ol><li>原生 SQL 查詢</li><li>查詢建構器</li><li>Eloquent ORM</li></ol><h2>&lt;!--more--&gt;</h2><h2>原生 SQL 查詢</h2><p>如果資料庫設定完成，接著用 <code>DB::connection('資料庫類型')</code> 連線後，就可以使用 <code>DB</code> facade 進行查詢。DB facade 提供每個類型的查詢方法：<code>select</code>、<code>update</code>、<code>insert</code>、<code>delete</code>、<code>statement</code>。</p><h3>基本使用方法</h3><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 連線到資料庫</span></span><br><span class="line">DB::connection(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//select</span></span><br><span class="line">$users = DB::select(<span class="string">'select * from users where active = ?'</span>, [<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//insert</span></span><br><span class="line">DB::insert(<span class="string">'insert into users (id, name) values (?, ?)'</span>, [<span class="number">1</span>, <span class="string">'Dayle'</span>]);</span><br><span class="line"><span class="comment">//update</span></span><br><span class="line">$affected = DB::update(<span class="string">'update users set votes = 100 where name = ?'</span>, [<span class="string">'John'</span>]);</span><br><span class="line"><span class="comment">//delete，後面一樣可以接 where 語句設定條件</span></span><br><span class="line">$deleted = DB::delete(<span class="string">'delete from users where id = ?'</span>, [<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//一般陳述式</span></span><br><span class="line">DB::statement(<span class="string">'drop table users'</span>);</span><br></pre></td></tr></table></figure></p><ol><li>這些方法都有兩個可以參數帶入<ul><li>第一個是資料庫訪查語句(型別是字串)，第二個是訪查參數(型別是數字或字串的陣列)。</li><li>訪查語句有幾個「?」，訪查參數就要放幾個參數，而且是依序對應到前面的「?」。</li></ul></li><li>select、update、delete 會有一個回傳值<ul><li>select 回傳資料庫內容，以「陣列」的形式存放。</li><li>update、delete 回傳資料庫受影響的行數。</li></ul></li></ol><h4>select 查詢出來的結果，都是以陣列方式存放，而裡面每筆資料都是一個 PHP <code>stdClass</code> 的物件。</h4><ol><li>由於取出來的資料是陣列，所以如果從資料庫撈出來的資料想再作處理，就要比照陣列的處理模式，例如 foreach 、 while ...</li><li>由於每筆資料都是 <code>stdClass</code>，所以可以把存取的欄位當作物件的一個屬性來存取每個欄位的值<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 連線到資料庫</span></span><br><span class="line">DB::connection(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//select</span></span><br><span class="line">$users = DB::select(<span class="string">'select * from users where active = ?'</span>, [<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $user-&gt;name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3>監聽查詢事件</h3><p>Laravel 5.1之後取消了 <code>getQueryLog()</code>，取而代之的是<code>DB::listen()</code></p><ol><li>import use <code>Illuminate\Support\Facades\Log;</code></li><li>透過 <code>Log::info()</code> 把記錄存在 Log file(路徑：/storage/logs)<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">DB</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Log</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 啟動任何應用程式服務。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DB::listen(<span class="function"><span class="keyword">function</span> <span class="params">($query)</span> </span>&#123;</span><br><span class="line">            Log::info($query-&gt;sql);</span><br><span class="line">            <span class="comment">// $query-&gt;bindings</span></span><br><span class="line">            <span class="comment">// $query-&gt;time</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3>Database Transactions</h3><p>在資料存取資料庫時，最怕出了什麼差錯，導致資料處理不連續，最終導致資料錯亂。這如同銀行轉賬，如果轉出帳戶扣款了，但是轉入帳戶發生意外沒寫入資料庫，那麼這次轉賬就宣告失敗，轉出帳戶的金額要復原。</p><p>為了避免 sql 原生語法有 <code>transaction</code> 的機制，整個程序中一但有一步資料沒處理好，就整個程序都取消，過程中已經執行過的動作全部復原！</p><p>在 Laravel 中更簡便了這個動作，呼叫 <code>transaction()</code> 將資料庫查訪動作寫在閉包裡面，一但閉包成功，就完成程序；閉包失敗，就自動還原資料庫。不用再特地手動提交或還原了。</p><p>使用方法如下<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::transaction(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    DB::table(<span class="string">'users'</span>)-&gt;update([<span class="string">'votes'</span> =&gt; <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    DB::table(<span class="string">'posts'</span>)-&gt;delete();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><hr><h2>查詢建構器</h2><p>查詢建構器最大的好處就是簡化了查訪資料庫的語句，也就是不用再寫一堆煩人 sql 語句。</p><h3>基本使用方法</h3><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 連線到資料庫，使用原生 sql 語法才需要</span></span><br><span class="line">DB::connection(<span class="string">'mysql'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取得資料</span></span><br><span class="line"><span class="comment">//原生 sql 語法</span></span><br><span class="line">$users = DB::select(<span class="string">'select * from users'</span>);</span><br><span class="line"><span class="comment">//使用查詢建構器</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;get();</span><br></pre></td></tr></table></figure></p><ul><li><code>get</code> 方法取得的結果，都是 <code>Illuminate\Support\Collection</code> (集合)實例，每個都是 PHP <code>StdClass</code> 物件。</li><li>由於取出來的資料是 <code>集合</code>，所以如果資料想再作處理，可以直接在用集合的鏈結語法處理資料，例如 <code>pluck</code> <code>chunk</code> ...</li><li>由於每筆資料都是 <code>stdClass</code>，所以可以把存取的欄位當作物件的一個屬性來存取每個欄位的值</li></ul><h3>鏈結語法</h3><p><code>$users = DB::table('users')-&gt;where('id', '&gt;', 0)-&gt;get();</code></p><p>使用「鏈結語法」的時候就要特別注意，現在是還在「查詢建構器」裡面，還是已經取得結果了，這決定了後面可用的「鏈結語法」為何。</p><p>以上面的例子來看到 <code>where</code> 語句結束時都還屬於下達搜尋指令，也就是還在 <code>Builder</code> 裡面，也就是說我們可以繼續鏈結 <code>where</code> 、 <code>join</code> 、 <code>orderBY</code> ...等方法。但是一但鏈結了 <code>get</code>，他就會變更為集合實例，就只能鏈結集合可以用的方法了。</p><hr><h2>Eloquent ORM</h2><ul><li>Eloquent ORM 提供了簡單、漂亮的語法來和資料庫互動。而實際做法就是每個資料表都對應著一個 <code>Model</code> 來和資料表互動。</li></ul><h3>定義模型</h3><ul><li>我們可以透過 <code>Artisan</code> 指令快速建立 <code>Model</code><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Flight</span><br><span class="line">//Flight 為 Model 名稱</span><br></pre></td></tr></table></figure></li></ul><h3>基本表示法</h3><p>透過 <code>Artisan</code> 指令可以生成一個最基本的 <code>Model</code> 如下：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>從上述程式碼可以得知，新創立的「模型」：</p><ul><li>會存放在 <code>App</code> 資料夾下</li><li>繼承 <code>Illuminate\Database\Eloquent\Model</code></li></ul><h3>預設條件</h3><ol><li><strong>資料表名稱</strong></li></ol><p><code>Eloquent</code> 本身會默認先找一個與「模型」名稱一樣，但是是小寫、底線、複數形式的名詞來當作資料表名稱。</p><table><thead><tr><th>Class Name</th><th>Default Table Name</th></tr></thead><tbody><tr><td>Flight</td><td>flight</td></tr><tr><td>User</td><td>user</td></tr><tr><td>MyTable</td><td>my_tables</td></tr></tbody></table><p>當然你也可以直接在「模型」裡用 <code>$table</code> 屬性設定資料表名稱<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $table = <span class="string">'my_flights'</span>;</span><br><span class="line">    <span class="comment">// 自定義資料表名稱為 'my_flights'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="2"><li><strong>主鍵</strong></li></ol><p><code>Eloquent</code> 也會假設每個資料表有一個遞增的整數值主鍵欄位叫做 id。你可以定義一個 <code>$primaryKey</code> 屬性來重新定義。</p><p>此外，如果你的主鍵非遞增方式，請務必把 <code>public $incrementing</code> 屬性設定為 <code>false</code>。如果非整數值，則請把 <code>protected $keyType</code> 屬性設定為 <code>string</code>。</p><ol start="3"><li><strong>時間戳記</strong></li></ol><p><code>Eloquent</code> 預設你的資料表會有 <code>created_at</code> 和 <code>updated_at</code> 來記錄資料寫入和更新資料表的時間，如果不需要這些設定，可以把 <code>public $timestamps</code> 屬性設定為 <code>false</code>。</p><p>也可以透過 <code>protected $dataFormat</code> 來變更日期儲存格式，以及輸出成陣列或 JSON 時的格式。</p><p>除此之外，你也可以自定義 <code>CREATED_AT</code> 和 <code>UPDATED_AT</code> 常數來決定資料表中的欄位名稱。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模型的日期欄位儲存格式。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $dateFormat = <span class="string">'U'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自定義 資料寫入和更新資料表 的欄位名稱</span></span><br><span class="line">    <span class="keyword">const</span> CREATED_AT = <span class="string">'creation_date'</span>;</span><br><span class="line">    <span class="keyword">const</span> UPDATED_AT = <span class="string">'last_update'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li><strong>資料庫連線</strong></li></ol><p>基本上資料庫連線會先依照 <code>config\database.php</code> 的設定，但你也可以透過 <code>$connection</code> 屬性為 <code>Eloquent</code> 指定不同連線。</p><hr><h2>集合</h2><p><code>Eloquent</code> 回傳的負數資料結果，都會是 <code>Illuminate\Database\Eloquent\Collection</code> 的實例，這跟「查詢建構器」的方法 <code>get()</code> 一樣。</p><h3>什麼是「集合」<code>collection</code> ?</h3><p>集合物件繼承 Laravel collections，所以它自然也繼承了幾十種用於與底層 <code>Eloquent</code> 模型陣列的優雅方法。</p><p>集合相比陣列強大許多，除了提供 <code>map</code>、<code>sort</code> 或 <code>reduce</code> 等各種遍歷集合的方法外，最大的好處就是可以透過「鏈結語法」的直觀操作。</p><p>ForExample：假設 users 表中有一個欄位 <code>is_online</code> 記錄了目前使用者在線上，我們可以透過 <code>reject()</code>、<code>map()</code> 的方式找出目前在線上的使用者姓名。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$name = App\Flight::all()</span><br><span class="line">        -&gt;reject(<span class="function"><span class="keyword">function</span> <span class="params">($user)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $user-&gt;is_online === <span class="number">0</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">        -&gt;map( <span class="function"><span class="keyword">function</span> <span class="params">($user)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $user-&gt;name;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Database </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.利用Laravel建立評論系統</title>
      <link href="/repository/2019/10/27/5-%E5%88%A9%E7%94%A8Laravel%E5%BB%BA%E7%AB%8B%E8%A9%95%E8%AB%96%E7%B3%BB%E7%B5%B1/"/>
      <url>/repository/2019/10/27/5-%E5%88%A9%E7%94%A8Laravel%E5%BB%BA%E7%AB%8B%E8%A9%95%E8%AB%96%E7%B3%BB%E7%B5%B1/</url>
      
        <content type="html"><![CDATA[<h3>基礎規則</h3><ul><li>需要新建一個表專門用來存放每一條評論，每一條評論都屬於某一篇文章。</li></ul><p>&lt;!--more--&gt;</p><hr><h3>建立 model 和資料表</h3><ul><li>建立名為Comment的model，並順便建立附帶的migration<code>php artisan make:model Comment -m</code></li><li>這樣一次性的建立兩個文件<code>database/migrations/2017_11_11_151823_create_comments_table.php</code> 和Comment類</li><li>填寫<code>up()</code>方法，給<code>comments</code>表增加<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">'comments'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(Blueprint $table)</span> </span>&#123;</span><br><span class="line">        $table-&gt;increments(<span class="string">'id'</span>);</span><br><span class="line">        $table-&gt;string(<span class="string">'nickname'</span>);</span><br><span class="line">        $table-&gt;string(<span class="string">'email'</span>)-&gt;nullable();</span><br><span class="line">        $table-&gt;string(<span class="string">'website'</span>)-&gt;nullable();</span><br><span class="line">        $table-&gt;text(<span class="string">'content'</span>)-&gt;nullable();</span><br><span class="line">        $table-&gt;integer(<span class="string">'article_id'</span>);</span><br><span class="line">        $table-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>接著運行<code>php artisan migrate</code></li><li>最後資料表已經建立完成</li></ul><h3>建立一對多關係</h3><ul><li>在 Article 模型中增加一對多關係的函數：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasManyComments</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(<span class="string">'App\Comment'</span>, <span class="string">'article_id'</span>, <span class="string">'id'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>完成！</li></ul><h2>構建前台UI</h2><ul><li>修改前台的視圖文件，想辦法把評論功能加進去。</li></ul><h4>建立前台的 ArticleController</h4><p><code>php artisan make:controller ArticleController</code><code>Route::get('article/{id}', 'ArticleController@show');</code></p><ul><li><p>此處的 {id} 指任意字符串，此字段為文章 ID，為數字，但是本路由卻會嘗試匹配所有請求，所以當遇到奇怪的路由調用的方法，記得檢查路由順序。路由匹配方式為前置匹配：任何一條路由規則匹配成功，會立刻返回结果，後面的路由便没有響應機會。</p></li><li><p>增加 show 函數<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'article/show'</span>)-&gt;withArticle(Article::with(<span class="string">'hasManyComments'</span>)-&gt;find($id));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>在頂部引入 Model，否則會報錯<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">....</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Article</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>建立前台文章</h4><ul><li>建立<code>resources/views/article/show.blade.php</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Learn Laravel 5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/2.2.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"padding: 50px;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">            &lt;a href="/"&gt;&lt;&lt; 返回首页&lt;/a&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"text-align: center; margin-top: 50px;"</span>&gt;</span>&#123;&#123; $article-&gt;title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">style</span>=<span class="string">"text-align: right;"</span>&gt;</span></span><br><span class="line">            &#123;&#123; $article-&gt;updated_at &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">style</span>=<span class="string">"margin: 20px;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                &#123;&#123; $article-&gt;body &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"comments"</span> <span class="attr">style</span>=<span class="string">"margin-top: 50px;"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            @if (count($errors) &gt; 0)</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>操作失败<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 输入不符合要求<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                    &#123;!! implode('<span class="tag">&lt;<span class="name">br</span>&gt;</span>', $errors-&gt;all()) !!&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            @endif</span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"new"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url('comment') &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">                    &#123;!! csrf_field() !!&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"article_id"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; $article-&gt;id &#125;&#125;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Nickname<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"nickname"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">style</span>=<span class="string">"width: 300px;"</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email address<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">style</span>=<span class="string">"width: 300px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Home page<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"website"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">style</span>=<span class="string">"width: 300px;"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">label</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">id</span>=<span class="string">"newFormContent"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-success col-lg-12"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">reply</span><span class="params">(a)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">var</span> nickname = a.parentNode.parentNode.firstChild.nextSibling.getAttribute(<span class="string">'data'</span>);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> textArea = <span class="built_in">document</span>.getElementById(<span class="string">'newFormContent'</span>);</span></span><br><span class="line"><span class="actionscript">              textArea.innerHTML = <span class="string">'@'</span>+nickname+<span class="string">' '</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"conmments"</span> <span class="attr">style</span>=<span class="string">"margin-top: 100px;"</span>&gt;</span></span><br><span class="line">                @foreach ($article-&gt;hasManyComments as $comment)</span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">style</span>=<span class="string">"border-top: solid 20px #efefef; padding: 5px 20px;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nickname"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123; $comment-&gt;nickname &#125;&#125;"</span>&gt;</span></span><br><span class="line">                            @if ($comment-&gt;website)</span><br><span class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; $comment-&gt;website &#125;&#125;"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; $comment-&gt;nickname &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                            @else</span><br><span class="line">                                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; $comment-&gt;nickname &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                            @endif</span><br><span class="line">                            <span class="tag">&lt;<span class="name">h6</span>&gt;</span>&#123;&#123; $comment-&gt;created_at &#125;&#125;<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"padding: 20px;"</span>&gt;</span></span><br><span class="line">                                &#123;&#123; $comment-&gt;content &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"reply"</span> <span class="attr">style</span>=<span class="string">"text-align: right; padding: 5px;"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#new"</span> <span class="attr">onclick</span>=<span class="string">"reply(this);"</span>&gt;</span>回复<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                @endforeach</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4>建立評論儲存功能</h4><ul><li>建立controller<code>php artisan make:controller CommentController</code></li><li>建立route<code>Route::post('comment', 'CommentController@store');</code></li><li>增加 store 函數<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Comment::create($request-&gt;all())) &#123;</span><br><span class="line">        <span class="keyword">return</span> redirect()-&gt;back();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redirect()-&gt;back()-&gt;withInput()-&gt;withErrors(<span class="string">'评论发表失败！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>批量賦值採用批量賦值方法來減少儲存評論的代碼model可利用「create」方法將array型態的資料進行模型(實體)的新增，而一般的「save」方法僅能進行單一屬性(欄位)設定，例如：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create方法</span></span><br><span class="line">$data = [</span><br><span class="line">    <span class="string">'column_1'</span> =&gt; <span class="string">'...'</span>,</span><br><span class="line">    <span class="string">'column_2'</span> =&gt; <span class="string">'...'</span>,</span><br><span class="line">];</span><br><span class="line">Post::create($data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// save方法</span></span><br><span class="line">$post = <span class="keyword">new</span> Post;</span><br><span class="line">$post-&gt;column_1 = <span class="string">'...'</span>;</span><br><span class="line">$post-&gt;column_2 = <span class="string">'...'</span>;</span><br><span class="line">$post-&gt;save();</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4. Laravel Restful</title>
      <link href="/repository/2019/10/27/4-Laravel-Restful/"/>
      <url>/repository/2019/10/27/4-Laravel-Restful/</url>
      
        <content type="html"><![CDATA[<h2>Restful</h2><p>&lt;!--more--&gt;</p><hr><ol><li>進行增刪改查<code>Route::resource('photo', 'PhotoController');</code></li><li>如下</li></ol><table><thead><tr><th>動作</th><th>URI</th><th>行為</th><th>路由名稱</th></tr></thead><tbody><tr><td>GET</td><td>/photos</td><td>index</td><td>photos.index</td></tr><tr><td>GET</td><td>/photos/create</td><td>create</td><td>photos.create</td></tr><tr><td>POST</td><td>/photos</td><td>store</td><td>photos.store</td></tr><tr><td>GET</td><td>/photos/{photo}</td><td>show</td><td>photos.show</td></tr><tr><td>GET</td><td>/photos/{photo}/edit</td><td>edit</td><td>photos.edit</td></tr><tr><td>PUT / PATCH</td><td>/photos/{photo}</td><td>update</td><td>photos.update</td></tr><tr><td>DELETE</td><td>/photos/{photo}</td><td>destory</td><td>photos.destory</td></tr></tbody></table><ol start="3"><li>配置資源路由</li></ol><ul><li><p>將<code>Route::get('article', 'ArticleController@index');</code></p></li><li><p>-&gt;改成 <code>Route::resource('articles', 'ArticleController');</code></p></li><li><p>article 單數變成複數。</p></li><li><p>修改之前的view<code>resources/views/admin/home.blade.php</code> 中的 <code>url('admin/article')</code></p></li><li><p>-&gt;為 <code>url('admin/articles')</code></p></li><li><p><code>resources/views/admin/article/index.blade.php</code> 中的 <code>url('admin/article/create')</code></p></li><li><p>-&gt;為 <code>url('admin/articles/create') ；</code></p></li><li><p>修改 <code>url('admin/article/'.$article-&gt;id.'/edit')</code></p></li><li><p>-&gt;為 <code>url('admin/articles/'.$article-&gt;id.'/edit') ；</code></p></li><li><p>修改 <code>url('admin/article/'.$article-&gt;id)</code></p></li><li><p>-&gt;為 <code>url('admin/articles/'.$article-&gt;id)</code></p></li></ul><ol start="4"><li>新增article</li></ol><ul><li><p>需要兩個動作，1. 新增article的頁面，2. 將資料送到後端</p></li><li><p>新增Article 頁面</p><ul><li>使用<code>/admin/articles/create</code>建立新增article頁面，瀏覽器使用GET從server獲取，對應<code>ArticleController</code>的<code>create()</code>方法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'admin/article/create'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新增view於<code>resources/views/admin/article/create.blade.php</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@extends('layouts.app')</span><br><span class="line">@section('content')</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10 col-md-offset-1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>新增一篇文章<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    @if (count($errors) &gt; 0)</span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>新增失败<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 输入不符合要求<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                            &#123;!! implode('<span class="tag">&lt;<span class="name">br</span>&gt;</span>', $errors-&gt;all()) !!&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    @endif</span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url('admin/articles') &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">                        &#123;!! csrf_field() !!&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">placeholder</span>=<span class="string">"请输入标题"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">placeholder</span>=<span class="string">"请输入内容"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-info"</span>&gt;</span>新增文章<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>view()</code> 方法是 Laravel 中一个全局的方法，用於調用view文件，接受一個字符串參數，並按照此參數去調取對應的路由。</p></li><li><p><code>admin/article/create'</code> 跟 <code>'admin.article.create'</code> 是等於的</p></li><li><p>提交資料到後端</p><ul><li>blade中表單，有csrf_field是laravel內建的應對csrf攻擊的防範措施，任何 POST PUT PATCH 請求都會被檢測是否提交了 CSRF 字段。對應的代碼為 <code>app/Http/Kernel.php</code> 裡的 <code>$middlewareGroups</code> 屬性裡的 <code>\App\Http\Middleware\VerifyCsrfToken::class</code> 值。</li><li><code>{!! csrf_field() !!}</code> 實際上會生成一个隱藏的 input：<code>&lt;input type=&quot;hidden&quot; name=&quot;_token&quot; value=&quot;GYZ8OHDAbZICMcEvcTiS82qlZs2XrELklpEl159S&quot;&gt;</code></li><li>如果你的系统有很多的 Ajax，而你又不想降低安全性，這裏的 <code>csrf_token()</code> 函數會给你很大的幫助。</li><li>提交表單對應的是<code>store()</code>方法</li><li>create store()方法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span><span class="params">(Request $request)</span> // <span class="title">Laravel</span> 的依賴注入系统會自動初始化我們需要的 <span class="title">Request</span> 類</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 數據驗證</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;validate($request, [</span><br><span class="line">        <span class="string">'title'</span> =&gt; <span class="string">'required|unique:articles|max:255'</span>, <span class="comment">// 必填、在 articles 表中唯一、最大長度 255</span></span><br><span class="line">        <span class="string">'body'</span> =&gt; <span class="string">'required'</span>, <span class="comment">// 必填</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通過 Article Model 插入一條數據進 articles 表</span></span><br><span class="line">    $article = <span class="keyword">new</span> Article; <span class="comment">// 初始化 Article 對象</span></span><br><span class="line">    $article-&gt;title = $request-&gt;get(<span class="string">'title'</span>); <span class="comment">// 將 POST 提交過了的 title 字段的值賦给 article 的 title 屬性</span></span><br><span class="line">    $article-&gt;body = $request-&gt;get(<span class="string">'body'</span>); <span class="comment">// 同上</span></span><br><span class="line">    $article-&gt;user_id = $request-&gt;user()-&gt;id; <span class="comment">// 獲取當前 Auth 系统中註冊的用户，並將其 id 賦给 article 的 user_id 屬性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 將數據保存到數據庫，通過判斷保存结果，控制頁面進行不同跳轉</span></span><br><span class="line">    <span class="keyword">if</span> ($article-&gt;save()) &#123;</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'admin/articles'</span>); <span class="comment">// 保存成功，跳轉到 文章管理頁</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 保存失敗，跳回来路頁面，保留用户的輸入，並给出提示</span></span><br><span class="line">        <span class="keyword">return</span> redirect()-&gt;back()-&gt;withInput()-&gt;withErrors(<span class="string">'保存失敗！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="5"><li>編輯Article</li></ol><ul><li><p>需要兩個動作： 1. 顯示編輯頁面 2. 將編輯資料送至資料庫更新</p></li><li><p>新增編輯頁面</p><ul><li>使用<code>/admin/article/edit</code> 建立編輯頁面，瀏覽器使用GET獲取，對應ArticleController 中的<code>edit()</code>方法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span><span class="params">($id ,Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'admin/article/edit'</span>)-&gt;withArticle(Article::find($id));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>新增view於<code>resources/views/admin/article/edit.blade.php</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@extends('layouts.app')</span><br><span class="line">@section('content')</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10 col-md-offset-1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>編輯 &#123;&#123;$article-&gt;title&#125;&#125; 文章<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    @if (count($errors) &gt; 0)</span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">strong</span>&gt;</span>修改失敗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 輸入不符合要求<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                            &#123;!! implode('<span class="tag">&lt;<span class="name">br</span>&gt;</span>', $errors-&gt;all()) !!&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    @endif</span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url('admin/articles/'.$article-&gt;id) &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line">                        &#123;&#123; method_field('PATCH') &#125;&#125;</span><br><span class="line">                        &#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;$article-&gt;title&#125;&#125; "</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"body"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">required</span>=<span class="string">"required"</span> &gt;</span>&#123;&#123;$article-&gt;body&#125;&#125; <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-info"</span>&gt;</span>修改文章<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure></p></li><li><p>記得此處post！</p></li><li><p>提交表單到資料庫使用的是<code>update()</code>方法</p></li></ul><p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span><span class="params">($id, Request $request)</span> // <span class="title">Laravel</span> 的依賴注入系统會自動初始化我們需要的 <span class="title">Request</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 數據驗證</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;validate($request, [</span><br><span class="line">        <span class="string">'title'</span> =&gt; <span class="string">'required|unique:articles|max:255'</span>, <span class="comment">// 必填、在 articles 表中唯一、最大長度 255</span></span><br><span class="line">        <span class="string">'body'</span> =&gt; <span class="string">'required'</span>, <span class="comment">// 必填</span></span><br><span class="line">    ]);</span><br><span class="line">    $article = Article::find($id);</span><br><span class="line">    $article-&gt;title = $request-&gt;get(<span class="string">'title'</span>); <span class="comment">// 將 POST 提交過了的 title 字段的值賦给 article 的 title 屬性</span></span><br><span class="line">    $article-&gt;body = $request-&gt;get(<span class="string">'body'</span>); <span class="comment">// 同上</span></span><br><span class="line">    $article-&gt;user_id = $request-&gt;user()-&gt;id; <span class="comment">// 獲取當前 Auth 系统中註冊的用户，並將其 id 賦给 article 的 user_id 屬性</span></span><br><span class="line">    $article-&gt;save();</span><br><span class="line">    <span class="comment">// 將數據保存到數據庫，通過判斷保存结果，控制頁面進行不同跳轉</span></span><br><span class="line">    <span class="keyword">if</span> ($article-&gt;save()) &#123;</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'admin/articles'</span>); <span class="comment">// 保存成功，跳轉到文章管理頁</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 保存失敗，跳回来路頁面，保留用户的輸入，並给出提示</span></span><br><span class="line">        <span class="keyword">return</span> redirect()-&gt;back()-&gt;withInput()-&gt;withErrors(<span class="string">'保存失敗！'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="6"><li>刪除Article</li></ol><ul><li>刪除文章所對應的方法是<code>destory()</code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Article::find($id)-&gt;delete();</span><br><span class="line">    <span class="keyword">return</span> redirect()-&gt;back()-&gt;withInput()-&gt;withErrors(<span class="string">'刪除成功！'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新增view於resources/views/admin/article/delete.blade.php<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url('admin/articles/'.$article-&gt;id) &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">style</span>=<span class="string">"display: inline;"</span>&gt;</span></span><br><span class="line">    &#123;&#123; method_field('DELETE') &#125;&#125;</span><br><span class="line">    &#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>刪除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Database </tag>
            
            <tag> CRUD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 搭建Laravel後台</title>
      <link href="/repository/2019/10/27/3-%E6%90%AD%E5%BB%BALaravel%E5%BE%8C%E5%8F%B0/"/>
      <url>/repository/2019/10/27/3-%E6%90%AD%E5%BB%BALaravel%E5%BE%8C%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<h2>搭建Laravel後台</h2><p>&lt;!--more--&gt;</p><hr><ol><li><p>使用Artisan 去搭建後台<code>php artisan make:controller Admin/HomeController</code>此時 laravel會幫我們自己建一個admin資料夾在controller裡面</p></li><li><p>增加路由於web.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Route::group([<span class="string">'middleware'</span> =&gt; <span class="string">'auth'</span>, <span class="string">'namespace'</span> =&gt; <span class="string">'Admin'</span>, <span class="string">'prefix'</span> =&gt; <span class="string">'admin'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Route::get(<span class="string">'/'</span>, <span class="string">'HomeController@index'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>於是在網址後方加上<code>/admin</code>即可</p></li><li><p>新建index首頁，在admin/Homecontroller加上<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'admin/home'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>create 後台首頁view</p></li></ol><ul><li>create admin folder in resource/views</li><li>create home.blade.php<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@extends('layouts.app')</span><br><span class="line"></span><br><span class="line">@section('content')</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10 col-md-offset-1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Learn Laravel 5 後台<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url('admin/article') &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-success col-xs-12"</span>&gt;</span>管理文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>修改 Auth 系統登入成功之後的跳轉路徑<code>Controllers/Auth/LoginController.php</code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $redirectTo = <span class="string">'/admin'</span>;</span><br></pre></td></tr></table></figure></li></ol><h2>開始建立 Article 管理功能</h2><ol><li>add route<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Route::group([<span class="string">'middleware'</span> =&gt; <span class="string">'auth'</span>, <span class="string">'namespace'</span> =&gt; <span class="string">'Admin'</span>, <span class="string">'prefix'</span> =&gt; <span class="string">'admin'</span>], <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Route::get(<span class="string">'/'</span>, <span class="string">'HomeController@index'</span>);</span><br><span class="line">    Route::get(<span class="string">'article'</span>, <span class="string">'ArticleController@index'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>create controller<code>php artisan make:controller Admin/ArticleController</code></li><li>新增index方法<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'admin/article/index'</span>)-&gt;withArticles(Article::all());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>新增view</li></ol><ul><li>在resources/views/admin增加article folder</li><li>create a index.blade.php in article folder</li><li>然後貼上以下<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@extends('layouts.app')</span><br><span class="line"></span><br><span class="line">@section('content')</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-10 col-md-offset-1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>文章管理<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">                    @if (count($errors) &gt; 0)</span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span></span><br><span class="line">                            &#123;!! implode('<span class="tag">&lt;<span class="name">br</span>&gt;</span>', $errors-&gt;all()) !!&#125;</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    @endif</span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url('admin/article/create') &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    @foreach ($articles as $article)</span><br><span class="line">                        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; $article-&gt;title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                                    &#123;&#123; $article-&gt;body &#125;&#125;</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url('admin/article/'.$article-&gt;id.'/edit') &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"&#123;&#123; url('admin/article/'.$article-&gt;id) &#125;&#125;"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">style</span>=<span class="string">"display: inline;"</span>&gt;</span></span><br><span class="line">                            &#123;&#123; method_field('DELETE') &#125;&#125;</span><br><span class="line">                            &#123;&#123; csrf_field() &#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">                    @endforeach</span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>需要增加調用<code>use App\Article;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2. Laravel blade</title>
      <link href="/repository/2019/10/27/2-Laravel-blade/"/>
      <url>/repository/2019/10/27/2-Laravel-blade/</url>
      
        <content type="html"><![CDATA[<h2>Laravel blade</h2><p>&lt;!--more--&gt;</p><hr><ul><li><p>When you see route to trace controller and then when you see <code>return view('home');</code></p></li><li><p>means you have to find <code>home.blade.php</code></p></li><li><p><code>@extends('layouts.app')</code>表示此blade的基礎view</p></li><li><p><code>@section（'content'）... @endsection</code>這兩個代碼之間的程式，會被放到基礎view的<code>@yield('content')</code>這個區塊輸出</p></li><li><p>刪除homeController 中的 建構子即可取消登入<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>接下來引入model，於Controller的index更改<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view(<span class="string">'home'</span>)-&gt;withArticles(\App\Article::all());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><code>\App\Article::all()</code> 是以<strong>絕對命名空間的方式</strong> 對Article 調用。</p></li><li><p><code>withArticles</code> 是我定義的方法，Laravel View 採用<code>__call</code> 来 handle 對未定義 function 的調用，给view注入 $articles 的變數，這行code等於 <code>-&gt;with('articles', \App\Article::all())</code></p></li><li><p><code>-&gt;withFooBar(100)</code> 等於 <code>-&gt;with('foo_bar', 100)</code>，即駝峰變數會被轉換為蛇形變數。</p></li><li><p>修改view文件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@extends('layouts.app')</span><br><span class="line"></span><br><span class="line">@section('content')</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"title"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Learn Laravel 5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 5px; font-size: 16px;"</span>&gt;</span>Learn Laravel 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            @foreach ($articles as $article)</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"margin: 50px 0;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url('article/'.$article-&gt;id) &#125;&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; $article-&gt;title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $article-&gt;body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            @endforeach</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure></p></li><li><p>調整view，以增加頂端菜單欄<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Learn Laravel 5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/2.2.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"title"</span> <span class="attr">style</span>=<span class="string">"text-align: center;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Learn Laravel 5<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"padding: 5px; font-size: 16px;"</span>&gt;</span>Learn Laravel 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            @foreach ($articles as $article)</span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"margin: 50px 0;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url('article/'.$article-&gt;id) &#125;&#125;"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123; $article-&gt;title &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; $article-&gt;body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            @endforeach</span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>view 變成一個獨立的view，不再有基底view，并將 jQuery 和 BootStrap 替換為CDN，更快更稳定了。</p></li><li><p>同理也更改 <code>app.blade.php</code></p></li><li><p>删除 <code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code>和</p></li><li><p>替换 <code>&lt;link href=&quot;&quot; rel=&quot;stylesheet&quot;&gt;</code>為<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/2.2.4/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> view </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1. Laravel Practice</title>
      <link href="/repository/2019/10/27/1-Laravel-Practice/"/>
      <url>/repository/2019/10/27/1-Laravel-Practice/</url>
      
        <content type="html"><![CDATA[<h1>Installation</h1><p>&lt;!--more--&gt;</p><hr><h2>Install with docker</h2><p>(using richarvey now , should create by myself)</p><ol><li>透過 <code>composer global require laravel/installer</code> 去安裝</li><li>會面臨到 <code>bash:laravel command not found</code>的問題</li><li>透過 <code>export PATH=&quot;~/.composer/vendor/bin:$PATH&quot;</code> 去解決</li><li>接著， <code>laravel new project</code> (記得要加-f )</li><li>記得去改 <code>vi /etc/nginx/sites-enabled/*</code></li><li>更改裡面檔案路徑<code>/project/public</code></li></ol><p>以上是以 nginx 環境操作</p><h2>DB setting</h2><ol><li>via <code>php artisan make:auth</code> create 登入畫面</li><li>via <code>php artisan migrate</code> create DB structure</li><li>根據 <code>database/migrations/2014_10_12_000000_create_users_table.php</code> 去部署 DB structure</li></ol><h2>Eloquent</h2><ul><li><p>Eloquent is laravel ORM<code>php artisan make:model Article</code> Artisan 幫我們生成的Model 文件</p></li><li><p>Eloquent讓一個 <strong>Model</strong> 對應一張數據庫表，並且在底層封裝了很多 <strong>function</strong> ，可以讓Model非常方便地調用</p></li><li><p>只需要繼承Eloquent，就可以 use <strong>first() find() where() orderBy()</strong> 等功能<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">extends</span> \<span class="title">Eloquent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> $fillable = [];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>基礎使用要點</h4><ol><li>每一個繼承Eloquent 的類都有兩個'固定用法'</li></ol><ul><li><code>Article::find($number)</code> 會得到一個帶有DB中取出來值的對象</li><li><code>Article::all()</code> 會得到一個包含整個DB的對象合集。</li></ul><ol start="2"><li><p>所有的中間方法如<code>where()</code> <code>orderBy()</code> 等都能夠同時支持'靜態' 和'非靜態式' 兩種方式調用即<code>Article::where()...</code>  和 <code>Article::....-&gt;where()</code>。</p></li><li><p>所有的'非固定用法' 的調用最後都需要一個操作來'收尾'，本片教程中有兩個'收尾操作'：<code>-&gt;get()</code> 和<code>-&gt;first()</code>。</p></li><li><p>如果不理解為什麼'Article'這個類可以使用<code>-&gt;where()</code> <code>-&gt;get()</code>等很多方法的話，需要去讀一下PHP對象繼承的文檔了：對象繼承。</p></li></ol><h3>Model DB manipulation</h3><h5>Example</h5><ol><li>Find the article which id = 2 and print it out<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$article = Article::find(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">echo</span> $article-&gt;title;</span><br></pre></td></tr></table></figure></li><li>Search and find the title which is &quot;我是標題&quot;，and print id<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$article = Article::where(<span class="string">'title'</span>, <span class="string">'我是標題'</span>)-&gt;first();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $article-&gt;id;</span><br></pre></td></tr></table></figure></li><li>Search all article and repeat to print all title<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$articles = Article::all(); <span class="comment">//此處得到的$articles是一個對象集合，可以在後面加上'-&gt;toArray()'變成多維數組。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($articles <span class="keyword">as</span> $article) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $article-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Search all the article which id is between 10~20 and print all the title out<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$articles = Article::where(<span class="string">'id'</span>, <span class="string">'&gt;'</span>, <span class="number">10</span>)-&gt;where(<span class="string">'id'</span>, <span class="string">'&lt;'</span>, <span class="number">20</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($articles <span class="keyword">as</span> $article) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $article-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Search all the article and repeat to print all the title ,按照updated_at 倒序排序<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$articles = Article::where(<span class="string">'id'</span>, <span class="string">'&gt;'</span>, <span class="number">10</span>)-&gt;where(<span class="string">'id'</span>, <span class="string">'&lt;'</span>, <span class="number">20</span>)-&gt;orderBy(<span class="string">'updated_at'</span>, <span class="string">'desc'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>($articles <span class="keyword">as</span> $article) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> $article-&gt;title;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2>使用Migration 和Seeder</h2><h3>Use artisan 生成 Migration</h3><ul><li><p><code>php artisan make:migration create_articles_table</code></p></li><li><p>A file which name is 2*****_create_articles_table has been create successfully。We edit its &quot;up&quot; function:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">up</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    Schema::create(<span class="string">'articles'</span> , <span class="function"><span class="keyword">function</span> <span class="params">( Blueprint $table )</span>     </span>&#123; </span><br><span class="line">        $table -&gt; increments( <span class="string">'id'</span> ); </span><br><span class="line">        $table -&gt; string( <span class="string">'title'</span> ); </span><br><span class="line">        $table -&gt; text( <span class="string">'body'</span> ) -&gt; nullable(); </span><br><span class="line">        $table -&gt; integer( <span class="string">'user_id'</span> ); </span><br><span class="line">        $table -&gt;timestamps(); </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>And we make the php into real MySQL database:</p></li></ul><p><code>php artisan migrate</code></p><h3>Use artisan 生成 model and migration</h3><ul><li><p><code>php artisan make:model Post -m</code></p></li><li><p>model本身是個類別，所以採「大駝峰」命名，且名稱最後不加s</p></li><li><p>資料表命名規則為：table名稱小寫，且補上s</p></li></ul><h3>Use artisan 生成 Seeder</h3><ul><li><p><code>php artisan make:seeder ArticleSeeder</code></p></li><li><p>Edit its &quot;run&quot; function<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        </span><br><span class="line">DB::table(<span class="string">'articles'</span>) -&gt; delete();    </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span> ; $i &lt; <span class="number">10</span> ; $i ++) &#123; </span><br><span class="line">    \App\Article::create([<span class="string">'title'</span>=&gt;<span class="string">'Title'</span>.$i,<span class="string">'body'</span>=&gt;<span class="string">'Body'</span>.$i,<span class="string">'user_id'</span>=&gt;<span class="number">1</span>,]);</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>把ArticleSeeder註冊到系統內。修改DatabaseSeeder.php的 &quot;run&quot; function<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">run</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">$this</span> -&gt; call( ArticleSeeder::class ); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>執行<code>php artisan db:seed</code></p></li><li><p>Refresh articles table，already have 10 rows of fake data</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> PHP </category>
          
          <category> Laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About</title>
      <link href="/repository/about/index.html"/>
      <url>/repository/about/index.html</url>
      
        <content type="html"><![CDATA[<h1>Hello, This is PinJin !</h1><ul><li><a href="https://www.lumos.tw/" target="_blank" rel="noopener">Introduction_Link</a></li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/repository/categories/index.html"/>
      <url>/repository/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tag</title>
      <link href="/repository/tag/index.html"/>
      <url>/repository/tag/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Search</title>
      <link href="/repository/search/index.html"/>
      <url>/repository/search/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
